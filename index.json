[{"categories":["阅读"],"content":"这篇文章是《人格解码》的读书笔记，讲述了一种形成人格全景的实践策略。可能有部分读者跟在下一样，容易在闲言碎语的公共场合感到尴尬，无所适从，该书提供的一个可供诸位在聚会上消磨时光的游戏--捕捉酒杯后面众生的人格全景。","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"作者塞缪尔·巴伦德斯（Samuel Barondes），生于 1933 年，是美国神经病专家、神经科学家，加州大学（旧金山）心理学教授，美国科学院医学院士、美国艺术与科学研究院院士。巴伦德斯主要研究分子神经病学（molecular psychiatry），曾发表过 200 多篇论文，H 指数高达 80+。著有通俗读物《人格解码》、《分子和心理疾病》、《情绪基因》、《胜过百忧解》等。 巴伦德斯学术功底深厚，轻而易举把大五人格整合到日常实践中，通俗好懂易操作。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:0:0","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"大五人格特质 上世纪八十年代，美国人格心理学家刘易斯·格登伯格（Lewis R. Goldberg），曾极力公开支持词汇假设（lexical hypothesis），即任何重要文化人格特质都将以该文化的语言表达出来。格登伯格将八十年代早期心理学家归纳，描述人格的词汇的五个大类，称为「大五人格特质（Big Five personality traits）」。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:1:0","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"一 大五人格特质，又称大五性格模型（The Five Model，FFM），是现代心理学中描述最高组织层次的五个方面的人格特质。五类人格特质包括外向性（extraversion，E）、宜人性（agreeableness，A）、责任心（conscientiousness，C）、神经质（neuroticism，N）和开放性（openness，O），简称 OCEAN。从个人性格发展角度上来说，「大五人格」在进入职场后大约四年趋于稳定，即使经历重大人生事件，成人的性格特质也不会发生太大变化。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:1:1","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"二 在最初 1985 年设计的 NEO PI 人格量表基础上，美国人格心理学家罗伯特·麦克雷（Robert McCrae）与保罗·考斯塔（Paul Costa）一同研发出了 NEO PI-R（Revised NEO Personality Inventory）人格量表。该问卷采用短句，从而消除了单个词汇所隐含的歧义；问卷对大五人格中的每个维度进行测量，把每个维度（domain）分为六个层面（facet），深入到具体的性格差异。NEO PI-R 在跨年龄、跨文化，以及采用不同测量方法都是有效的。 结合不同版本 NEO PI-R 的表述方式，大五人格的六个层面可以归纳为： 外向性 热心、友谊（容易交朋友） 爱交际（喜欢与其他人为伴） 自信心（喜欢担当） 有活力（喜欢忙碌） 寻求刺激（喜欢刺激） 积极的情绪、愉悦感（很容易感到开心） 宜人性 信任（认为人们都是好心的） 坦率、道德感（直率，避免欺骗） 利他性（觉得帮助他人很有价值，不剥削他人） 顺从、合作（喜欢协商而不是对立） 谦虚（不吹嘘） 温和、同情心（善良，富有同情心） 责任心 胜任感、自我效能（能做出成就） 秩序感、规矩（很有条理，制定计划） 责任感（十分可靠） 努力追求成就（为卓越而努力工作） 自律（有意志力） 深思熟虑、谨慎（花时间做决策） 神经质 焦虑（容易感到害怕） 充满敌意（容易怨恨） 抑郁（容易沮丧、悲观） 忸怩不自然（因为害怕被拒绝而害羞） 冲动、缺乏思考（不易抑制冲动） 脆弱（因压力而失去平衡） 开放性 幻想、想象力（竭力想创造一个更为有趣的世界） 审美、艺术兴趣（喜欢艺术和自然的美） 情感、情绪（能意识到自己的情感） 行动、冒险性（渴望尝试新活动） 思想、智力（喜欢思考） 价值观、自由主义（常常挑战传统） 五个维度更易察觉，而三十个层面更有质感，可以从上到下，先凭直观感受判断维度值高低，再进入层面捕捉突出的特点，并以事例佐证，形成更精确的判断；反之五个维度更简洁抽象，可以从下往上，将层面的得分累加到各维度，形成一个简化版的人格图景。 这里有一个免费的 IPIP NEO-PI 测试，包括 300 题完整测试和 60 题简易测试，由宾夕法尼亚大学的 John Johnson 教授维护。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:1:2","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"十大人格类型 日常生活中，人们会用一些词汇方便地总结了某些显著的人格特点，例如交际花形容擅长交际性格外向的人。心理治疗师意识到这些富有感染力的词汇非常有用，于是总结出了十个特别有用的词汇，即十大人格类型（Top Ten Personality Type）。 《美国心理治疗协会诊断和统计分析手册》（DSM-IV）简述十大人格类型如下： 反社会型：不尊重他人且侵犯他人权益 回避型：社交回避，有自卑感，对负面评价高度敏感 边缘型：人际关系、自我形象及情绪都不稳定，非常易冲动 强迫症：过分追求条理、完美主义和控制感 依赖型：过分需要被照顾，顺从和依附他人 表演型：过分寻求情感和关注 自恋型：夸夸其谈，需要他人赞赏，缺乏同理心 妄想型：不信任、怀疑，恶意曲解他人目的 分裂样型：远离任何社交关系，情绪表达受限 分裂型：对亲密关系感到非常不舒服，认知或观念扭曲，行为乖张 分析他人的人格时，先凭直觉将其归为十大人格类型之一，或者根据其外号和对其的评价判断可能人格特质，再由此思考大五人格特质，这样比没有假设单纯对照大五人格的三十六个层面更有效。 例如，一些只想做自己，对社交不感兴趣，不在乎别人怎么想，缺乏性欲，唯一想的是实现梦想，外向性低可能属于分裂样型或分裂型，但根据其不厌恶别人、不会焦虑的特点，可判断他属于分裂样型。基于分裂样型假设，可找到观察的重心，例如分裂样型的人容易患抑郁症，可能难以获得积极情绪。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:2:0","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"性格形成 性格多样性有其深层根源，既受限于基因，又受后天环境影响。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:3:0","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"一 性格不是通常认为的，有些性格是好的，有些性格是坏的，例如高宜人性是好的，高神经质是坏的。 环境随进化过程不断变化，人类彼此竞争，相同竞争策略在不同环境下有得有失。这一过程会选择适应不同条件的基因变异（其中包含影响人格的基因变异），决定不同人格的基因在环境变迁中积累，达成一个个稳态。 例如，在外向性上得分高的人喜欢和他人密切交往，喜欢有机会担任要职，容易获得性伴侣；但太过密切的关系会带来相应的风险，担当要职会招致嫉妒和反叛，高刺激寻求会更容易发生事故，牵扯进犯罪。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:3:1","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"二 既然人格受限于基因，许多人格特质与生俱来，成年后也很难改变。 例如，属于分裂样型的人，情绪表达受限，在他家族中通常能找到相似人格特质的人。 又如，杰洛米·卡根的系列研究发现，儿童 2 岁和 7 岁时不愿意与不熟悉的人接触，成年后大部分仍然不愿意与不熟悉的人接触。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:3:2","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"三 即使基因一模一样的同卵双胞胎，基因表达也不同。例如，大脑神经网络就有巨大差异。 人类大脑不像其他组织一样，每个细胞在组织内有确定的位置。受精卵分裂时，会产生很多原始的神经元，他们通过启动和关闭特定的基因，选择性的对一些化学信号作出反应，在化学信号的指引下，游移到指定的地方。这些神经元到达目的地后，就开始与其他神经元建立联结，形成神经回路和神经网络。神经回路的成熟，并不是靠形成新的联结，而是用进废退，这一情况大多发生在胎儿期和出生后最初几年，少数发生在成年之前。 人格虽源于基因，但仍能够做有限的改变，尤其是成年前的经历对一个人的人格有很大的影响。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:3:3","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"美德 由克里斯托弗·皮特森和马丁·塞利格曼为首的一小群心理学家，反对高登·奥尔波特坚持用一种完全描述性的方式去使用人格（无视品质好坏），在一项针对东西方主要宗教和哲学传统进行的研究中发现，人们对很多优秀品格存在普遍的认同和赞许，所有文化都高度认同的优点可归纳为六大类： 节制，诸如自我控制和节俭的优点 勇气，勇敢和坚持的优点，面对内外阻碍时有助于实现目标 人道，善良和爱的优点，关爱他人，友善待人 正义，公正和公民意识，有助于集体生活 智慧，开放的心态，热爱学习，有助于知识的获取和运用 超越，敬畏和精神力量，有助于与宇宙相连，提供生命意义 心理医生罗伯特·克洛宁格对此有自己的分类： 自我指向性：指对自我的控制，使自己成为一个有目的、有责任、有很多资源的人，与节制和勇气相重叠 合作性：指有同理心、怜悯心和原则性，有助于和他人建立互惠关系，与人道和正义相重叠 自我超越性：指意识到你是宇宙的一部分，是精神、智慧和理想的综合体，与智慧和超越相重叠 人类往往不满足于「真」，喜欢把他人绑上善恶的标签。为避免自身偏见影响评价他人品质，可以对照六大美德判断他人的品质。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:4:0","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"个人神话 虽然借助大五人格模型、十大人格类型、六大美德等工具，可以获得他人格特征，但是这些只是数据，记不住，用不上。此时，便需要故事来充实他的人格全景。 心理学家丹·麦克亚，给「人们所构建的关于自己是谁的个人神话」一个术语，即人格同一性（identity），包括关于过去的想法和对未来的希望等。关注他人的同一性，聆听他人讲述自己的故事，容易产生同理心，会促使你思考在他的境况下自己会成为怎样的人，有助于澄清对其品格所做的判断。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:5:0","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"人格全景 巴伦德斯在全书的末尾梳理了一套形成人格全景的实践策略： 记住人类共同的人性和人格发展的共同方式 形成一个大五人格轮廓，并注意那些明显的特质 寻找潜在的人格问题类型 运用普适标准和文化标准进行道德评价 聆听他人的故事，并将此与你所观察到的现象联系起来 整合你发现的所有信息 最后，希望这个实践策略能够为你添加社交佐料，让你不再厌恶社交聚会，在人世间遇见更多精彩的个体。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:6:0","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"参考 人格解码 (豆瓣) Samuel Barondes | UCSF Profiles Samuel Barondes - Google Scholar Citations 五大性格特质 - 维基百科，自由的百科全书 Revised NEO Personality Inventory - Wikipedia ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:7:0","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"ChangeLog 2019-07-27 初稿 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:8:0","tags":["人格","心理学"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["阅读"],"content":"这篇文章是《众病之王—癌症传》的读书笔记，讲述癌症往事、治疗与预防。","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":" 你是谁，你来自何方？ 我来自于你，我是另一个你。 我是我，你怎么会是我？ 我是你的突变体，你们称之为「扭曲态」。 你为何会出现？ 一切事物都有偏差，我是你犯下的错误。 难道没办法避免错误吗？ 除了死亡，任何人都逃不脱这一宿命。 那你的宿命呢？ 我的宿命是你，你活下来是我唯一的希望。 会有一天，我能一直活下去吗？ 不排除可能，但那一天，你已不再是你，可能是我，可能是其他，也可能成了神。 — By 夜航星 本书作者悉达多·穆克吉（Siddhartha Mukherjee），是印度裔美籍肿瘤医生、生物学家，主要研究癌细胞的生理机制、白血病的免疫疗法和骨骼 - 软组织形成干细胞。此外，他还是科普作家，著有《众病之王》、《基因传》等，其中《众病之王》获得 2011 年非虚构类普利策奖。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:0:0","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":"癌症往事 医学行业知道癌症已经 3000 多年，直到近两个世纪，随着孟德尔、沃森、克里克等人逐步揭开基因秘密，人类才知晓癌症起于何处，有了治疗特定癌症的方法。《众病之王》讲述了癌症千百年的历史，从引发人类恐惧并被赋予其邪恶隐喻的黑胆汁，到二十一世纪作为人类日常生活一部分的癌症。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:1:0","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":"不明所由 中世纪，约翰尼斯·史卡尔提特斯（Johannes Scultetus），记述了一种乳房切除术—用火、酸和皮革绑缚来做外科乳腺癌移除。这一类最原始的攻击癌症方法，在二十世纪之前，一直是治疗癌症的唯一选择，只是器材变先进，手法变高超，切除范围变得更肆无忌惮而已。 直到 1947 年，西德尼·法伯发现了一种叶酸类似物氨基蝶呤，能够（通过阻断细胞代谢）杀死骨髓中快速增殖的细胞。他利用氨基蝶呤实现了急性淋巴细胞白血病的短暂缓解，开启了化疗在癌症治疗中的应用。在此基础上，埃米尔·弗雷、埃米尔·弗雷瑞克等人开创了细胞毒性药物组合化疗，结合使用 6-巯基嘌呤和甲氨蝶呤部分或者全面地缓解症状，并且延长急性白血病患者的寿命。 之后，放疗作为一种能够替代外科手术的治疗手段出现，用于消灭局部癌症。亨利·卡普兰（Henry Kaplan）率先用放疗治愈了霍奇金氏病，将放疗引入到淋巴癌治疗。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:1:1","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":"扭曲的基因 随着生物学家逐步揭开基因真相，癌症理论开始形成。哈罗德·瓦缪斯（Harold Elliot Varmus）和迈克尔·毕晓普（Harold Elliot Varmus）共同发现癌症不由外源性病毒引起，而通过激活（所有正常细胞都含有的）内源性前体基因而引起，一同获得 1989 年诺贝尔生理学或医学奖。该发现为癌症的早期检测改进，疗效预测，以及靶标疗法的发展等提供了全新的策略。 正如，牛顿以对万有引力的理解，预言了 1758 年哈雷彗星的返回。瓦缪斯和毕晓普提出的癌变学说（即致癌基因的前体（原癌基因）存在于所有的正常细胞中，并在劳斯肉瘤病毒里找到了 src 原癌基因），也做了一次冒险性预测（risky prediction）— 原癌基因的突变体一定存在于癌细胞中。罗伯特·温伯格等人分别从癌细胞中发现了 Ras（Ras subfamily）基因（正常细胞都有）的突变体，正如瓦缪斯和毕晓普所预测，Ras 基因在癌细胞中发生突变，尔后编码出的突变体蛋白，不可遏制地产生一种信号促使细胞持续分裂。之后，罗伯特等人又发现了肿瘤抑制基因 Rb1（Retinoblastoma gene）。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:1:2","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":"世纪之交 罗伯特·温伯格和道格拉斯·哈纳汉，于 2000 年 1 月发表了《癌症的标志》，标志着癌症研究在二十世纪一整个世纪的发展之后，峰回路转，回到「单一病因」的观念。该文将上百种不同类型和亚类型肿瘤的核心行为，归纳为以下六种核心机能的不同组合变换形式： 生长信号的自给自足：由于致癌基因，例如 ras 或 myc 的活化，导致癌细胞获得了自主增殖（病理性有丝分裂）的能力。 对抑制生长（抗增长）信号的不敏感性：癌细胞可以使肿瘤抑制基因失活，如成视网膜细胞瘤（Rb），通常能抑制生长。 逃避细胞程序性死亡（细胞凋亡）：癌细胞能抑制和灭活引起细胞正常死亡的基因和通路。 无限的复制潜力：癌细胞能激活特异性的基因通路，使它们代代增长永远不死。 持续的血管新生：癌细胞通过肿瘤血管新生获得了从血液和血管里自给自足的能力。 组织浸润和转移：癌细胞具有转移到其他器官、侵入其他组织并占据这些器官的能力，因此它们可以蔓延到身体各处。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:1:3","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":"带着癌症老去 农业生产力提升减少了饥饿和营养不良，疫苗发明让天花退出了历史，抗生素迎头痛击细菌，癌症在人类杀手排行榜上一路向前冲。全球每年约 800 万人死于癌症，我国居民医生罹患癌症概率为 22%，癌症成了许多人生活的一部分。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:2:0","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":"癌症治疗 根据癌细胞的弱点和癌症病例，主要疗法可归纳为六类。 两类传统疗法 大多数癌症在系统性扩散之前源于局部性疾病，外科手术和放疗可将癌细胞彻底消灭，激素可使发病器官萎缩。 某些癌细胞快速增长，药物可以此为标靶。 例如，叶酸拮抗剂（如法伯的氨基喋呤）干扰叶酸代谢，剥夺所有细胞分裂所需的某种重要营养；氮芥、顺铂与 DNA 发生化学反应，致使 DNA 受损的细胞不能复制自己的基因，从而不能分裂；长春新碱（长春花毒）阻挠细胞分裂所需的架构「分子脚手架」的能力。 缺点是细胞毒素同样会攻击正常细胞，负作用难以承受。 四类新疗法 原癌基因和肿瘤抑制基因通常位于细胞信号通路的中枢。癌细胞之所以分裂和生长，是因为它们受驱于这些关键通路发出的「高度活跃」或「不活跃」的信号。这些通路在正常细胞中也存在，但是被严格地管控，潜在的肿瘤细胞依赖于这种永久激活的通路。 例如，赫赛丁（Herceptin）作为 Her-2 的抗体，能够结合癌细胞表面的 Her-2，从而清除致癌基因过度活跃的信号，阻碍癌细胞生长，适用于 Her-2 阳性的癌症患者。 另外，通过癌细胞基因测序，发现许多癌症中突变的核心通路有 13 条，可针对这些核心通路开发药物，而不去管「乘客」突变。 突变、选择和生存不断地循环，创造出在生长失控之外又获得了其他额外特征的癌细胞。这些特征包括抗拒死亡的信号、全身性转移以及刺激血管生长。这些「癌症标志」并不是癌细胞的发明创造，而是由与身体正常生理类似的败坏过程衍生而来的，癌细胞征用并依赖这些过程。 例如，格列卫能够滑入 Bcr-ab1 蛋白分子中央的一个窄小的楔形裂隙中，从而阻止癌细胞生殖。 利用免疫系统在特定种类癌症中的作用。 例如，治疗晚期黑素瘤的药物 Pembrolizumab，这种单克隆抗体可以阻断免疫细胞上 PD1 蛋白的活性，增强了针对于癌症的免疫活性。 癌细胞微环境的作用，特定的癌细胞只入侵特定的组织。通过破坏癌细胞「避风港」，可减弱癌细胞的抗药能力。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:2:1","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":"治与不治 一些有明显弱点的癌症，如乳腺癌、慢性粒细胞白血病、霍奇金病和多数早期局部癌症，已经有了有效疗法。但晚期转移癌症，如转移性 Her-2 阴性乳腺癌和转移性胰腺癌，或者无法进行外科手术的癌症，如胆囊癌，目前疗效与 3000 年前没多少差别，癌症依旧是人类心口的刺。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:2:2","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":"提防死神 患有癌症，即使疗效好的癌症，也是可怕的经历。其一，治疗期也长达好几个月，甚至一辈子；其二，治愈后，病人还要多次复查；其三，未必那么幸运能够治愈。因此，即便逃不脱统计学概率，即便终究会因老而死，仍然有必要预防以降低非系统性风险。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:3:0","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":"致癌物清单 中国食品药品检定研究院安全评价研究所，根据世界卫生组织国际癌症研究机构 2017 年 10 月 27 日公布的致癌物清单进行的初步整理，将致癌物分为四个等级： 1 类致癌物：对人为确定致癌物。 2 类致癌物 2A 类致癌物：对人很可能致癌，此类致癌物对人致癌性证据有限，对实验动物致癌性证据充分。 2B 类致癌物：对人可能致癌，此类致癌物对人致癌性证据有限，对实验动物致癌性证据并不充分；或对人类致癌性证据不足，对实验动物致癌性证据充分。 3 类致癌物：对人类致癌性可疑，尚无充分的人体或动物数据。 4 类致癌物：对人类很可能不致癌。 其中 1 类致癌物清单（共 120 种）： 序号 英文名称 中文名称 时间（年） 1 Acetaldehyde associated with consumption of alcoholic beverages 与酒精饮料摄入有关的乙醛 2012 2 “Acheson process, occupational exposure associated with” 与职业暴露有关的艾其逊法（用电弧炉制碳化矽） 2017 3 “Acid mists, strong inorganic” 强无机酸雾 2012 4 Aflatoxins 黄曲霉毒素 2012 5 Alcoholic beverages 含酒精饮料 2012 6 Aluminium production 铝生产 2012 7 4-Aminobiphenyl 4-氨基联苯 2012 8 Areca nut 槟榔果 2012 9 Aristolochic acid 马兜铃酸 2012 10 “Aristolochic acid, plants containing” 含马兜铃酸的植物 2012 11 Arsenic and inorganic arsenic compounds 砷和无机砷化合物 2012 12 “Asbestos (all forms, including actinolite, amosite, anthophyllite, chrysotile, crocidolite, tremolite)” 石棉（各种形式，包括阳起石、铁石绵、直闪石、温石棉、青石棉、透闪石） 2012 13 Auramine production 金胺生产 2012 14 Azathioprine 硫唑嘌呤 2012 15 Benzene 苯 In prep. 16 Benzidine 联苯胺 2012 17 “Benzidine, dyes metabolized to” 染料代谢产生的联苯胺 2012 18 Benzo[ a ]pyrene 苯并[a]芘 2012 19 Beryllium and beryllium compounds 铍和铍化合物 2012 20 Betel quid with tobacco 含烟草的槟榔嚼块 2012 21 Betel quid without tobacco 不含烟草的槟榔嚼块 2012 22 Bis(chloromethyl)ether; chloromethyl methyl ether (technical-grade) 双（氯甲基）醚；氯甲基甲基醚（工业级） 2012 23 Busulfan 白消安 2012 24 “1,3-Butadiene” “1,3-丁二烯” 2012 25 Cadmium and cadmium compounds 镉及镉化合物 2012 26 Chlorambucil 苯丁酸氮芥 2012 27 Chlornaphazine 萘氮芥 2012 28 Chromium (VI) compounds 铬 (6 价) 化合物 2012 29 Clonorchis sinensis (infection with) 华支睾吸虫（感染） 2012 30 Coal gasification 煤炭气化 2012 31 “Coal, indoor emissions from household combustion of” 家庭烧煤室内排放 2012 32 Coal-tar distillation 煤焦油蒸馏 2012 33 Coal-tar pitch 煤焦油沥青 2012 34 Coke production 焦炭生产 2012 35 Cyclophosphamide 环磷酰胺 2012 36 Cyclosporine 环孢菌素 2012 37 “1,2-Dichloropropane” “1,2-二氯丙烷” 2017 38 Diethylstilbestrol 己烯雌酚 2012 39 “Engine exhaust, diesel” 柴油发动机排气 2014 40 Epstein-Barr virus 爱泼斯坦 - 巴尔病毒 2012 41 Erionite 毛沸石 2012 42 “Estrogen therapy, postmenopausal” 绝经后雌激素治疗 2012 43 Estrogen-progestogen menopausal therapy (combined) 雌激素 - 孕激素更年期治疗（合用） 2012 44 Estrogen-progestogen oral contraceptives (combined) 雌激素 - 孕激素口服避孕药（合用） 2012 45 Ethanol in alcoholic beverages 含酒精饮料中的乙醇 2012 46 Ethylene oxide 环氧乙烷 2012 47 Etoposide 依托泊苷 2012 48 Etoposide in combination with cisplatin and bleomycin 依托泊苷与顺铂和博来霉素合用 2012 49 “Fission products, including strontium-90” 裂变产物，包括锶 - 90 2012 50 Fluoro-edenite fibrous amphibole 氟代 - 浅闪石纤维状角闪石 2017 51 Formaldehyde 甲醛 2012 52 Haematite mining (underground) 赤铁矿开采（地下） 2012 53 Helicobacter pylori(infection with) 幽门螺杆菌（感染） 2012 54 Hepatitis B virus (chronic infection with) 乙型肝炎病毒（慢性感染） 2012 55 Hepatitis C virus (chronic infection with) 丙型肝炎病毒（慢性感染） 2012 56 Human immunodeficiency virus type 1 (infection with) 人免疫缺陷病毒 I 型（感染） 2012 57 “Human papillomavirus types 16,18,31,33,35,39,45,51,52,56,58,59” 人乳头瘤病毒 16，18，31，33，35，39，45，51，52，56，58，59 型 2012 58 Human T-cell lymphotropic virus type I 人嗜 T 淋巴细胞病毒 I 型 2012 59 Ionizing radiation (all types) 电离辐射（所有类型） 2012 60 Iron and steel founding (occupational exposure during) 钢铁铸造（职业暴露） 2012 61 Isopropyl alcohol manufacture using strong acids 使用强酸生产异丙醇 2012 62 Kaposi sarcoma herpesvirus 卡波氏肉瘤疱疹病毒 2012 63 Leather dust 皮革粉末 2012 64 Lindane (see also Hexachlorocyclohexanes) 林丹（参见六氯环己烷） In prep. 65 Magenta production 品红生产 2012 66 Melphalan 美法仑 2012 67 Methoxsalen (8-methoxypsoralen) plus ultraviolet A radiation 花椒毒素（8-甲氧基补骨脂素）伴紫外线 A 辐射 2012 68 “4,4’-Methylenebis(2-chloroaniline) (MOCA)” “4,4’-亚甲基二（2-氯苯胺）（MOCA）” 2012 69 “Mineral oils, untreated or mildly treated” 未经处理或轻度处理矿物油 2012 70 MOPP and other combined chemotherapy including alkylating agents MOPP（氮芥、长春新碱、甲基苄肼、强的松）及其他含烷化剂的联合化疗 2012 71 2-Naphthylamine 2-萘胺 2012 72 Neutron radiation 中子辐射 2012 73 Nickel compounds 镍化合物 2012 74 N’-Nitrosonornicotine (NNN) and 4-(N-Nitrosomethylamino)-1-(3-pyridyl)-1-butanone (NNK) N’-亚硝基降烟碱（NNN）和","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:3:1","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":"防癌最小行动 针对日常容易遇见的致癌物，例如，酒精饮料、槟榔、加工过的肉类、中式咸鱼、烧煤、吸烟、汽车尾气、室外空气污染、含颗粒物的室外空气污染、二手烟草烟雾、焊接烟尘、木尘、太阳辐射，制定以下几项最小行动。 饮食 如果去超市、小店买零食，那么不要把啤酒、RIO、槟榔、酱肉、香肠、牛肉干带出来。 如果和朋友去聚会，那么要坚决少喝酒，以 300 ml 啤酒为上限，且不喝其他酒精度更高的酒。 如果去食堂、快餐店或者其他餐饮店吃饭，那么不要点香肠、培根、咸鱼，而是点新鲜的鱼肉蛋奶作为蛋白质来源。 燃料、烟与尘 如果回家路上遇见烧烤摊，或者出去吃饭，那么不要去买烧烤，真想吃，就买个榴莲过瘾。 如果路上遇见烟尘很大的地方或者有人吸烟的地方，那么快速离开这个地方。 如果上下班路上经过汽车拥堵的大马路或者空气污染严重，那么买一个能减轻汽车尾气和空污影响的口罩，带上口罩走路。 辐射 如果太阳很大的天要出门，那么带上鸭舌帽。 如果遇见辐射标志，那么快速离开附近。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:3:2","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":"参考 众病之王 (豆瓣) 世界卫生组织国际癌症研究机构致癌物清单 250 年抗击癌症中的里程碑式进展 - 北京大学肿瘤医院 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:4:0","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["阅读"],"content":"ChangeLog 2019-07-17 补充开头的诗 2019-07-15 初稿 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:5:0","tags":["疾病"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["整理"],"content":" Git 是目前世界上最先进的分布式文本文件版本控制系统 ","date":"2019-04-06","objectID":"/2019-03-26-git/:0:0","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"Git 快速上手 Cheat Sheet：workspace :: Git Cheatsheet 、常用 Git 命令清单 - 阮一峰的网络日志 Git 使用流程：Git 使用规范流程 - 阮一峰的网络日志 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:0","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"Git 基本概念 工作区（Working Directory），即电脑里能看到的目录 版本库/本地仓库（Repository），即工作区的隐藏目录 .git ，包含暂存区、分支、HEAD 等 暂存区（stage/index），存在于版本库之中 分支（branch），Git 创建版本库时，会自动创建第一个分支 master ，以及指向 master 的一个指针 HEAD 远程仓库（remote repository） 上图来自：Git 常用命令 - Gityuan 博客 | 袁辉辉的 Android 博客 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:1","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"安装 Git Linux 可以用 git 在终端测试系统是否安装了 Git，安装方法是 sudo apt-get install git macOS 一是安装 homebrew，然后通过 homebrew 安装 Git，具体方法请参考 homebrew 的文档：The missing package manager for macOS (or Linux)。 二是直接从 AppStore 安装 Xcode，更简单，也更推荐。Xcode 集成了 Git，不过默认没有安装，你需要运行 Xcode，选择菜单 Xcode-\u003ePreferences ，在弹出窗口中找到 Downloads ，选择 Command Line Tools，点 Install就可以完成安装了。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:2","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"全局配置 安装完成后，还需要最后一步设置，在命令行输入： $ git config --global user.name \"Your Name\" $ git config --global user.email \"email@example.com\" 因为 Git 是分布式版本控制系统，所以要表明各自的身份。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:3","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"创建版本库 (repository，仓库) 和提交修改 版本库可以简单理解成一个目录，这个目录里面的所有文件都可以被 Git 管理起来，每个文件的修改、删除，Git 都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以还原。 创建版本库 进入到一个目录，通过 git init 命令把这个目录变成 Git 可以管理的仓库，此时输入 ls -ah 命令，发现当前目录下多了一个 .git 的目录 把工作区（目录）的修改添加到暂存区 若新建了 README.md ，用命令 git add README.md 把文件添加到仓库暂存区，git add . 可将所有的修改添加到暂存区 查看仓库当前状态 用命令 git status 可以查看仓库当前状态 On branch master No commits yet Changes to be committed: (use \"git rm --cached \u003cfile\u003e...\" to unstage) new file: README.md 提交到当前分支 用命令 git commit -m \"commit message\" 把本次修改提交到当前分支，此时工作区变为 nothing to commit, working tree clean 一步将工作区的修改提交到分支 用命令 git commit -am \"commit message\" 可以提交工作区所有 tracked 的修改到当前分支。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:4","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"撤销修改和版本回滚 万事都有失，Git 挽回失误的操作有撤销「添加到暂存区」、撤销「本次提交到当前分支」、回滚到「之前的某一次提交」。 查看工作区的修改 git diff 查看上次对工作区的修改，显示工作区与暂存区的比较（优先）或工作区与当前分支比较，显示的格式正是 Unix 通用的 diff 格式。 撤销工作区修改 用 git status 查看当前仓库状态时，Changes not staged for commit: 下面会提示如何撤销工作区修改， use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory ，即用 git checkout -- \u003cfile\u003e 将文件在工作区的修改恢复到上一次添加到暂存区后的状态（优先）或当前分支的状态。 撤销添加到暂存区 用 git status 查看当前仓库状态时，Changes to be committed: 下面会提示如何撤销暂存区的修改， use \"git reset HEAD \u003cfile\u003e...\" to unstage ，即用 git reset HEAD \u003cfile\u003e 把暂存区的修改撤销掉，重新放回工作区。若再用 git checkout -- \u003cfile\u003e 可以把文件恢复与版本库中当前版本一致。 版本回退 用 git log 命令查看提交日志（从最近到最远），加上 --pretty=oneline 参数，仅显示版本号（commit id）、commit message 和 HEAD 指针的指向当前版本。 使用 git reset 命令可退回以前版本，原理是改变 HEAD 指针的指向，其间提交的版本不可在 git log 命令下显示。 使用 git reset --hard HEAD^ 命令退回到上一个版本 或用 git reset --hard HEAD~n 往前退回 n 版本 或用 git reset -- hard \u003c前五位 commit id\u003e 回退到一特定版本 Git 提供了一个命令 git reflog 来记录每一次提交，包括 HEAD 指针之后的版本，用 git reset -- hard \u003c前五位 commit id\u003e 依旧可以回退到一特定版本。 删除文件 从版本库中删除文件可用命令 git rm \u003cfile\u003e ，参数 —cached 保存工作区的文件， -f 删除工作区和版本库的文件。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:5","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"远程仓库 远程仓库以 GitHub 为例。 建立本地 SSH Key 密钥对 本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，需要创建 SSH Key。 在用户主目录下，看看有没有 .ssh/ 目录，若有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 文件，若有，可直接跳过这一步。若没有，打开 Shell 创建 SSH Key，ssh-keygen -t rsa -C \"youremail@example.com\" ，为了方便无需设置密码。 一路回车后，在用户主目录里找到 .ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，即 SSH Key 的密钥对， id_rsa 是私钥，不能泄露出去， id_rsa.pub 是公钥。 把公钥给 GitHub 登陆 GitHub，打开 Account settings ，进入 SSH Keys 页面，点 Add SSH Key ，填上任意 Title，在 Key 文本框里粘贴 id_rsa.pub 文件的内容。 关联远程仓库 在 GitHub 新建一个空仓库，根据 GitHub 提示，在本地仓库下运行 git remote add origin git@github.com:\u003cGitHub Username\u003e/\u003crepository name\u003e.git 命令。 origin 就是远程仓库的名字，是 Git 的默认叫法。 下一步把本地库的所有内容推送到远程库上，运行 git push -u origin master 可以把当前分支 master 推送到 origin 。参数 -u 会把本地的 master 分支与远程的 master 分支关联，以后推送或拉取时就可以简化为 git push 和 git pull 。 从远程库克隆 运行 git clone git@github.com:\u003cGitHub Username\u003e/\u003crepository name\u003e.git 可以将远程仓库克隆到本地，会在当前目录下生成一个 repository name 文件。 Git 支持多种协议，包括 https ，但通过 ssh 支持的原生 git 协议速度最快。 SSH 警告 第一次使用 Git 的 clone 或者 push 命令连接 GitHub 时，会得到一个警告： The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established. RSA key fingerprint is xx.xx.xx.xx.xx. Are you sure you want to continue connecting (yes/no)? 这是因为 Git 使用 SSH 连接，而 SSH 连接在第一次验证 GitHub 服务器的 Key 时，需要你确认 GitHub 的 Key 的指纹信息是否真的来自 GitHub 的服务器，输入yes 回车即可。此时 ~/.ssh/konwn_host 文件里会多一个 github.com host. 忽略特殊文件 在 Git 工作区的根目录下创建一个特殊的 .gitignore 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。GitHub 已经为我们准备了各种配置文件：github/gitignore: A collection of useful .gitignore templates ，再把 .gitignore 也提交到 Git。 忽略文件的原则是： 忽略操作系统自动生成的文件，比如缩略图等； 忽略编译生成的中间文件、可执行文件等，也就是若一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Python 编译产生的 .pyc 文件、 .pyo 文件和 dist 目录； 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。 若确实想添加被忽略的文件，可以用 -f 强制添加到 Git，git add -f test.pyc 。 git check-ignore 命令检查被忽略的文件来自哪条规则 $ git check-ignore -v test.pyc .gitignore:2:__pycache__/ test.pyc .gitignore 的第 2 行规则忽略了该文件。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:6","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"分支管理 分支管理可以让开发者从容地写一个新功能，而不用担心代码无处提交。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:2:0","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"创建与合并分支 截止到目前，在 Git 里只有一个分支，叫主分支，即master分支。master 指向提交，HEAD 指向当前分支，每次提交，master 分支都会向前移动一步。 创建分支 运行 git checkout -b dev 创建新的分支，并切换到 dev 分支。 git checkout 加上 -b参数表示创建并切换，相当于创建新的分支 git branch dev 加上切换分支 git checkout dev . 创建新的分支时，例如 dev ，Git 会新建了一个指针叫 dev ，指向 master 相同的提交，再把 HEAD 指向 dev ，就表示当前分支在 dev 上。现在开始，对工作区的修改和提交就是针对 dev 分支，比如新提交一次后，dev 指针往前移动一步，而 master 指针不变。 master ↓ ○---○---○---○---○ ↑ dev ← HEAD 合并分支 假如在 dev 上的工作完成了，就可以把 dev 合并到 master 上，最简单的方法，就是直接把 master 指向 dev 的当前提交。 命令是运行 git checkout master 把 HEAD 指针指向 master 分支，然后运行 git merge dev 把 dev 分支的工作成果合并到 master 分支上。终端返回 Fast-forward 信息表示这次合并是「快进模式」，即直接把 master 指向 dev 的当前提交。 master ← HEAD ↓ ○---○---○---○---○ ↑ dev 但不是每次合并都能 Fast-forward ，后面会讲其他方式的合并。 合并完分支后，可以删除 dev 分支， git branch -d dev ，即删除dev 指针。删除后，查看 branch ， git branch ，只剩下 master 分支。 解决分支合并冲突 若在新建的分支 dev 修改了 README.md 并提交，又切换回 master 分支，修改了 README.md 并提交，则此时的 master 和 dev 处在不同的提交时间轴上。 master ← HEAD ↓ ○---○---○---○---○ \\---○ ↑ dev 此时运行 git merge dev ，会报错（ git status 也会提示冲突的文件） Auto-merging README.md CONFLICT (content): Merge conflict in README.md Automatic merge failed; fix conflicts and then commit the result. README.md 文件存在冲突，必须手动解决冲突后再提交。查看 README.md \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD Creating a new branch is quick \u0026 simple. ======= Creating a new branch is quick AND simple. \u003e\u003e\u003e\u003e\u003e\u003e\u003e dev Git 用 \u003c\u003c\u003c\u003c\u003c\u003c\u003c ， ======= ， \u003e\u003e\u003e\u003e\u003e\u003e\u003e 标记出不同分支的内容，假如修改 README.md 为 Creating a new branch is quick and simple. 再提交 git add README.md git commit -m \"conflict fixed\" 现在 master 分支和 dev 成了下图所示 master ← HEAD ↓ ○---○---○---○---○---○ \\--○--/ ↑ dev git log --graph --pretty=oneline --abbrev-commit 可以看到分支的合并情况。 —graph 参数可查看分支合并图，--abbrev-commit 参数可缩写 commit 信息。 * b75b466 (HEAD -\u003e master) conflict fixed |\\ | * 3d0eb40 (feature1) using And * | 42c89d0 using \u0026 |/ * 01c11b4 branch test ... 删除 dev 分支。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:2:1","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"分支管理策略 通常，合并分支时，若可能，Git 会用 Fast forward 模式，但这种模式下，删除分支后会丢掉分支信息。 若要强制禁用 Fast forward 模式，Git 就会在 merge 时生成一个新的 commit，这样，从分支历史上就可以看出分支信息。可以在 merge 时添加 --no-ff 参数在分支历史上呈现合并分支信息，--no-ff 参数表示禁用 Fast forward 。 仍然创建并切换 dev 分支，修改 README.md 文件，并提交一个新的 commit，再切换回 master 。此时运行 git merge --no-ff -m \"merge with no-ff\" dev ，终端返回 Merge made by the 'recursive' strategy. README.md | 1 + 1 file changed, 1 insertion(+) 合并后，用 git log 查看分支历史 $ git log --graph --pretty=oneline --abbrev-commit * 3481f74 (HEAD -\u003e master) merge with no-ff |\\ | * 3a86b6c (dev) add merge |/ * b75b466 conflict fixed ... 在实际开发中，应该按照几个基本原则进行分支管理： master 分支应该非常稳定，仅用来发布新版本，平时不能在上面干活； 干活都在 dev 分支上，版本发布时，再把 dev 分支合并到 master 上，在 master 分支发布版本； 团队合作时，每个人都在 dev 分支上干活，每个人都有自己的分支，时不时地往 dev 分支上合并。 Bug 分支 每个 bug 都可以通过一个新的临时分支来修复，修复后合并分支，然后将临时分支删除。 Git 提供了一个 stash 功能，可以把当前工作现场「储藏」起来，等以后恢复现场后继续工作。 在 dev 分支修改 README.md 后， $ git stash Saved working directory and index state WIP on dev: 3a86b6c test hard merge 现在用 git status 查看工作区，是干净的，因此可以放心地创建分支来修复 bug。 若需要在 master 分支上修复 bug，则从 master 创建临时分支。 $ git checkout master $ git checkout -b issue-101 修改 bug，这里修改了 README.md ，然后提交 $ git commit -am \"fix bug 101\" [issue-101 4d97816] fix bug 101 1 file changed, 1 insertion(+), 1 deletion(-) 修复完成后，切换到 master 分支，并完成合并，最后删除 issue-101 分支 $ git checkout master $ git merge --no-ff -m \"merged bug fix 101\" issue-101 Merge made by the 'recursive' strategy. readme.txt | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) $ git branch -d issue-101 重新回到 dev 分支干活 $ git checkout dev $ git status On branch dev nothing to commit, working tree clean 工作区是干净的，用 git stash list 命令工作现场 $ git stash list stash@{0}: WIP on dev: 3a86b6c add merge 恢复工作现场有两个办法 用 git stash apply 恢复，但是恢复后，stash 内容并不删除，需要用 git stash drop 来删除 用 git stash pop ，恢复的同时把 stash 内容也删了 $ git stash pop On branch dev Changes not staged for commit: (use \"git add \u003cfile\u003e...\" to update what will be committed) (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory) modified: README.md no changes added to commit (use \"git add\" and/or \"git commit -a\") Dropped refs/stash@{0} (e8f4328c3334144570f3c6d38641fc971aa460a2) 此外，还可以多次 stash，恢复的时候，先用 git stash list 查看，然后恢复指定的 stash，用命令 git stash apply stash@{0} 。 Feature 分支 软件开发中，总有无穷无尽的新的功能要不断添加进来。每添加一个新功能，最好在新建分支 feature 上面开发（以免污染 dev ），完成后合并删除 feature 分支。 若新功能突然不需要了，git branch -d feature-name 命令会报错 error: The branch 'feature-name' is not fully merged. If you are sure you want to delete it, run 'git branch -D feature-name'. 可以运行 git branch -D feature-name 强行删除。 Git 工作流程 Git 工作流程 - 阮一峰的网络日志 Git 分支管理策略 - 阮一峰的网络日志 ","date":"2019-04-06","objectID":"/2019-03-26-git/:2:2","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"多人协作开发 要查看远程库的信息，用 git remote ，或者用 git remote -v 显示更详细的信息 $ git remote -v origin git@github.com:michaelliao/learngit.git (fetch) origin git@github.com:michaelliao/learngit.git (push) 上面显示了可以抓取和推送的 origin 的地址，若没有推送权限，就看不到 push 的地址。 推送分支 推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样 Git 就会把该分支推送到远程库对应的远程分支上，例如 git push origin dev 。 有些本地分支不需要往远程推送，有些本地分支需要往远程推送 master 分支是主分支，要时刻与远程同步； dev 分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步； bug 分支只用于在本地修复 bug，就没必要推到远程了； feature 分支是否推到远程，取决于是否和小伙伴合作在上面开发。 抓取分支 多人协作时，大家都会往 master 和 dev 分支上推送各自的修改。 假设有小伙伴要在 dev 分支上开发，就必须创建远程 origin 的 dev 分支到本地，于是他用命令 git checkout -b dev origin/dev 创建本地 dev 分支。接着他修改了 README.md ，并提交到本地仓库的 dev 分支，然后 git push origin dev 推送到远程仓库。 碰巧你也修改了 README.md ，并提交到本地仓库的 dev 分支。 $ git push origin dev To github.com:\u003cgithub username\u003e/\u003crepository\u003e.git ! [rejected] dev -\u003e dev (non-fast-forward) error: failed to push some refs to 'git@github.com:\u003cgithub username\u003e/\u003crepository\u003e.git' hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. 因为有小伙伴的最新提交和你试图推送的提交有冲突，所以推送失败。解决办法 Git 已经提示我们，先用 git pull 把最新的提交从 origin/dev 抓下来，然后在本地合并，解决冲突，再推送。 $ git pull There is no tracking information for the current branch. Please specify which branch you want to merge with. See git-pull(1) for details. git pull \u003cremote\u003e \u003cbranch\u003e If you wish to set tracking information for this branch you can do so with: git branch --set-upstream-to=origin/\u003cbranch\u003e dev git pull 也失败了，原因是没有指定本地 dev 分支与远程 origin/dev 分支的链接，根据提示设置 dev 和 origin/dev 的链接，再 pull $ git branch --set-upstream-to=origin/dev dev Branch 'dev' set up to track remote branch 'dev' from 'origin'. $ git pull Auto-merging README.md CONFLICT (add/add): Merge conflict in README.md Automatic merge failed; fix conflicts and then commit the result. git pull 成功，但是合并有冲突，需要手动解决，见前文「解决分支合并冲突」，再 git push origin dev 。 Rebase 多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后 push 的小伙伴也不得不先 pull，在本地合并，然后才能 push 成功。 每次合并再 push 后，分支变成了这样 $ git log --graph --pretty=oneline --abbrev-commit * d1be385 (HEAD -\u003e master, origin/master) init hello * e5e69f1 Merge branch 'dev' |\\ | * 57c53ab (origin/dev, dev) fix env conflict | |\\ | | * 7a5e5dd add env | * | 7bd91f1 add new env | |/ * | 12a631b merged bug fix 101 |\\ \\ | * | 4c805e2 fix bug 101 |/ / * | e1e9c68 merge with no-ff |\\ \\ | |/ | * f52c633 add merge |/ * cf810e4 conflict fixed ... Git 有一种称为 rebase(变基) 的操作，能把分叉的提交变成直线，使查看历史提交的变化更容易。 在和远程分支同步后，对 hello.py 做了两次提交。用 git log 命令查看 $ git log --graph --pretty=oneline --abbrev-commit * 582d922 (HEAD -\u003e master) add author * 8875536 add comment * d1be385 (origin/master) init hello * e5e69f1 Merge branch 'dev' |\\ | * 57c53ab (origin/dev, dev) fix env conflict | |\\ | | * 7a5e5dd add env | * | 7bd91f1 add new env ... 注意到 Git 用 (HEAD -\u003e master) 和 (origin/master) 标识出当前分支的 HEAD 和远程 origin 的位置分别是 582d922 add author 和 d1be385 init hello ，本地分支比远程分支快两个提交。 现在尝试推送本地分支 $ git push origin master To github.com:\u003cgithub username\u003e/\u003crepository\u003e.git ! [rejected] master -\u003e master (fetch first) error: failed to push some refs to 'git@github.com:\u003cgithub username\u003e/\u003crepository\u003e.git' hint: Updates were rejected because the remote contains work that you do hint: not have locally. This is usually caused by another repository pushing hint: to the same ref. You may want to first integrate the remote changes hint: (e.g., 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. 说明有小伙伴抢先推送了远程分支，按照提示先 pull $ git pull remote: Counting objects: 3, done. remote: Compressing objects: 100% (1/1), done. remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0 Unpacking objects: 100% (3/3), done. From github.com:\u003cgithub username\u003e/\u003crepository\u003e d1be385..f005ed4 master -\u003e origin/master * [new tag] v1.0 -\u003e v1.0 Auto-merging hello.py Merge made by the 'recursive' strategy. hello.py | 1 + 1 file changed, ","date":"2019-04-06","objectID":"/2019-03-26-git/:2:3","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"Git 远程操作 git remote 不带选项的时候， git remote 命令列出所有远程主机 $ git remote origin 使用-v选项，可以参看远程主机的网址。 克隆版本库的时候，所使用的远程主机自动被 Git 命名为 origin 。若想用其他的主机名，需要用 git clone 命令的 -o 选项指定 $ git clone -o jQuery https://github.com/jquery/jquery.git $ git remote jQuery 查看该主机的详细信息 $ git remote show \u003c主机名\u003e 添加远程主机 $ git remote add \u003c主机名\u003e \u003c网址/SSH\u003e 删除远程主机 $ git remote rm \u003c主机名\u003e 远程主机改名 $ git remote rename \u003c原主机名\u003e \u003c新主机名\u003e git fetch 默认情况下， git fetch 取回所有分支（branch）的更新。若只想取回特定分支的更新，可以指定分支名。 $ git fetch \u003c远程主机名\u003e \u003c分支名\u003e git branch 命令的 -r 选项，可以用来查看远程分支， -a 选项查看所有分支。 所取回的更新，在本地主机上要用「远程主机名/分支名」的形式读取。取回远程主机的更新以后，可以在它的基础上，使用 git checkout 命令创建一个新的分支。 $ git checkout -b newBrach origin/master 此外，也可以使用 git merge 命令或者 git rebase 命令，在本地分支上合并远程分支。 $ git merge origin/master # 或者 $ git rebase origin/master git pull git pull 命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。 $ git pull \u003c远程主机名\u003e \u003c远程分支名\u003e:\u003c本地分支名\u003e # 同于 $ git fetch \u003c远程主机名\u003e $ git merge \u003c远程主机名\u003e/\u003c远程分支名\u003e 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。 如果合并需要采用 rebase 模式，可以使用 --rebase 选项。 $ git pull --rebase \u003c远程主机名\u003e \u003c远程分支名\u003e:\u003c本地分支名\u003e 如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致 git pull 不知不觉删除了本地分支。加上参数 -p 就会在本地删除远程已经删除的分支。 $ git pull -p # 等同于 $ git fetch --prune origin $ git fetch -p git push git push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相仿。 $ git push \u003c远程主机名\u003e \u003c本地分支名\u003e:\u003c远程分支名\u003e git push \u003c远程主机名\u003e \u003c本地分支名\u003e ，将 \u003c本地分支名\u003e 本地分支推送到 \u003c远程主机名\u003e 主机的 \u003c本地分支名\u003e 分支。如果后者不存在，则会被新建。 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。 $ git push origin :master # 等同于 $ git push origin --delete master 不带任何参数的 git push ，默认只推送当前分支，这叫做 simple 方式。此外，还有一种 matching 方式，会推送所有有对应的远程分支的本地分支。如果要修改这个设置，可以采用git config命令。 $ git config --global push.default matching 还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用 --all 选项。 $ git push --all origin 上面命令表示，将所有本地分支都推送到 origin 主机。 如果远程主机的版本比本地版本更新，推送时 Git 会报错，要求先在本地做 git pull 合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用 --force 选项。 $ git push --force origin 上面命令使用 --force 选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用 --force 选项。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:2:4","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"标签管理 发布一个版本时，通常先在版本库中打一个标签（tag）（指向某个 commit 的指针），这样就唯一确定了打标签时刻的版本，即标签是版本库的一个快照。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:3:0","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"创建标签 切换到需要打标签的分支上，再打标签 $ git tag v1.0 默认标签是打在最新提交的 commit 上，但有时也会忘记，方法是找到历史提交的 commit id，然后打上标签 $ git tag v0.9 f1e08 再用命令 git tag 查看标签，标签按字母排序 $ git tag v0.9 v1.0 可以用 git show \u003ctagname\u003e 查看标签信息 $ git show v0.9 commit f1e08437318d1e871680120c95bdcecb05a56b68 (tag: v0.9) Author: \u003cuser.name\u003e \u003c\u003cuser.emali\u003e\u003e Date: Sat Apr 6 16:14:10 2019 +0800 add merge diff --git a/README.md b/README.md ... 还可以创建带有说明的标签，用 -a 指定标签名， -m 指定说明文字 git tag -a v0.1 -m \"version 0.1 released\" 45f6a 标签总是和某个 commit 挂钩。若这个 commit 既出现在 master 分支，又出现在 dev 分支，那么在这两个分支上都会看到这个标签。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:3:1","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"操作标签 若标签打错了，也可以删除 $ git tag -d v0.1 Deleted tag 'v0.1' (was 45f6ab3) 若要推送某个标签到远程，使用命令 git push origin \u003ctagname\u003e $ git push origin v1.0 Total 0 (delta 0), reused 0 (delta 0) To github.com:\u003cgithub username\u003e/\u003crepository\u003e.git * [new tag] v1.0 -\u003e v1.0 也可以一次性推送全部尚未推送到远程的本地标签， git push origin --tags 若标签已经推送到远程，要删除远程标签就要删除， git tag -d v0.9 ，再从远程删除， git push origin :refs/tags/v0.9 。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:3:2","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"其他 Git 技巧 ","date":"2019-04-06","objectID":"/2019-03-26-git/:4:0","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"配置别名 若用 st 表示 status ，可以为 status 配置别名， git config --global alias.st status 。 git config --global alias.unstage 'reset HEAD' ，自定义撤销暂存区的修改操作。 更有甚者，git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset' --abbrev-commit\" 。 每个仓库的 Git 配置文件都放在 .git/config 文件中，当前用户的 Git 配置文件放在用户主目录下 .gitconfig 文件中，删除配置别名可以直接删除在 Git 配置文件对应的行 [alias] st = status unstage = reset HEAD 此外 # 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--global] ","date":"2019-04-06","objectID":"/2019-03-26-git/:4:1","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"搭建 Git 服务器 远程仓库实际上和本地仓库没啥不同，只是一直保持开机并供小伙伴交换修改。 搭建 Git 服务器需要准备一台运行 Linux 的机器，强烈推荐用 Ubuntu 或 Debian，这样通过几条简单的 apt 命令就可以完成安装。 安装 git ： sudo apt-get install git 创建一个 git 用户，用来运行 git 服务： sudo adduser git 创建证书登录：收集所有需要登录的用户的公钥，即 id_rsa.pub 文件，把所有公钥导入到 /home/git/.ssh/authorized_keys 文件里，一行一个 初始化 Git 仓库：先选定一个目录作为 Git 仓库（服务器上的 Git 仓 库通常都以 .git 结尾），输入 sudo git init --bare sample.git ，Git 会创建一个裸仓库，没有工作区 把 owner 改为 git ： sudo chown -R git:git sample.git 禁用 shell 登录：出于安全考虑，第二步创建的 git 用户不允许登录 shell，可以通过编辑 /etc/passwd 文件完成，找到类似下面的一行： git❌1001:1001:,,,:/home/git:/bin/bash 改为 git❌1001:1001:,,,:/home/git:/usr/bin/git-shell 这样，git 用户可以正常通过 ssh 使用 git，但无法登录 shell，因为 git 用户指定的 git-shell 每次一登录就自动退出。 克隆远程仓库：现在可以通过 git clone 命令克隆远程仓库， git clone git@server:.../sample.git 另： 要管理公钥，用 Gitosis 要控制权限，用 Gitolite ","date":"2019-04-06","objectID":"/2019-03-26-git/:4:2","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"Ref Git Git 教程 - 廖雪峰的官方网站 Git 远程操作详解 - 阮一峰的网络日志 Git 常用命令 - Gityuan 博客 | 袁辉辉的 Android 博客 ","date":"2019-04-06","objectID":"/2019-03-26-git/:5:0","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["整理"],"content":"ChangeLog 2019.04.07 贴上阮一峰关于 Git 博客链接，供下次学习 2019.04.06 学习廖雪峰 Git 教程的笔记 ","date":"2019-04-06","objectID":"/2019-03-26-git/:6:0","tags":["Git"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["实操"],"content":"阿里云快捷登录 在阿里云的控制台中复制服务器的公网 IP，我的是 47.102.121.213 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:1:0","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"免密登录 在本地执行命令（按提示输入密码），向服务器发送自己的公钥文件 ssh-copy-id -i 公钥文件 root@服务器ip 此时阿里云上的 ~/.ssh/authorized_keys 与本地 ~/.ssh/id_rsa.pub 一致，即可免密登录阿里云 ssh root@服务器ip 若重新格式化磁盘，则需要在目录 ~/.ssh 下的 known_hosts 中的 47.102.121.213 ，才能登录阿里云。 此外，也可将自己的私钥加入 ssh-agent，ssh 代理，它会帮你自动输入密码短语 passphrase # 加入代理，输入你的密码短语 ssh-add ~/.ssh/id_rsa # 查看ssh代理的内容 ssh-add -l ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:1:1","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"配置服务器 Host 在本地 ~/.ssh 目录下新建 config ，输入以下内容 Host aliyun HostName 47.102.121.213 User root IdentitiesOnly yes 保存退出后即可用 ssh aliyun 登录。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:1:2","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"修改 hostname 登录服务器后会发现，服务器实例名称是一串冗长的字母和数字，可在阿里云服务器上修改 etc/hostname ，例如 aliyun ，并 reboot 使之生效。此时终端命令行的开头变成 root@aliyun: ，更美观。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:1:3","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"安装相关软件 服务器系统是 Ubuntu 16.04.6 LTS 部署 Django 需要用到 Git、Pytohn3、pip3、virtualenv、Nginx ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:2:0","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"安装 Git apt-get update apt-get upgrade apt-get install git 生成公钥、密钥，并且在 github 上配置 ssh-keygen -t rsa -C \"your email\" cat ~/.ssh/id_rsa.pub 将输出的公钥添加到 GitHub，settings -\u003e SSH and GPG keys -\u003e New SSH key ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:2:1","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"安装 Pytohn3、pip3、virtualenv apt-get install python3 python3-pip pip3 install virtualenv 安装 virtualenv 时，报错 Traceback (most recent call last): File \"/usr/bin/pip3\", line 11, in \u003cmodule\u003e sys.exit(main()) File \"/usr/lib/python3/dist-packages/pip/__init__.py\", line 215, in main locale.setlocale(locale.LC_ALL, '') File \"/usr/lib/python3.5/locale.py\", line 594, in setlocale return _setlocale(category, locale) locale.Error: unsupported locale setting 终端执行 export LC_ALL=C 可暂时解决该问题。 可在 .bashrc 中添加 # locale export LC_ALL=C 并运行 source .bashrc 重新安装 virtualenv pip3 install virtualenv 切入到目录 /root/sites/stanine.top/ ，输入一下命令建立虚拟环境，取名为 env virtualenv --python=python3 env 这里使用 –python=python3 来指定克隆 Python3 的环境，如果不特别指定的话 Virtualenv 默认克隆的是 Python2 的环境。 使用虚拟环境，在终端输入source env/bin/activate ，退出虚拟环境，输入deactivate 。如果项目开发完成后想删除虚拟环境，直接删除虚拟环境目录即可。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:2:2","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"安装 Nginx apt-get install nginx ubantu 安装完 Nginx 后，文件结构大致为： 所有的配置文件都在 /etc/nginx下； 启动程序文件在 /usr/sbin/nginx下； 日志文件在 /var/log/nginx/下，分别是access.log和error.log； 并且在 /etc/init.d下创建了启动脚本nginx。 在阿里云 -\u003e ECS -\u003e 安全组 -\u003e 配置规则，添加 80 端口以通过 HTTP 服务访问网站，通过 netstat -ant |grep 80 可查看 80 端口的监听状况。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:2:3","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"启动 Ngnix 服务 Nginx 是用来处理静态文件请求的，比如当我们访问一个博客文章详情页面时，服务器会接收到下面两种请求： 显示文章的详情信息，这些信息通常保存在数据库里，因此需要调用数据库获取数据 图片、css、js 等存在服务器某个文件夹下的静态文件 对于前一种请求，博客文章的数据需要借助 Django 从数据库中获取，Nginx 处理不了，它就会把这个请求转发给 Django，让 Django 去处理。而对于后一种静态文件的请求，只需要去这些静态文件所在的文件夹获取，Nginx 就会代为处理，不再麻烦 Django。 用 Django 去获取静态文件是很耗时的，但 Nginx 可以很高效地处理，这就是我们要使用 Nginx 的原因（当然其功能远不止这些）。 Nginx 启动、停止和重启 /etc/init.d/nginx start # 启动 /etc/init.d/nginx stop # 停止 /etc/init.d/nginx restart # 重启 或 service nginx start service nginx stop service nginx restart 启动后，在浏览器输入 IP 地址 47.102.121.213，看到如下页面说明 Nginx 启动成功了。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:2:4","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"本地建立 Django 项目 先在本地建立 Django 并测试，在同步到阿里云。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:3:0","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"建立 Django 项目 建立 Django 项目，django-admin startproject stanine ，目录结构为 stanine\\ manage.py # Django 为我们生成的管理这个项目的 Python 脚本文件 stanine\\ __init__.py settings.py urls.py wsgi.py 运行 python manage.py runserver 命令就可以在本机上开启一个 Web 服务器 修改 settings.py 文件 # 把英文改为中文 LANGUAGE_CODE = 'zh-hans' # 把国际时区改为中国时区 TIME_ZONE = 'Asia/Shanghai' 添加 Django APP，python manage.py startapp stanineapi ，目录结构为 stanineapi\\ __init__.py admin.py apps.py migrations\\ __init__.py models.py tests.py views.py 修改 settings.py 文件，在 INSTALLED_APPS 数组添加 stanineapi ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:3:1","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"创建 Django 项目数据库模型 编写博客模型代码，修改 stanineapi/models.py # coding: utf-8 from django.db import models # Create your models here. class Category(models.Model): # Django 要求模型必须继承 models.Model 类 zhname = models.CharField(max_length=100) enname = models.CharField(max_length=100) class Tag(models.Model): zhname = models.CharField(max_length=100) enname = models.CharField(max_length=100) class Sagebio(models.Model): \"\"\" CharField 指定了分类名 name 的数据类型，CharField 是字符型， CharField 的 max_length 参数指定其最大长度，超过这个长度的分类名就不能被存入数据库。 指定 CharField 的 blank=True 参数值后就可以允许空值 \"\"\" zhname = models.CharField(max_length=100, blank=True) enname = models.CharField(max_length=100, blank=True) # 文章正文，我们使用了 TextField。 # 存储比较短的字符串可以使用 CharField，但对于文章的正文来说可能会是一大段文本，因此使用 TextField 来存储大段文本。 bio = models.CharField() # 这两个列分别表示文章的创建时间和最后一次修改时间，存储时间的字段用 DateTimeField 类型。 created_time = models.DateTimeField() modified_time = models.DateTimeField() # sage 只属于一个分类，使用的是 ForeignKey，即一对多的关联关系 # 可以有多个或没有标签，使用的是 ForeignKey，即多对多的关联关系 category = models.ForeignKey(Category) tags = models.ManyToManyField(Tag, blank=True) 运行 python manage.py createsuperuser 命令并根据提示创建用户。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:3:2","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"迁移数据库 选择数据库版本，这里选择自带的 sqlite3 切换到 manage.py 文件所在的目录下，分别运行 python manage.py makemigrations 和 python manage.py migrate 命令 查看数据库表创建语句，python manage.py sqlmigrate stanineapi 0001 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:3:3","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"用 Django 的方式操作数据库 存数据 在 manage.py 所在目录下运行 python manage.py shell 命令 from stanineapi.models import Sagebio, Category, Tag c = Category(enname='action \u0026 philosophy') c.zhname = '行动与哲学' c.save() t = Tag(enname='like', zhname='喜欢') t.save() 取数据 objects 是我们的模型管理器，它为我们提供一系列从数据库中取数据方法。 all 方法，表示把对应的数据全部取出来，是一个类似于列表的数据结构（QuerySet）； get 返回一条记录数据，如有多条记录或者没有记录，get 方法均会抛出相应异常。 from stanineapi.models import Sagebio, Category, Tag c = Category.objects.get(zhname='行动与哲学') c # \u003cCategory: action \u0026 philosophy\u003e Category.objects.all() # \u003cQuerySet [\u003cCategory: action \u0026 philosophy\u003e]\u003e 删数据 p = Tag.objects.get(enname='test') p # \u003cTag: test\u003e p.delete() Tag.objects.all() # \u003cQuerySet []\u003e 重置 migration 若不需要原有的数据库数据 删除数据库所有表 删除项目的 migration 模块中的所有文件，除了 init.py 执行脚本 python manage.py makemigrations 和 python manage.py migrate 若不想删除现有的数据库，只想重新建立 migration 文件 保证目前的 migration 文件与数据库同步，通过执行 python manage.py makemigrations ，若提示 No changes detected ，则可以继续 通过执行 python manage.py showmigrations 查看所有 app 及对应的已生效的 migration 文件 通过执行 python manage.py migrate --fake stanineapi zero 删除 stanineapi 这个 app 下的 migrations 模块中除了 init.py 的所有文件 (程序会再次生成 0001_intial.py 之类的文件） 执行 python manage.py migrate --fake-initial ，在数据库中的 migrations 表中记录当前这个 app 执行到 0001_initial.py ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:3:4","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"视图 绑定 URL 与视图函数 首先 Django 需要知道当用户访问不同的网址时，应该如何处理这些不同的网址（即所说的路由）。Django 的做法是把不同的网址对应的处理函数写在一个 urls.py 文件里，当用户访问某个网址时，Django 就去会这个文件里找，如果找到这个网址，就会调用和它绑定在一起的处理函数（叫做视图函数）。 在 stanineapi 目录下新建 urls.py ，写入 from django.conf.urls import url from . import views urlpatterns = [ ''' 网址是用正则表达式写的，Django 会用这个正则表达式去匹配用户实际输入的网址，如果匹配成功，就会调用其后面的视图函数做相应的处理 比如说我们本地开发服务器的域名是 http://127.0.0.1:8000，那么当用户输入网址 http://127.0.0.1:8000 后， Django 首先会把协议 http、域名 127.0.0.1 和端口号 8000 去掉，此时只剩下一个空字符串，而 r'^$' 的模式正是匹配一个空字符串 于是二者匹配，Django 便会调用其对应的 views.index 函数 name，这个参数的值将作为处理函数 index 的别名 ''' url(r'^$', views.index, name='index'), ] 编写视图函数 Web 服务器的作用就是接收来自用户的 HTTP 请求，根据请求内容作出相应的处理，并把处理结果包装成 HTTP 响应返回给用户 修改 stanineapi/views.py from django.http import HttpResponse def index(request): ''' 首先接受了一个名为 request 的参数，这个 request 就是 Django 为我们封装好的 HTTP 请求， 它是类 HttpRequest 的一个实例。然后我们便直接返回了一个 HTTP 响应给用户， 这个 HTTP 响应也是 Django 帮我们封装好的，它是类 HttpResponse 的一个实例，只是我们给它传了一个自定义的字符串参数 ''' return HttpResponse(\"欢迎访问我的博客首页！\") 配置项目 URL 之前绑定了 URL 和视图函数 index，但是 Django 并不知道。Django 匹配 URL 模式是在 stanine\\ 目录的 urls.py 下的，所以我们要把 stanineapi 应用下的 urls.py 文件包含到 stanine\\urls.py 里去。 from django.contrib import admin from django.urls import path from django.conf.urls import url, include #+ urlpatterns = [ path('admin/', admin.site.urls), url(r'', include('stanineapi.urls')), #+ ] 运行 python manage.py runserver ，打开浏览器查看效果。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:3:5","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"部署 Django ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:4:0","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"部署前的项目配置 Django 项目中会有一些 CSS、JavaScript 等静态文件，为了能够方便地让 Nginx 处理这些静态文件的请求，可以把项目中的全部静态文件收集到一个统一的目录下。在 settings.py 添加如下配置 STATIC_URL = '/static/' # 加入下面的配置 STATIC_ROOT = os.path.join(BASE_DIR, 'static') STATIC_ROOT 指明了静态文件的收集目录，即项目根目录（BASE_DIR）下的 static 文件夹。 为了安全起见，在生产环境下需要关闭 DEBUG 选项以及设置允许访问的域名。打开 settings.py 文件，找到 DEBUG 和 ALLOWED_HOSTS 这两个选项，将它们设置成如下的值： DEBUG = False ALLOWED_HOSTS = ['127.0.0.1', 'localhost ', '47.102.121.213'] ALLOWED_HOSTS 是允许访问的域名列表，127.0.0.1 和 localhost 是本地访问的域名。 项目还会依赖一些第三方 Python 库，为了方便在服务器上一次性安装，将全部依赖写入一个叫 requirements.txt 的文本文件中。激活本地的虚拟环境，并进入项目的根目录，运行 pip3 freeze \u003e requirements.txt 命令。这时项目根目录下会生成了一个 requirements.txt 的文本文件，其内容记录了项目的全部依赖。 最后，将代码上传到 GitHub 等代码托管平台。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:4:1","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"拉取代码并安装项目依赖 进入到 ~/sites/stanine.top/ 目录下，激活虚拟环境，接着从代码仓库把项目代码拉取到 stanine.backend/ 路径下。 进入到项目根目录，即 requirements.txt 所在的目录，安装项目的全部依赖 pip install -r requirements.txt ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:4:2","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"收集静态文件 虚拟环境下继续运行 python manage.py collectstatic 命令收集静态文件到 static 目录下 python manage.py collectstatic ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:4:3","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"配置 Nginx 并启动服务 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:5:0","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"配置 Nginx 先在服务器的 /etc/nginx/sites-available/ 目录下新建一个配置文件，文件名一般就设置为域名，api.stanine.top。写上配置内容 server { charset utf-8; listen 80; server_name 47.102.121.213; # 服务的域名 location /static { # 所有 URL 带有 /static 的请求均由 Nginx 处理，alias 指明了静态文件的存放目录 alias /root/sites/stanine.top/stanine-backend/static; } location / { # 其它请求转发给 Django 处理 proxy_set_header Host $host; proxy_pass http://127.0.0.1:8000; # proxy_pass 后面使用了 unix 套接字，其作用是防止端口冲突 #proxy_pass http://unix:/tmp/api.stanine.top.socket; #index test.html index.htm index.nginx-debian.html; } } 在 /etc/nginx/sites-available/ 放置了配置文件，而被启用网站的目录在 /etc/nginx/sites-enabled/，需要建立软链 sudo ln -s /etc/nginx/sites-available/api.stanine.top /etc/nginx/sites-enabled/api.stanine.top PS：软链中目标路径必须是绝对路径 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:5:1","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"启动服务 在项目根目录下，运行 python manage.py runserver ，打开浏览器查看效果，47.102.121.213/admin 可登陆后台。 但是阿里云下线时，服务也会停止。一下命令可在下线情况下，仍然提供服务 nohub python manage.py runserver \u0026 nohup 命令可在注销后运行后台中的程序，\u0026 可以把一个程序放在后台运行。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:5:2","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"参考 使用 Nginx 和 Gunicorn 部署 Django 博客_追梦人物的博客 阿里云服务器从零开始部署博客 | 无趣的小帕 linux 的 nohup \u0026 和 daemon 总结 (转) - 平和的心 - 博客园 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:6:0","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["实操"],"content":"ChangLog 2019-04-06 初稿 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:7:0","tags":["服务器","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["整理"],"content":"速查表 字符 描述 \\ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’匹配字符“n”。’\\n’匹配一个换行符。序列‘\\’匹配“\\”而“(”则匹配“(“。 ^ 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配‘\\n’或‘\\r’之后的位置。 $ 匹配输入字符串的结束位置。如果设置了 RegExp 对象的 Multiline 属性，$ 也匹配‘\\n’或‘\\r’之前的位置。 * 匹配前面的子表达式零次或多次。例如，zo*能匹配 z 以及 zoo。*等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，’zo+’能匹配 zo 以及 zoo，但不能匹配 z。+ 等价于 {1,}。 ? 匹配前面的子表达式零次或一次。例如，do(es)?可以匹配 do 或 does 中的 do。? 等价于 {0,1}。 {n} n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’不能匹配 Bob 中的 o，但是能匹配 food 中的两个 o。 {n,} n 是一个非负整数。至少匹配 n 次。例如，’o{2,}’不能匹配“Bob”中的‘o’，但能匹配“foooood”中的所有 o。’o{1,}’等价于‘o+’。’o{0,}’则等价于‘o*’。 {n,m} m 和 n 均为非负整数，其中 n\u003c=m。最少匹配 n 次且最多匹配 m 次。例如，o{1,3}将匹配 fooooood 中的前三个 o。’o{0,1}’等价于‘o?’。请注意在逗号和两个数之间不能有空格。 ? 当该字符紧跟在任何一个其他限制符后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 oooo，’o+?’将匹配单个 o，而 o+ 将匹配所有 o。.匹配除\\n 之外的任何单个字符。要匹配包括\\n 在内的任何字符，请使用像 (.|\\n) 的模式。 (pattern) 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在 VBScript 中使用 SubMatches 集合，在 JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用‘(’或‘)’。 (?:pattern) 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用“或”字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比‘industry|industries’更简略的表达式。 (?=pattern) 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?=95|98|NT|2000)’能匹配“Windows 2000”中的“Windows” ，但不能匹配“Windows 3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 (?!pattern) 负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95|98|NT|2000)’能匹配“Windows 3.1”中的“Windows”，但不能匹配“Windows 2000”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 x|y 匹配 x 或 y。例如，’z|food’能匹配“z”或“food”。’(z|f)ood’则匹配“zood”或“food”。 [xyz] 字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’可以匹配“plain”中的‘a’。 [^xyz] 负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’可以匹配“plain”中的’p’、’l’、’i’、’n’。 [a-z] 字符范围。匹配指定范围内的任意字符。例如，’[a-z]’可以匹配‘a’到‘z’范围内的任意小写字母字符。 [^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’可以匹配任何不在‘a’到‘z’范围内的任意字符。 \\b 匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\\b’可以匹配”never”中的‘er’，但不能匹配“verb”中的‘er’。 \\B 匹配非单词边界。’er\\B’能匹配“verb”中的‘er’，但不能匹配“never”中的‘er’。 \\cx 匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的‘c’字符。 \\d 匹配一个数字字符。等价于 [0-9]。 \\D 匹配一个非数字字符。等价于 [^0-9]。 \\f 匹配一个换页符。等价于 \\x0c 和 \\cL。 \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ。 \\r 匹配一个回车符。等价于 \\x0d 和 \\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。 \\S 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。 \\t 匹配一个制表符。等价于 \\x09 和 \\cI。 \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。 \\w 匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。 \\W 匹配任何非单词字符。等价于‘[^A-Za-z0-9_]’。 \\xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\\x41′ 匹配“A”。’\\x041′ 则等价于‘\\x04’ \u0026 “1”。正则表达式中可以使用 ASCII 编码。 \\num 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\\1′ 匹配两个连续的相同字符。 \\n 标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。 \\nm 标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。 \\nml 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。 \\un 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)。 中文字符 [\\u4e00-\\u9fa5] 双字节字符 [^\\x00-\\xff] email \\w+([-+.]\\w+)@\\w+([-.]\\w+).\\w+([-.]\\w+)* ","date":"2019-03-10","objectID":"/2019-03-10-regular-expressions-quicklook/:1:0","tags":["正则表达式","速查"],"title":"正则表达式常用速查","uri":"/2019-03-10-regular-expressions-quicklook/"},{"categories":["整理"],"content":"JavaScript replace() 语法：str.replace(regexp|substr, newSubStr|function) 例子 function styleHyphenFormat(propertyName) { function upperToHyphenLower(match) { return \"-\" + match.toLowerCase(); } return propertyName.replace(/[A-Z]/g, upperToHyphenLower); } ","date":"2019-03-10","objectID":"/2019-03-10-regular-expressions-quicklook/:2:0","tags":["正则表达式","速查"],"title":"正则表达式常用速查","uri":"/2019-03-10-regular-expressions-quicklook/"},{"categories":["整理"],"content":"参考 正则表达式速查表 – Shadow Walker 正则表达式在线测试 | 菜鸟工具 String.prototype.replace() - JavaScript | MDN ","date":"2019-03-10","objectID":"/2019-03-10-regular-expressions-quicklook/:3:0","tags":["正则表达式","速查"],"title":"正则表达式常用速查","uri":"/2019-03-10-regular-expressions-quicklook/"},{"categories":["整理"],"content":"ChangeLog 2019-05-12 添加 replace() 2019-04-20 添加中文字符 2019-03-10 初稿 ","date":"2019-03-10","objectID":"/2019-03-10-regular-expressions-quicklook/:4:0","tags":["正则表达式","速查"],"title":"正则表达式常用速查","uri":"/2019-03-10-regular-expressions-quicklook/"},{"categories":["info"],"content":"Google ngram Viewer 在 Google Books Ngram Viewer 里输入 ability, capacity, capability, genius, talent, competence, faculty, gift, aptitude 六个表示人的“能力，才能”之意的英文单词，得到如下结果 其中 genius 呈下降趋势；ability，capacity，competence，capability 呈上升趋势；gift，faculty 由于一词多义，变化不明显。由此可以提出一个猜测：人们越来越关注后天习得的能力而不是天赋。 ","date":"2018-05-29","objectID":"/_drafts/2018-05-29-infomation-analysis-toolbox/:1:0","tags":["工具，清单"],"title":"「实践策略」信息分析工具箱","uri":"/_drafts/2018-05-29-infomation-analysis-toolbox/"},{"categories":["info"],"content":"ChangLog 2018-05-29 初稿 ","date":"2018-05-29","objectID":"/_drafts/2018-05-29-infomation-analysis-toolbox/:2:0","tags":["工具，清单"],"title":"「实践策略」信息分析工具箱","uri":"/_drafts/2018-05-29-infomation-analysis-toolbox/"},{"categories":["info"],"content":"Trello Google Drive：自动生成 Google slides Introducing Trello for Google Slides 一个 board 生成一个投影片 二级目录是 list card 是一张投影片，标题为 card 标题，左边文字是 description，右边图片是封面图片 快捷键 Keyboard Shortcuts | Trello ","date":"2018-05-29","objectID":"/_drafts/2018-05-29-smart-gadget/:1:0","tags":["工具，清单"],"title":"「实践策略」效率工具箱","uri":"/_drafts/2018-05-29-smart-gadget/"},{"categories":["info"],"content":"ChangeLog 2018-05-29 初稿 ","date":"2018-05-29","objectID":"/_drafts/2018-05-29-smart-gadget/:2:0","tags":["工具，清单"],"title":"「实践策略」效率工具箱","uri":"/_drafts/2018-05-29-smart-gadget/"},{"categories":["阅读"],"content":" 《翻译乃大道》读书笔记 中文常态：措辞简洁，语法对称，句式灵活，声调铿锵。 中文病态：引入大量的英文表达，繁琐生硬。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:0:0","tags":["写作","速查"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["阅读"],"content":"中文最常见的常态和病态 项目 坏例子 好例子 避免英式抽象名词作主语 他的收入的减少改变了他的生活方式 他收入减少，于是改变生活方式 中文主语可以是一件事情 国语的推行，要靠大家努力 推行国语，要靠大家努力 避免文字义肢，动词变为万能动词 + 抽象名词，对「作出」、「进行」滥用 听众对访问教授作出了十分热烈的反应 听众对访问教授反应十分热烈 避免学术术语滥用，「性、型、度」 这本书可读性颇高。他是热情型的人。前瞻性等等 这本书引人入胜。他是个热情的人。 避免……之一 李广乃汉朝名将之一 李广乃汉朝名将。 避免「与、及、和、而」过多使用 台北显然比曼谷起步更早及迈步更快 台北显然比曼谷起步更早、迈步更快。 避免介词乱用，「关于、有关、中间、由于、使得」 由于他家境贫寒，使得他只好休学。 他家境贫寒，只好休学。 避免动词降副词 他苦心孤诣地想出一套好办法来。 他苦心孤诣，想出一套好办法。 避免过多使用「的」 参差的斑驳的黑影。 参差而斑驳的黑影。 中文可以后置形容词，避免前修饰太长。 我看见一个长得像你兄弟的男人 我看见一个男人，长得像你兄弟。 避免被动，中文多主动语气 他这意见不被大家接受。他不被获准入学。糖都被吃完了。 他这意见大家都不接受。他未获准入学。糖都吃完了。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:1:0","tags":["写作","速查"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["阅读"],"content":"词性被带偏 下面按照词性，分别介绍中文中各种词的用法被英文带偏的情况。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:2:0","tags":["写作","速查"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["阅读"],"content":"名词 主语 英文喜欢用抽象名词，「他的收入的减少改变了他的生活方式」，中文的说法是以具体名词，尤其是人做主词：「他因为收入减少而改变生活方式」，或者「他收入减少，乃改变生活方式」。 中文常用一件事情 (一个短句) 做主词，英文则常用一个名词 (或名词词组)。「横贯公路再度坍方，是今日的头条新闻」，是中文的说法。「横贯公路的再度坍方，是今日的头条新闻」，英文好用抽象名词，其结果是软化了动词，也可以说是架空了动词。 中文 英文 具体名词 抽象名词 一个短句（一件事） 名词或名词片语 宾语 英语好用抽象动词，架空了动词。科学、社会学和公文的用语侵入生活，迫使许多动词变成了万能动词加抽象名词的片语，中文也呈现这种病态。 动词＋抽象名词： 本校的校友对社会作出了重大的贡献。 昨晚的听众对访问教授作出了十分热烈的反应。 原本应有的样子： 本校的校友对社会贡献很大。 昨晚的听众对访问教授反应十分热烈。 单复数数量词 区分单复数是欧洲语文的惯例，而中文的名词没有复数的变化。在中文中，可以使用「众」、「们」来表示多数，但是很多时候并不需要复数尾。西化的弊病表现在用「人们」取代「人人」、「大家」等词，而「听众们」，「观众们」这样众们并用，既显累赘，又语句不通。 中文词不分数量，中文原无「……之一」的句法，现在我们说「观众之一」实在是不得已。至于这样的句子：「作为竹林七贤之一的刘伶」，不但「作为」二字纯然多余，「之一的」也文白来杂，读来破碎，把主词「刘伶」压在底下，更是扭捏作态。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:2:1","tags":["写作","速查"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["阅读"],"content":"辅助词 连接词 英文用\"and\"连接词性相同的词，中文往往有相应的词，或者任其并列。例如「夫妻」、「你我」，「东南西北」。 在连接词使用的不良趋势有两条： 不用连接词的地方用上连接词 「和」，「与」，「及」，「以及」包办了所有连接词，「而」，「并」，「而且」等几乎绝迹 介词 介词在英文里的用途远比中文里重要，简直成了英文的润滑剂。英文的不及物动词加上介词，往往变成了及物动词，英文简直离不了介词。中文则不尽然。「有关」、「关于」、「由于」之类，大概是用得最滥的介词了：由于好奇心的驱使，我向窗内看了一眼。英文在形式上重逻辑，喜欢交代事物物的因果关系。中文则不尽然。「清风徐来，水波不兴」，其中当然有因果关系，但是中文只用上下文作不言之喻。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:2:2","tags":["写作","速查"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["阅读"],"content":"修饰词 副词 英文的副词形式对中文为害尚不显著，但也已经开始了。例如这样的句子：「大家苦中作乐地竟然大唱其民谣」。「苦中作乐」本是动词，套上副词语尾的「地」就降为副词了。这么一来，文章仍然清楚，文法上却主客分明，太讲从属的关系，有点呆板。若把「地」一律删去，代以逗点，不但可以摆脱这主客的关系，语气也会灵活一些。 滥用「成功地」在日常生活中很常见。例如，国父孙中山先生成功地推翻了满清。「成功地」在这句话中毫无意义，和「推翻」的意思重复了。 形容词 在白话文里，这「的」字成了形容词除不掉的尾巴：「灰暗的凄冷的天空」改成「灰暗而凄冷的天空」，「夜色来袭」何等有力，「夜色的来袭」就松软下来了。 形容词或修饰语 (modifier) 可以放在名词之前，谓之前饰，也可以跟在名词之后，谓之后饰。目前的白话文，不知何故，几乎一律前饰，似乎不懂后饰之道。其实文言文的句子往往是后饰的，例如司马迁写项羽：*籍长八尺余，力能扛鼎，才气过人。*在当代白话文里，很可能变成：「项籍是一个身高八尺，力能扛鼎，同时才气过人的汉子」。后饰句可以一路加下去，虽长而不失自然，富于弹性。前饰句以名词压底，一长了，就显得累赘，紧张，不胜负担。所以前饰句是关闭句，后饰句是开放句。 白话文中的形容词主要有一下弊病： 形容词用太多的「的」来组织，导致啰嗦而软弱。 用抽象名词＋「的」来组成形容词。 形容词可以前饰或后饰，现在的白话文几乎一律前饰。 后饰句是开放句可以一路加下去，虽长而不失自然，富于弹性。 前饰句是关闭句，太长就显得累赘。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:2:3","tags":["写作","速查"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["阅读"],"content":"动词 动词西化的危机另有两端：一是单纯动词分解为「弱动词 + 抽象名词」的复合动词。不说「一架客机失事，死了九十八人」，却说「一架客机失事，造成九十八人死亡」，实在是迂回作态。另一端是采用被动词语气。目前西化的趋势，是在原来可以用主动语气的场合改用被动语气。「他被选为议长」不如「他当选为议长」。「他被指出许多错误」也不如「有人指出他许多错误」。 以下三种句式在英文中都很常见，而中文中只有第一种最常见，第三种更多使用主动语气，如「糖都吃完了」。 哥伦布发现了新大陆。 新大陆被哥伦布发现了。 新大陆被发现了 在可以使用主动语气的场合，改用被动语气，往往失之生硬。使用主动语气更佳。另一个毛病就是被动语气和「被」字绑定使用，忽视了其他的字。 中文的西化有重有轻，有暗有明，但其范围愈益扩大，其现象愈益昭彰，颇有加速之势。以上仅就名词、连接词、介词、副词、形容词、动词等西化之病稍加分析，希望读者能举一反三，知所防范。中文发展了好几千年，从清通到高妙，自有千锤百炼的一套常态。谁要是不知常态为何物而贸然自诩为求变，其结果也许只是献拙，而非生巧。变化之妙，要有常态衬托才显得出来。一旦常态不存，余下的只是乱，不是变了。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:2:4","tags":["写作","速查"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["阅读"],"content":"中文常态、变态对比 中文常态 中文变态 措辞简洁 措辞繁琐 句式灵活 句式生硬 声调铿锵 邋遢冗余 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:3:0","tags":["写作","速查"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["阅读"],"content":"中文危机：西化 成语普及度低 西化太快，非取长补短，破坏了中文自然生态 中文使用习惯 中文西化使用习惯 例子 具体名词，尤其是人，做主词 喜用抽象名词 「他的收入的减少改变了他的生活方式」vs「他因为收入减少而改变生活方式」 用一件事情（一个短句）做主词 常用一个名词（或名词词组） 「推行的国语，要靠大家的努力」vs「推行国语，要靠大家努力」 无弱动词现象 弱动词现象 (喜欢把简单明了的动词分解成「万能动词＋抽象名词」的片词) 例子 1：press vs apply pressure 例子 2：昨晚的听众对访问教授反应十分热烈。 vs昨晚的听众对访问教授作出了十分热烈的反应。 被传染 名词成灾、伪学术化、伪术语（pseudo-jargon） first step vs initial phase「这本传记引人入胜」vs「这本传记的可读性颇高」「更有远见」vs「更具前瞻性」 被传染 主义泛滥 爱国精神 vs 爱国主义 无单复数变化，却被传染 单复数变化 「民众」vs「民众们」（滥用“们”）刘伶是竹林七贤的同人 vs 作为竹林七贤之一的刘伶（改写去掉“之一”）李广乃汉朝名将 vs 李广乃汉朝名将之一（“之一”多余） 被传染（原来不用连接词的地方，在 and 意识的教唆下，都装上了连接词；而所谓连接词都由「和」、「与」、「及」、「以及」包办，可是灵活而宛转的「而」、「并」、「而且」等词，几乎要绝迹了） 词性相同的字眼常用 and 来连接 夫妻 vs man and wife 你我 vs you and I 前后 vs back and forth 介词滥用 介词在英文里的用途远比中文里重要，简直成了英文的润滑剂。英文的不及物动词加上介词，往往变成了及物动词，例如 look after, take in 皆是。介词词组（prepositional phrase）又可当作形容词或助词使用，例如 a friend in need, said it in earnest。 隐含逻辑关系 重因果，重逻辑 「清风徐来，水波不兴」vs「因为清风徐来，所以水波不兴」 英文助词滥用，滥用地、的、得，用到形容词，似乎就离不开「的」 助词很重要 他苦心孤诣想出一套好办法来。vs 他苦心孤诣地想出一套好办法来。 被中文 用学术面貌的抽象名词加助词构成形容词 很难 vs 难度很高的 热情的人 vs 热情型的人 白话文形容词过分前置 前置居多 「我见到一个男人，长得像你兄弟。」vs「我见到一个长得像你兄弟的男人。」 被传染 多用被动语气 你这句话吓不倒我。vs 我不会被你这句话吓倒。被打 vs 挨打（即使是被动语气滥用“被”） ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:4:0","tags":["写作","速查"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["阅读"],"content":"CHangeLog 2018-03-15 初稿 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:5:0","tags":["写作","速查"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["方法"],"content":" 如今社会，信息过载，领域丛生，我们常常需要接触一些陌生的知识，一些闻所未闻的领域。那以使用工具著称的人类，是否能借助软件快速了解一个领域呢？那些每天都需要看论文的学者早已发明了快速进入一个领域的方法，在下学些皮毛，稍作实践，特来分享一下。 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:0:0","tags":["学术"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["方法"],"content":"工具包 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:1:0","tags":["学术"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["方法"],"content":"HistCite 引文分析工具 在下大概一年前从罗昭锋老师博客知道了 HistCite，然后从Tsing 的 HistCite 使用教程获得资源和使用方法。更多实例和教学可见： 快速进入陌生领域：HistCite 使用教程 玩转文献调研 - 网易云课堂 安装好软件后，只需从 WOS 上导出的 txt 文件（一次最多可导出 500 条记录），不用做任何修改，只要把全部的 txt 放到 TXT 文件夹里面，然后双击 main.exe 即可一键完成加载。软件使用过程中主要会遇到以下几个概念： HistCite 使用过程中主要会遇到五个概念——GCS、LCS、LCR、CR，LCS 和 LCR 更重要，它们分别代表了与本领域相关联的被引用数和引用数，LCS 值高的文章一般是重要的新发现或者新解释，LCR 值高的一般是综述类文章。 GCS = global citation score，即总引用频次，它表示这篇文章被整个 WOS 数据库中所有文献引用的次数。 LCS = local citation score，即本地引用次数，它表示这篇文章在当前数据集中被引用的次数。如果一篇文章的 LCS 值高，意味着它是领域内的重要文献。 LCR = local cited references，本地参考文献数，它表示这篇文献的参考文献在当前数据集中的数量，即这篇文献引用别人的情况。如果一篇文章的 LCR 值高，意味着它引用了大量的 领域内文献，极有可能是综述文章。 CR = cited references，参考文献数，它表示这篇文章的参考文献在整个 WOS 数据库中的数量。 通过界面上方的“Cited References” ，我们可以进入被引文献的列表。在这个列表中，我们发现很多文献后面都有个绿色的“+”号，这表明这篇文献并没有被本地数据集收录，也就是说通过关键词搜索并没有检索到的文献。每篇文献最后有个 Recs 值，表示这篇文献在当前数据集中被引频次，通过 Recs 排序，我们很快就可以定位重要的被遗漏的文献。 网络图中：圆圈越大被引次数越多，箭头指向的对象是被引用方 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:1:1","tags":["学术"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["方法"],"content":"Google scholar \u0026 WOF Web of Science 是质量最高的文献索引网站，收录有 SCIE（SCI Expanded）和 SSCI 文献，使用方法前面教程有详细介绍。 Google Scholar 和 ScienceDirect 主要用来下载文献全文，不能翻墙的朋友可用 Sci-Hub 代替 Google scholar。 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:1:2","tags":["学术"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["方法"],"content":"Zotero 或类似知识管理软件 Zotero 是及其强大的知识管理软件，最大的亮点是：可以用 Zotero Connecter 插件在 Chrome 上一键保存网页中所有的文献、书籍、维基百科和对应 PDF。详细教程见阳志平老师的博客。 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:1:3","tags":["学术"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["方法"],"content":"案例：快速了解『财务预警』领域 在下的本科毕设 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:2:0","tags":["学术"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["方法"],"content":"获取文献 下载文献信息 在 Web of Science 核心合集中检索“bankruptcy prediction”、“Business Failure Prediction\"或“financial distress prediction”，时间限定为 1985 年至今，共计 1983 篇文献。下载这些文献信息及参考文献的数据集（作为本地文献集），保存至 TXT 。 手动添加遗漏文献 将这 1903 篇论文所引用的 38000 多篇论文，按照其在本地文献集的被引用次数从低到高排序，发现仍然有重要文献没有被之前搜索的三个关键词所覆盖。接着手动将遗漏的重要文献在 WOF 上逐一标记，一并导出添加到本地文献集中（实际操作中添加了 23 篇文献，多与企业信用评级相关），此时本地文献集覆盖了财务危机预警领域所有重要的文献（包括所有 SCI、IE 和 SSCI 文献）。 分析领域发展趋势 利用 HistCite 软件对本地文献集进行分析，首先查看一下该领域的发展趋势（此处截取了 1985-2016 年的数据）。 上图显示，财务危机预警领域在 2004 年开始蓬勃发展，而且发展热度总体呈上升趋势。由此可猜测，该领域在 2004 年左右发生重大变革，实际去考察文献发现，该项变革是人工智能方法被引入该领域。 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:2:1","tags":["学术"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["方法"],"content":"分析重要文献网络图 由领域总体发展的分析可得出，该领域值得关注的年份缩小到 2004-2017 年共 14 年的时间段里。然后从本地文献集筛选出发表于 2014 年之后的文献，统计这些文献各自被本地论文集引用的次数，对前 50 最高被引的文献，按照引用关系画出网络关系图。其中被引用次数越多的文献，其节点方框越大，节点按照引用文献指向被引用文献的方式连接。 有图可见222 号、319 号、353 号、439 号、442 号、581 号、813 号、868 号、1133 号是重要的综述文献；而 30 号、39 号、68 号、72 号、77 号、87 号、88 号、94 号、95 号、162 号、207 号、222 号、225 号、305 号、314 号、319 号、330 号、436 号、442 号、552 号、548 号是取得重要进展的文献（其中加黑的文献又相对更重要）。 用 Google scholar 搜索重要文献的 DOI，并一键保存至 Zotero。 在 Zotero 显示如下： ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:2:2","tags":["学术"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["方法"],"content":"寻找牛人 重要文献太多了怎么办？根据人的记忆生存优势，按照学者来整理文献比较有利于记忆。领域内最靠谱的学者是那些呢？这里整理了领域内前 20 本地高被引的学者以及他们在本地文献集中所拥有的文献数和被本地文献集引用的次数总和。 其中 Sun J 和 Li H 两位学者主要活跃于 2006 年至今，研究内容涉及领域的方方面面，Sun J 更是近 10 年只专注于该领域，而且两位学者的 H 指数也高达 20，因此两位学者是相当靠谱的；排在第三和第五的 Ravi V 和 Kumar PR 则主要活跃在 2006-2012 年，主要研究银行的财务危机预警；排在第四的 Tsai CF 活跃在 2008 年至今，主要研究财务指标等数据特征的选择。 在 Google scholar citation 中搜索 Sun J，按右上角 Zotero Connector 文件图标，一键下载 Sun J 最高引的文献信息和 PDF。 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:2:3","tags":["学术"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["方法"],"content":"近期分析 分析近十年重要文献 以上分析会倾向于夸大 2008 年之前研究的重要性，因此需要在此按年份进行筛选。接下来筛选出 2008 年及以后的论文来分析，做前 40 最多被本地文献集引用的文献网络关系图。 此图涌现出了一个难以回避的信息，912 号（原来的 1133 号，其作者是 Sun J 等人）是及其重要的综述文献，通过它可以快速理清整个领域截止至 2014 年的发展情况。 发现前沿 前辈们做了这么多研究，那还剩什么可以做呢？ 结合 2013 年至今的文献网络关系图，可总结为如下几个方向： 构建简单而准确的财务危机预警模型 构建动态财务预警模型 构建基于不平衡数据集的财务预警模型 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:2:4","tags":["学术"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["方法"],"content":"延伸学习 科学网—如何使用 CiteSpace 的一组示范及常见问题解答 - 陈超美的博文 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:3:0","tags":["学术"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["方法"],"content":"ChangeLog 2018-01-07 初稿 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:4:0","tags":["学术"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["成长"],"content":" 过往三年，迷茫、求索，仍然迷茫、接着求索……如今幡然醒悟，得一曲径，通向深林幽处。过往三年，如在迷宫中抱头鼠窜，有幸遇见些贵人、师友指点迷津，万分感谢！ 三年前，一位少年，自己狠狠绊了自己一跤。一直顺风顺水的他，突然不知所措，把人生方向盘交给了别人。于是，一个大转弯直接把他甩晕过去。醒来之后，少年内心无比凌乱，四处寻求安抚心灵的方法。次年夏天，少年上山闭关禅修十日，早晨四点至晚上九点，其间除了两餐，其余时间都在练习禅修的技巧。第八天，少年学会了控制自己的意识，心不再心猿意马，世界有了秩序。第十天，少年觉得内心就跟小时候玩耍白石滩一样洁白光亮。 ","date":"2018-01-01","objectID":"/2018-01-01-reading-history-2/:0:0","tags":["阅读"],"title":"一个人的阅读史（二）","uri":"/2018-01-01-reading-history-2/"},{"categories":["成长"],"content":"遇见贵人 下山后，少年开始用学来的技巧应对千变万化的世俗世界。不久，少年厌倦了日复一日的抵御，空明的内心又失去了秩序。所幸的是，少年凭借自己的品味，在信息过载的世界找到了开智正典。书单中有 4 本是少年曾经看过的，那 4 本都是他看过最好的书。 顺着书单，少年找到了开书单的人，略似少林寺的扫地僧，他叫阳志平。少年开始关注他，花了半年时间读完他的博客，然后又参加了他的认知写作课，跟他发生更多的交集。由于根基太浅，学得慢，少年花了整整两年的时间才储备了极少量的基本常识，但这已经改写了他的生命历程。 从黑客与画家中，少年知道了世界上有一群有趣的人，他们热爱自己的职业，创造是他们的日常。其实每个人都可以选择自己喜欢的职业，国家唯一强迫公民的征兵制也好多年不执行了。生命可贵，人只能到人间走一回，一定不能屈就。 接着是青年王阳明：行动中的儒家思想，它让少年明白了，即使是“三不朽”的完人，生命历程也是极其曲折，也是多年在错误的方向上求索，一无所获。唯有坚持内心的追求，才会偶有所得，哪怕仅想明白了一件事，都极为幸运。 ","date":"2018-01-01","objectID":"/2018-01-01-reading-history-2/:1:0","tags":["阅读"],"title":"一个人的阅读史（二）","uri":"/2018-01-01-reading-history-2/"},{"categories":["成长"],"content":"远离人群 后来，少年又读了这才是心理学和超越智商，两本以一当百的神书。少年了解了作为科学的心理学、三重加工心智模型、常见的思维谬误。此时，少年学会了如何屏蔽媒体、如何过滤大部分泥沙俱下的信息，如何自主安装优秀心智程序，世界开始以不同的面貌呈现在少年的眼前。 怀着好奇心，少年开始接触复杂科学，读了网络、群体与市场、复杂和失败的逻辑。少年惊喜不已，这书单也太神了吧，复杂系统和网络科学实在太迷人了。芸芸众生，或者说网络中的节点，如何在复杂世界中表演着花式失败、如何通过网络关系与其他节点发生连接、如何利用网络中的弱连接和结构洞实现阶级跃迁…… 同时，少年也读了为什么学生不喜欢上学？、追时间的人、查理·芒格的智慧、穷查理宝典和智识的生产技术，学到了不少学习技巧和增长智慧的方法。结合一些 Zotero、Anki、TextMate 等软件，少年打造了一个从获取知识、管理知识、记忆知识到连接知识、审查连接、输出文章，一套的智识生产系统。这个系统还只是个粗糙的雏形，日后一步步打磨，良性循环，很可能成为少年向往的知识工作室。 至此，少年知道自己已远离了人群，世俗的纷纷扰扰再也不足以击垮少年的精神家园。有了偏离人群的能力，有了偏离人群的动机，但还是不够，少年当时并不知道缺的是什么。 ","date":"2018-01-01","objectID":"/2018-01-01-reading-history-2/:2:0","tags":["阅读"],"title":"一个人的阅读史（二）","uri":"/2018-01-01-reading-history-2/"},{"categories":["成长"],"content":"第二序改变 读书之外，少年仍旧在当初别人为他选择的系统里挣扎，依赖原来路径，做些系统内改变。常常学习一整天，回想那些知识点，感慨，“都是些什么破东西”。这些早于计算机科学、认知科学和网络科学，甚至未吸收进化论思想，仅仅构建经典物理均衡理论之上的知识，是如此脆弱，如此偏离实际。少年不肯为自己没有证据支持的感觉，而放弃努力，直到遇见自我决定论、路径依赖、贝叶斯概率，建构了产业整体观雏形。少年意识到，是时候要放弃错误的方向，摆脱路径依赖，跳到成功的基础概率更大的池子里，实现第二序改变。 于是，少年转向了计算机领域，感到久违的舒心，再也不用忧心经济学如何与计算机、网络科学发生交叉的事，再也不用抱怨学习的那些知识只是现代教育的一句谎言。 少年终于赶上了好运，信息简史间接证明了少年的选择是正确的。不同时代，不同学科的重要性有极大的差异，书中提到 20 世纪信息论深刻改造了生物学、心理学、经济学的面貌。而这个世纪，它的主题是建设虚拟世界，最重要的学科是计算机科学、网络科学、认知科学等学科。这些学科的重大突破，均会变革其他学科。少年找到了一条踏实的路，他决定在这个领域精益求精。 ","date":"2018-01-01","objectID":"/2018-01-01-reading-history-2/:3:0","tags":["阅读"],"title":"一个人的阅读史（二）","uri":"/2018-01-01-reading-history-2/"},{"categories":["成长"],"content":"去往安珀 好运连连，少年又碰到幸福的真意这本书，了解了如何用一个整体目标串起散落的时间段，使得一个人可以遵照一个统一的秩序，在不同心流活动之间穿梭，创造整个生活的大和谐。内观禅修修习的是一个“空”字，而心流理论则教人如何让生活得到一个“实”字。少年兴奋了好几个白天黑夜，过往习得的知识围绕着“如何过好一生”这个主题联结在一起。 促成行动的要素，除了动机和能力，还缺什么，答案顺其自然涌现出来——归属。少年知道了他为何要偏离人群，只有偏离人群才能获得独特的自己，才能到达别人到不了的地方，然后基于自己的这种偏离，把自己生活的不同主题、不同人的不同主题、自己与历史、自然界还有机器的关系整合在一个和谐的精神世界中。如此，一个人复杂性便能到达一个高度，他所理解的“人”，是一个积极、独特、丰富的存在，生命也由此有了意义。 自此，生活变成了少年的游戏场，生命变成了一场追逐、一次探险。幸福在何方？少年笑而不语，他已在路上。 ","date":"2018-01-01","objectID":"/2018-01-01-reading-history-2/:4:0","tags":["阅读"],"title":"一个人的阅读史（二）","uri":"/2018-01-01-reading-history-2/"},{"categories":["成长"],"content":"ChangeLog 2018-01-01 初稿 ","date":"2018-01-01","objectID":"/2018-01-01-reading-history-2/:5:0","tags":["阅读"],"title":"一个人的阅读史（二）","uri":"/2018-01-01-reading-history-2/"},{"categories":["阅读"],"content":" 登峰造极是一个过程而不是一个结果，在整个过程中间，过于目标导向只会使你失去长期进步的潜力。一旦选择了登峰造极的道路，你就必须放弃短期的利益，放弃对目标的过于执著，和整个追求速效药的世界作对抗。 2015 年第一次看《寿司之神》时，在下还在自己嫌弃不已的专业里煎熬，所追求的是，如何翘掉所有的课，然后争取考前复习三两天考个八九十分，因此对影片主角小野二郎并没有心生多少敬意。如今，在下已转行一个来月，一股来势凶猛的渴望在体内膨胀——“我想在这个领域精益求精，最终达到登峰造极的境界。” 有幸即使遇见一本小书《Mastery: The Keys to Success and Long-Term Fulfillment》，作者乔治·伦纳德深刻地指出了追求精益求精的关键点，还有期间可能遇到的障碍。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:0:0","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"遇见阻碍的三种人 任何领域，技艺高超的专家都仅占从业者的很小比例，大师更是少之又少，甚至某些领域找不到可以称作大师的人。大多数人都走在以下三种路径上，而达不到登峰造极的境界。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:1:0","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"浅尝辄止者 浅尝辄止者对一切新东西都充满好奇，无论是首次接触的体育项目，还是更好的工作机会，或是一段全新的感情。他们喜欢从零开始，喜欢置办各种装备，喜欢念叨新学的术语，喜欢一切新鲜感。一旦尝到学习曲线中最开始的那段快速成长期的甜头，他们就会被喜悦冲昏头脑，迫不及待地想要宣扬自己的成绩，总是期盼能再学点新花样。然而，接下来短暂的回落期会给他们很大的打击，之后的平台期更是超出他们的想象，难以忍受。此时，新鲜感带来的热情渐渐消退，他们开始缺席，开始找各种借口逃避。然后再重新物色下一个猎物。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:1:1","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"强求突破者 强求突破者往往具有坚定的性格，他们奋勇争先，从不安于第二名。他们重视结果，不管付出什么代价也要完成预定目标。他们总是幻想迅速掌握秘诀，制定详细的规划，平台期也被纳入到规划中。但是一旦到了平台期，他们难以忍耐毫无进步的感觉。于是，开始质疑自己，盲目付出努力，通宵达旦，听不进他人的建议，一根筋走到底，不到目的不罢休。此时，他们感到失望、沮丧，负面情绪传递到周围的人身上，亲友、同事、恋人无一幸免。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:1:2","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"安于现状者 安于现状者的表现又是另一种样子。最初的进步之后，他们可能甘愿一直停留在平台期。只要不耽误事，他们就无所谓进步，无所谓精益求精。 这三种分类并非泾渭分明，同一个人在不同的方面，学习的不同阶段可能表现地不尽相同。但从全局来看，总会有一种心态占据主动，它将决定你的成就。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:1:3","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"登峰造极五大要素 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:2:0","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"好导师 找一位好导师就等于连接上一个优质的信息接口，能够帮助新手快速过滤掉次要信息，抓住主要信息，在新领域内找到自己的坐标和前行的道路。例如，在下在台大八极拳社练拳时，教练是台湾著名武术家刘云樵的弟子，刘师爷又是民国著名武术家李书文的传人；这样一来，在下刚接触八极拳这个领域的时候，就跟整个八极拳圈子搭上关系，也坚信自己学到的东西是正宗的，不用纠结自己练习的东西靠不靠谱。 找导师还要求互相信任，互相喜欢。互相信任，学徒才能心甘情愿地模仿导师，导师也不会私藏干货；人们对待自己喜欢的东西，总会有更浓的兴趣，互相喜欢，学徒才会更想学，更想见导师，导师也才会更喜欢教。 跟从导师学习，能够让你尽快接触该领域从业者的工作情境，在该情境下学习、模仿，习得的知识能够更容易得运用到具体情境中。 导师看待学徒时，导师应该以平和的心态对待学得快的学徒和学得慢的学徒，快学者容易遗漏细节，这些细节会成为快学者在高阶学习阶段的瓶颈；慢学着学初学的时候虽然慢，但稳扎稳打得打磨细节，最后可能反而学得更快。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:2:1","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"坚持练习 对于那些追求精益求精境界的人来说，他们不应仅把练习看成一遍遍重复的动作，更不应把练习当成简单的活动，而是把练习和自身融合起来，让它变成自己生活中必不可少的元素。此时，练习不再为了有所得，而只是为了练习本身。就像有些程序员喜欢写很酷的程序，享受解决问题过程中全神贯注的状态，而不关心他的作品能够带来多大声誉。当然对于顶级程序员等真正的成功者，努力练习的过程可以带来丰厚的回报，但这并不是他们追求精益求精的最终目的。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:2:2","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"保持初学者的心态 真正的成功者会随时保持从零开始的心态，面对新老师如此，对待自己旧有经验时如此，在刚开始学、在不断获得进步的时候也是如此。甘心做一个“愚者”：新接触一个领域时，容易被海量陌生概念淹没，感到入门很吃力也不要放弃，听从老师的教导，放空心态，从零开始；也不要怕闹笑话，初学时难免姿势不够优雅，但谁不是先在硬邦邦的冰面上结结实实摔几个跟头之后才慢慢学会自如地滑行。在学习的不同阶段，想要更进一步，或延伸到相近领域时，也唯有保持初学者的心态，心里才不会时刻端着盛满久有经验、已有成绩的那盆水，放下那盆水，手脚才会更轻盈，才能领会到相似事物的微妙差异。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:2:3","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"胸有成竹 学习时，在脑中复现、预演所学知识颇有助益，特别是有步骤的知识，作者举例的小手回也好，想象演讲过程也罢，在脑中模拟一遍，行动的时候会更有把握。这种想象力还能用在构建一个美好愿景上，当你在心中想象一个目标，并赋予美学上的意义，此时你会更愿意为之穷追不舍。例如，练习书法时，脑中构想着希望写出的字形，每次练习都比较以下，每次缩小的距离都会促使你去不断练习。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:2:4","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"超越极限 在顶尖高手身上，我们会发现一些有悖常理的行为：他们往往痴迷于基本功的练习，用心打磨那些被人忽视的细节；于此同时，他们还不断挑战更高、更快、更强的极限，并为此付出常人难以想象的代价，也就是说高手会同时追求两个不同方向的极致。细看，这两个方向是有联系的，高手挑战极限的行为可以理解为一种压力测试，在这种有难度的测试中，或是心理上的弱点，或是技术上的漏洞，都会暴露无遗，去伪存真。高手获取这些反馈，提升对该技能的理解，之后便逐一面对这些不足，打磨细节。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:2:5","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"若干高效方法 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:3:0","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"如何应对改变的艰难？ 当感觉到退步的时候，请挺住！每个人都不喜欢改变，每个人自身的稳态系统会自动抵御改变行为。例如，当我们许久没有跑步，然后跑两圈之后就气喘吁吁，心跳飞快，这是身体在警告我们。我们是否会应该怀疑自己适不适合跑步呢？我们所要学会的是克服久有习惯带来的不适。 对久有习惯时刻保持警惕：改变之后的不适症状首先会出现在自己身上，此时要牢记这是正常现象，视这种不适为改变发生的痕迹就好。然后不适症状会传递到我们周围的人那里，你的亲人、朋友还有同事等，如果有人对此指指点点，请明确这不是你的错，只是别人面对他自己周围环境变化的自然反应。 与自己对话：当我们身体出现不适症状时，把我们的身体想象成一个人，可以是一个小朋友，然后你耐心地跟他讲解出现这种不适的原因，努力去安抚他。例如，集中注意力看几个小时论文之后，会很想做点不费脑子的事，可以对自己说“嘿，你快要打破自己的记录了，再发一波力看看！” 养成规律练习的好习惯：面对改变，养成按时练习的好习惯，注重练习本身的乐趣，能够减轻改变的不适感。 终身学习：学习不仅仅是看几本书的事，学习意味着变革。应对变革的经验越丰富，再次面对改变时就会越从容。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:3:1","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"如何激发潜能？ 你还记得情窦初开，不顾一切去爱的感觉吗？你还记得慢跑五圈后，一个人能打三个人的底气吗？必要的休息对身体固然有好处，但我们只有在实践中才能激发更多的潜能。心理学格式塔学派的创始人佛雷德里克·皮尔斯说过：“不要指望积攒能带来力量，力量是越用越多。”可是，真若如此，我们为什么还时常感到力不从心呢？ 因为我们出生之后就不断受到压抑，家长限制孩子的行为，学校要求学生遵守纪律。以至于绝大多数人陷入这样的误区：责任和压力能够取代乐趣和激情。虽然我们生存的环境有毒，但对于获取更多能量，我们还是有进步的余地： 保持身体健康，健康是开展一切活动的基础，再怎么强调都不为过。 释放积极的力量，经常给自己和身边的人正面的反馈，同时又不浮夸。学会克服消极情绪的影响，多给自己一些肯定。面对生活中的琐事，不要浮躁，深呼吸，观察自己当下的感受。 保持诚实，对自己诚实，能减少抉择时的犹豫，对他人诚实，能够降低交流的成本。 掌控负面情绪，看见不爽的事情，不要只是一味的抱怨，你大可以动手去改变它。 分清事情的轻重缓急，人的能量是有限的，重要的事情优先处理，这些重要的事情才是撑起生命的构件。设定最后期限，倒逼自己的行动；在学习时关注输出，用输出倒逼输入。 最后，再次明确潜能不是积攒出来的，而是激发出来的。在一生的学习中，不断迎接挑战，激发潜能，你会越来越深谙此道。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:3:2","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"如何避免掉入陷阱？ 迈向精益求精的第一步还算容易的话，那么真正的困难是如何走好接下来的每一步，以下几点能够减轻困难的负面影响。 巧妙解决生活中的冲突：大多数人都没能幸运地在一开始就将练习节奏和生活节奏协调一致，更多的人需要在生活和工作的压力之外，再挤出时间练习。 提高专注力：不要把短期目标当作最终的追求，精益求精是终身之旅，需要专注地练习。 对自己负责：自己给自己把关，保证学习质量；不要偷懒：偷懒会影响你的自信，给你带来焦虑。 坦然面对失败和出丑：全身心投入竞争带来的动力，不仅能提高效率，也能带来凝聚力；竞争中偶尔出丑，偶尔“二”一下，能够调节节奏。 切记过犹不及：竞争固然重要，但更重要的是你一直以来养成的练习习惯，不要让外在的奖赏阻碍你练习过程中获得的乐趣，不苛求完美。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:3:3","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"起风了，扬帆可好？ 读到这里，可能跟在下一样还有不少困惑。如何专注于练习？如何跟从导师学习？如何掌控情绪……不妨从这些知识点延伸出去学习并实践：自我决定论、心流理论、情景学习、刻意练习、压力测试、积极心理学、行动科学等等。 假如你也有幸遇见渴望精益求精的领域，假如你也向往小野一郎精致的寿司，或者 50 行区块链 Python 代码，亦或冲在浪头的帆板。在下想问，起风了，一起杨帆可好？ ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:4:0","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["阅读"],"content":"ChangeLog 2017-12-14 初稿 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:5:0","tags":["达尔文信徒","专业主义"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["整理"],"content":"查 LaTeX 常用数学符号的时候，一开始去官网：LaTeX - A document preparation system找官方文档：LaTeX Documentation，然后又找了 CTEX 的在线文档：LATEX2e 插图指南，内容都太丰富了。 在网上看了几个博客，发现了一份不太简短的 LATEX2ε 介绍 ，git clone到本地，再用终端切换到scr所在的目录，依次在终端输入命令行即可。再从几个博客粘贴一些，整理了一份常用数学符号。 ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:0:0","tags":["LaTeX","速查"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["整理"],"content":"函数 一般函数名称，要么前面加 \\ ，要么加 \\operatorname{} 。 函数 LaTeX 函数 LaTeX $$\\sin\\theta$$ \\sin\\theta $$\\cos\\theta$$ \\cos\\theta $$\\frac{L}{r}$$ \\frac{L}{r} $$\\pmod{m}$$ \\pmod{m} $$\\operatorname{sh} j$$ \\operatorname{sh} j $$\\operatorname{argsh} k$$ \\operatorname{argsh} k $$\\lim_{\\Delta x\\to 0}$$ \\lim_{\\Delta x\\to 0} $$\\limsup S$$ \\limsup S $$\\pmod{m}$$ \\pmod{m} $$a \\bmod b$$ a \\bmod b $$\\sqrt{3}$$ \\sqrt{3} $$\\sqrt[n]{n}$$ \\sqrt[n]{n} 行内公式有些下标会出现在右边 ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:1:0","tags":["LaTeX","速查"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["整理"],"content":"复杂表达式 功能 效果 语法 小型分数 $$\\tfrac{2}{4} = 0.5$$ \\tfrac{2}{4} = 0.5 大型分数 $$\\dfrac{2}{4} = 0.5 \\qquad \\dfrac{2}{c + \\dfrac{2}{d +\\dfrac{2}{4}}} = a$$ \\dfrac{2}{4} = 0.5 \\qquad \\dfrac{2}{c + \\dfrac{2}{d +\\dfrac{2}{4}}} = a 二项式系数 $$\\dbinom{n}{r}=\\binom{n}{n-r}=C^n_r=C^n_{n-r}$$ \\dbinom{n}{r}=\\binom{n}{n-r}=C^nr=C^n{n-r} 矩阵 $$\\begin{matrix} x \u0026 y \\ z \u0026 v \\end{matrix}$$ \\begin{matrix} x \u0026 y \\\\ z \u0026 v \\end{matrix} $$\\begin{vmatrix} x \u0026 y \\ z \u0026 v \\end{vmatrix}$$ \\begin{vmatrix} x \u0026 y \\\\ z \u0026 v \\end{vmatrix} $$\\begin{Vmatrix} x \u0026 y \\ z \u0026 v \\end{Vmatrix}$$ \\begin{Vmatrix} x \u0026 y \\\\ z \u0026 v \\end{Vmatrix} $$\\begin{bmatrix} 0 \u0026 \\cdots \u0026 0 \\ \\vdots \u0026 \\ddots \u0026 \\vdots \\ 0 \u0026 \\cdots \u0026 0 \\end{bmatrix}$$ \\begin{bmatrix} 0 \u0026 \\cdots \u0026 0 \\\\ \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ 0 \u0026 \\cdots \u0026 0 \\end{bmatrix} $$\\begin{Bmatrix} x \u0026 y \\ z \u0026 v \\end{Bmatrix}$$ \\begin{Bmatrix} x \u0026 y \\\\ z \u0026 v \\end{Bmatrix} $$\\begin{pmatrix} x \u0026 y \\ z \u0026 v \\end{pmatrix}$$ \\begin{pmatrix} x \u0026 y \\\\ z \u0026 v \\end{pmatrix} 条件定义 $$f(n) = \\begin{cases} n/2, \u0026 \\mbox{if }n\\mbox{ is even} \\ 3n+1, \u0026 \\mbox{if }n\\mbox{ is odd} \\end{cases}$$ f(n) = \\begin{cases} n/2, \u0026 \\mbox{if }n\\mbox{ is even} \\\\ 3n+1, \u0026 \\mbox{if }n\\mbox{ is odd} \\end{cases} 多行等式 $$\\begin{align} f(x) \u0026 = (m+n)^2 \\ \u0026 = m^2+2mn+n^2 \\ \\end{align}$$ \\begin{align} f(x) \u0026 = (m+n)^2 \\\\ \u0026 = m^2+2mn+n^2 \\\\ \\end{align} $$\\begin{alignat}{2} f(x) \u0026 = (m-n)^2 \\ f(x) \u0026 = (-m+n)^2 \\ \u0026 = m^2-2mn+n^2 \\ \\end{alignat}$$ \\begin{alignat}{2} f(x) \u0026 = (m-n)^2 \\\\ f(x) \u0026 = (-m+n)^2 \\\\ \u0026 = m^2-2mn+n^2 \\\\ \\end{alignat} 方程组 $$\\begin{cases} 3x + 5y + z \\ 7x - 2y + 4z \\ -6x + 3y + 2z \\end{cases}$$ \\begin{cases} 3x + 5y + z \\\\ 7x - 2y + 4z \\\\ -6x + 3y + 2z \\end{cases} 数组 $$\\begin{array}{|c|c||c|} a \u0026 b \u0026 S \\ \\hline 0\u00260\u00261\\ 0\u00261\u00261\\ 1\u00260\u00261\\ 1\u00261\u00260\\ \\end{array}$$ \\begin{array}{|c|c||c|} a \u0026 b \u0026 S \\\\ \\hline 0\u00260\u00261\\\\ 0\u00261\u00261\\\\ 1\u00260\u00261\\\\ 1\u00261\u00260\\\\ \\end{array} ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:2:0","tags":["LaTeX","速查"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["整理"],"content":"希腊字母 字母 LaTeX 字母 LaTeX $$\\alpha$$ \\alpha $$\\beta $$ \\beta $$\\gamma $$ \\gamma $$\\delta $$ \\delta $$\\epsilon $$ \\epsilon $$\\varepsilon $$ \\varepsilon $$\\zeta $$ \\zeta $$\\eta $$ \\eta $$\\theta $$ \\theta $$\\kappa $$ \\kappa $$\\lambda $$ \\lambda $$\\mu $$ \\mu $$\\nu $$ \\nu $$\\xi $$ \\xi $$o $$ o $$\\pi $$ \\pi $$\\rho $$ \\rho $$\\sigma $$ \\sigma $$\\tau $$ \\tau $$\\phi $$ \\phi $$\\varphi $$ \\varphi $$\\chi $$ \\chi $$\\psi $$ \\psi $$\\omega $$ \\omega $$\\Gamma $$ \\Gamma $$\\Sigma $$ \\Sigma $$\\Lambda $$ \\Lambda $$\\Psi $$ \\Psi $$\\Delta $$ \\Delta $$\\Omega $$ \\Omega $$\\Theta $$ \\Theta $$\\Pi $$ \\Pi $$\\Phi $$ \\Phi ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:3:0","tags":["LaTeX","速查"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["整理"],"content":"符号 ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:4:0","tags":["LaTeX","速查"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["整理"],"content":"二元关系和二元运算 符号 LaTeX 符号 LaTeX $$\\leq $$ \\leq $$\\geq $$ \\geq $$\\equiv $$ \\equiv $$\\gg $$ \\gg $$\\simeq $$ \\simeq $$\\sim $$ \\sim $$\\subset $$ \\subset $$\\supset $$ \\supset $$\\subseteq $$ \\subseteq $$\\approx $$ \\approx $$\\in $$ \\ni $$\\sim $$ \\sim $$\\ni $$ \\ni $$\\propto $$ \\propto $$\\parallel $$ \\parallel $$\\perp $$ \\perp $$\\notin $$ \\notin $$\\neq $$ \\neq $$\\pm $$ \\pm $$\\mp $$ \\mp $$\\cdot $$ \\cdot $$\\div $$ \\div $$\\cap $$ \\cap $$\\cup $$ \\cup $$\\times $$ \\times $$\\otimes$$ \\otimes $$\\land$$ \\land $$\\lor $$ \\lor $$\\rightarrow $$ \\rightarrow $$\\longrightarrow $$ \\longrightarrow $$\\Rightarrow $$ \\Rightarrow $$\\leftrightarrow $$ \\leftrightarrow ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:4:1","tags":["LaTeX","速查"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["整理"],"content":"巨算符 符号 LaTeX 符号 LaTeX $$\\sum $$ \\sum $$\\prod $$ \\prod $$\\int $$ \\int $$\\iint $$ \\iint ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:4:2","tags":["LaTeX","速查"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["整理"],"content":"数学头标符号、底标符号、字体 符号 LaTeX 符号 LaTeX $$\\hat{a} $$ \\hat{a} $$\\bar{a} $$ \\bar{a} $$\\dot{a} $$ \\dot{a} $$\\vec{a} $$ \\vec{a} $$\\tilde{a} $$ \\tilde{a} $$\\widehat{AAA} $$ \\widehat{AAA} $$\\overbrace{1+2+\\cdots+100}$$ \\overbrace{1+2+\\cdots+100} $$\\begin{matrix} 5050 \\ \\overbrace{ 1+2+\\cdots+100 }\\end{matrix}$$ \\begin{matrix} 5050 \\\\ \\overbrace{ 1+2+\\cdots+100 }\\end{matrix} $$\\overrightarrow{AB} $$ \\overrightarrow $$ \\triangleq $$ \\triangleq $$\\underline A$$ \\underline A $$\\iint \\limits_{x+y=1}$$ \\iint \\limits_{x+y=1} $$\\underrightarrow{\\text{你的文字}}$$ \\underrightarrow{\\text{你的文字}} $$B \\xrightarrow[T]{n\u003e0} C$$ B \\xrightarrow[T]{n\u003e0} C $$\\underset{0\\leq j \\leq k-1}{\\arg\\min} $$ \\underset{0\\leq j \\leq k-1}{\\arg\\min} $$\\overset{?}=$$ \\overset{?}= $$\\sum_{\\substack{0\u003ci\u003cn \\ 0\u003cj\u003cn}} $$ \\sum_{\\substack{0\u003ci\u003cn \\ 0\u003cj\u003cn}} $$\\overset{\\frown} {AB}$$ \\overset{\\frown} {AB} 加粗 $$\\bf a$$ \\bf a, \\textbf a, \\mathbf a $$\\big|{x = x_0}$$、$$\\bigg|{x = x_0}$$ `\\big _{x = x_0}、\\bigg _{x = x_0}` $$a^{\\circ}$$ a^{\\circ} ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:4:3","tags":["LaTeX","速查"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["整理"],"content":"其他符号 符号 LaTeX 符号 LaTeX $$\\dots $$ \\dots $$\\cdots $$ \\cdots $$\\vdots $$ \\vdots $$\\ddots $$ \\ddots $$\\forall $$ \\forall $$\\exists $$ \\exists $$\\partial $$ \\partial $$\\infty $$ \\infty $$\\bot $$ \\bot $$\\angle $$ \\angle $$\\lnot $$ \\lnot $$\\mathrm{d}x$$ \\mathrm{d}x $$\\triangle$$ \\triangle $${}_1^2!X_3^4$$ {}_1^2!X_3^4 $$\\alpha\\quad\\beta$$ \\alpha\\quad\\beta $$\\alpha\\qquad\\beta$$ \\alpha\\qquad\\beta $$\\alpha \\ \\beta$$ \\alpha \\ \\beta $$ \\left( \\frac{a}{b} \\right) $$ \\left( \\frac{a}{b} \\right) $$\\lfloor a \\rfloor$$ \\lfloor a \\rfloor $$\\lceil a \\rceil$$ \\lceil a \\rceil ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:4:4","tags":["LaTeX","速查"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["整理"],"content":"ChangeLog 2018-08-09 添加 \\limits_{}、符号头标和底标 2017-11-30 初稿 ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:5:0","tags":["LaTeX","速查"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["成长"],"content":"小学到大二的阅读记录","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["成长"],"content":" 史之为用，其利甚博，乃生人之急务，为国家之要到。——刘知几《史通》 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:0:0","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["成长"],"content":"从泥塘里起步 小学六年级搬到新教学楼，教室刚好跟图书室同一层，我的阅读便是从这个契机开始。这是小学的第一个图书室，学校里的图书馆不允许小学生借书，有时候周末无聊会和小伙伴去逛一下，只是翻翻书，没有真的去读。寄宿生总有一大把的时间要打发，新图书室恰巧又近，自然会常去逛逛。 当时老师、同学总是提到《钢铁是怎样炼成的》，一部不能更经典的名著，到现在还能从嘴里蹦出作者名字，“奥斯特洛夫斯基”，我正经读过的第一本便是它。读的时候不了解小说背景，只是从故事中读出了“生命宝贵，人应该为此努力奋斗”，挺振奋人心。 小学阶段，另外两本正经读过的书是《牛虻》和《复活》，其他的都是用来打发时间，比如“马小跳系列”。《牛虻》很精彩，跟《钢》一样激励读者“在困境中要坚强”，我读后燃起了不少学习动力，以致于后来有段时间，每晚都会做一些数学竞赛题。六年级也是少年对爱情懵懂又开始萌动的时期，但《复活》绝不是一本好的爱情启蒙读物，少年如我读后无端地背上了罪名，走了三年的救赎路。以上三本书便是我小学阶段的阅读全传了，三本黑泥一样厚重的书抹在了最青涩的岁月上，不管怎样总算翻开了书卷。 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:1:0","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["成长"],"content":"科技的蓝天下 初中期间上的是奥赛班，其宗旨是让乡下和小镇的学生在两年半的时间内赶上城市一流学生，紧张的学业和频繁的提前招生模拟考榨干了课余时间，阅读更是被挤到狭缝里。不过初中仅有的一些阅读，让我翻开不一样的人生篇章，弥足珍贵。 几年前，正值 IT 业的浪潮冲到一个高峰，年少的我也被“卷入”其中。初中三年搬过几次教室，好在每次都没有远离过图书室。初一有段时间特别着迷《电脑爱好者》，大概花三四个月的时间看完了二十几期，还用心爱的小笔记本做摘抄。后来又看了些《电脑报》，相比于新闻报道，我更喜欢《电脑爱好者》讲解的软件应用。正是那时候接触到“黑客”，心里尖叫着“简直酷毙了”，恨不得马上去学黑客技术。 有个周末更是心血来潮，让出校的同学去新华书店帮忙带一本关于黑客技术的书，记得书名叫《黑客攻防大师》，同学结账的时候还被店主从上到下审视了一番。假期回家后开始捣鼓《黑》，看了五分之一左右，又翻了一遍附赠光盘，纵使我已经按教程的步骤操作，结果要么卡在某一步上，要么哪里错了，反复几次之后热情便褪去了。想来可惜，一簇小火苗就这样熄灭了，要是被稍微添点油，结局可能会大有不同。 初一末了，电子产品开始流行，最流行的是用来看小说的 MP4，我也买了一个。同学看的最多的是玄幻小说，而我不甘堕落，又耐不住无聊，于是看一些无伤大雅的小说。假期回家还念念不忘 IT，往 MP4 里存了李彦宏的传记《相信中国》和李开复的传记《世界因你而不同》，这两本书都是晚上闷在被窝里看完的。书里大洋彼岸的硅谷被描述成气候宜人的科技城，上演着一个个动人的逐梦故事，让我心驰神往。我还把这种向往写在了周记本里，结果语文老师点评道，“不要想那些不可能的事”。之后，这个梦想就压在心底了，再没跟任何人提起。 初中的那些阅读本已随岁月一起流逝，无意中发现的一叠杂志勾起了一串回忆。 去年暑假回家，在放旧书的房间里发现厚厚一叠的《环球科学》杂志，有 24 本。订阅的那两年，寒暑假回家都能攒到五六本，然后一本本，从封面到背面一页页地读，假期结束之前还会再翻一翻。杂志侧面订书钉旁都裂开了，露出白色纹理，看着挺欣慰的。我是碰上了多大的好运，竟然给了自己如此光辉灿烂的科学启蒙教育。要知道《环球科学》是《Scientific American》独家授权的科普杂志，报道全球最新科学成果以及科技对人类未来商业、文化、伦理和政治等方面的深刻影响。 我翻了几本，心里五味杂陈，这些杂志被冷落的日子，也是科学梦渐渐淡去的日子，面对少年时那颗快要跳出来的好奇心，无比惭愧。几天的失眠紧随而来，那些渴望在枕头里藏了几年又重新跑了出来，一见如故，此刻两个时间结点打通了一条时空隧道。 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:2:0","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["成长"],"content":"顺着气息去寻你 上高中之后，一路上也遇到了不少喜欢读书的小伙伴，先是同桌，受他影响养成了买书读书的习惯，后来又在他的推荐下读了《第三种猩猩》、《自私的基因》等等，把阅读往上提了一个水准；然后是女神，跟着她的脚步看了《看见》、龙应台的三本和《送你一颗子弹》；还有在读了一位同学的作文之后开始喜欢上荷西，于是读了三毛的四本散文。那是时常读到一本感兴趣的书便会顺着这股气息去寻找更多的同类。所谓的气息，总是淡淡的，随风飘荡，几年后再去捕捉，只能找到那些较独特的（还好在豆瓣记录了一些）。 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:0","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["成长"],"content":"毛姆的月亮 初中除了种下科技的种子，也埋了一颗文学的种子。尽管初中课多，老师管得严，一些休闲杂志总能从天罗地网的缝隙间穿进来。像《意林》、《读者》、《格言》等杂志，一篇大概两三页，论其篇幅、价格都适合课上和课间放松娱乐，同学间互相传阅也方便。这种杂志读了不下 30 本，唯独有一篇到现在还记得大概： 一位医学生得到导师推荐去留学，上学途中为了挣船费便在船上当随船医生。船到站，少年没有下船，而是留下来继续做医生。十几年后，曾经不如他的同学都已事业有成，中年的他还是小地方的医生，但奇怪的是他生活虽拮据，目光却清澈无比。 上高中后无意中发现了故事的出处，毛姆的《月亮与六便士》，随着这股气味，还找到很多类似的故事： 毛姆： 刀锋 毛姆短篇小说精选集 其他：德米安 消失的地平线 悉达多 世俗生活，充斥着虚假与谎言，日复一日地束缚着你我，直到把我们送到死亡的那一刻。生命的意义是什么？作为这个星球唯一有智慧的生命，人类，我们如何活出人类的价值而不辜负大自然的恩赐？这些鲜活的故事告诉我，去追求心声，不管选择了什么都努力去实现，不要被世俗的目光击退，勇敢地去追求，只求一个心安。可惜高中的我，刚从乡下来到城里，只觉得世界真大，哪晓得自己喜欢什么。 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:1","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["成长"],"content":"野性的呼唤 大草原上，天地苍茫，牛羊如星点遍布，狼王藏在山头后面，亮出钢锥般的牙，一场围剿和杀戮即将开始。《狼图腾》里的画面依旧能在脑海里重现，紧张激烈的情节，大草原的神秘，颠覆观念的狼故事，作者让我一点点地爱上了狼，爱上了狼的品性，勇敢、强悍、智慧、狡猾、凶残、贪婪、狂妄、野心、雄心、耐性、机敏、警觉、体力、耐力。狼不同于狗，千万年来都未能被人类驯服，狼追求自由，有自己的尊严，为了自由、生存顽强斗争到底。喜欢就想去了解更多，后来又看了三本关于狼的书。 重返狼群 ：现实生活中养狼的纪实 野性的呼唤 ：心在呼唤自由 白牙 ：狼收起獠牙 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:2","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["成长"],"content":"听他讲故事 高中时期一反常态的轻松，一周上五天，五天上白天。作为住宿生，无数个周末，没有特别的活动就会读读书。散文是很好的选择，轻松又有趣味，不同人的不同生活都记录在文字里，等待着你去发现。有时候也可以用学写作的借口去读，像汪曾祺、林清玄、季羡林的散文文笔都挺好的。这些书多是从图书馆借的，只找到当时有在豆瓣记录的一些： 龙应台：目送 亲爱的安德烈 孩子你慢慢来 三毛：撒哈拉的故事 送你一匹马 温柔的夜 梦里花落知多少 其他：文化苦旅 季羡林散文精选 送你一颗子弹 幸福的七种颜色 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:3","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["成长"],"content":"懂一点事 像很多青少年一样，我也会去寻找自己在这颗星球上的位置，去了解我的国家，我生长的土地。可能很小就一个人在语言文化都跟家乡有差异的地方上学的缘故，成长中除了遇到身心问题，还多了一个归属问题。这些问题就像数学竞赛题，有时候挤破头脑也没有半点思路，不得不去书中翻解答，即便有些不能解决，但至少知道了此题超纲。 了解自身： 孤独六讲 生活十讲 蒙田随笔精选 了解周围：城市的胜利 公正 激荡三十年（上） 许倬云说历史：台湾四百年 常识 看见 国家竞争力 浪潮之巅 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:4","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["成长"],"content":"从小说认识社会 了解周围世界另一个途经是读关于它的小说，了解来源于现实的虚拟小说人物。印象最深刻的一本是《国家干部》，暑假在家花了两天半的时间才读完，一是因为它太厚，再是常被主人公感动得两眼汪汪，影响视线。我可能是一个比较反常的 90 后，还有着为人民服务的理想，脑子里还经常构想着区域建设，唉，估计是看过的那些地图集惹的祸。 活着 边城 蛙 穆斯林的葬礼 国家干部 1988：我想和这个世界谈谈 平凡的世界（全三册） 散文中国 黄金时代 围城 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:5","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["成长"],"content":"其他 最后就用一个“其他”来收纳那些零散在历史长河里，扫一眼还能看得见，而且看见了想捡起来瞧瞧的书。 西方小说：因为不喜欢西方贵族生活，所以对很多西方小说提不起兴趣。 老人与海 麦田里的守望者 等待野蛮人 质数的孤独 世界十大文豪 源泉 日本小说：含蓄又色情，不过还是蛮喜欢课本里的《清兵卫与葫芦》 挪威的森林 雪国 历史： 全球通史（第 7 版 上册） 中国近代史 中国大历史 万历十五年 科幻：只记得最经典的了 三体：I II Ⅲ 基地三部曲：基地 第二基地 基地与帝国 一些标示理科生身份的书： 万物简史 上帝掷骰子吗？ 数学之美 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:6","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["成长"],"content":"终身学习 通过贪婪地阅读成为一个终身学习者，培养自己的好奇心，争取每天都变得更聪明一点。——查理·芒格 以上叨叨叨讲了这么多，时间跨度从小学五六年级到大二上（作者现在大三），真要问对我有什么用，我会回答，“这段阅读史让我养成了阅读的习惯，成为一个潜在的终身学习者”。终身学习，不断提高自己，在我们这个充满不确定的时代显得格外重要。未来我们除了跟人类抢饭碗，还要跟机器人抢饭碗，如果不想被机器人追着前进，那最好就是自己养成阅读的习惯，习惯地学习一些分外的知识来充实自己。 怎样养成阅读的习惯，我的建议是先阅读一些自己喜欢的领域，不管跟自己的专业或者工作相不相关。等到当你休息时，也会选择去看本书而不是打游戏或刷剧，你可能会发现阅读是一件一举多得、力量无穷的事情；你之后还会发现一些更高级的阅读方法，像主题阅读、全局认识、卡片笔记等等，你说不定会兴奋地对自己说，“嘿，人生终于要走上正轨了”。 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:4:0","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["成长"],"content":"ChangeLog 2018-05-25 拆分过长段落、删除多余的“的” 2017-04-30 删除主题阅读、增加结尾 2017-04-05 增加 统计学、如何学习 2017-02-06 初稿 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:5:0","tags":["阅读"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["阅读"],"content":"此书全名是《金字塔原理，思考、写作和解决问题的逻辑》，书名看似高大上，小编也是被它忽悠了。正如书名 XXX 原理一样，书的内容也很枯燥无味，小编强打着精神把前三篇看完了，希望能在这本极负盛名的书中能再发现一点金子（最后一篇是讲形式上的金字塔结构，不如一般的设计书介绍的好）。虽然书中的例子需要背景知识，方法需要不断的练习，但全书的内容可以分为思维、写作和解决问题三块，用一张纸就可以讲明白。 ","date":"2016-09-11","objectID":"/2016-09-11-minto-pyramid-principle/:0:0","tags":["笛卡尔信徒"],"title":"明托金字塔原理","uri":"/2016-09-11-minto-pyramid-principle/"},{"categories":["阅读"],"content":"思维 书中介绍的在金字塔原理下形成的思维方式，实际上就是小编认为在自然情况下最容易形成的一种思维方式，也是最容易接受的一种思维方式，说白了就是总分结构的思维方式。可能有些人已经养成了这种思维习惯，那无需再阅读了；有些人有时候会无意识地运用这种思维方式但有时又懒于归纳整理，需要明确一下遵从金字塔原理的思维方式。 小编阅读之后最先意识到的是这种思维方式有助于记忆。书中提到人类记忆平行条目的极限为 7±2，也就是说一般人很难记住接连六七条的内容。利用金字塔原理可以将过于繁多的条目进行归纳分类，使得每一母条目下的子条目不超过四到五个，且平行条目之间按照一定的顺序排列。 母条目和子条目之间具有逻辑关系，子条目或是通过演绎（子条目为一系列推理）得出母条目，或是通过归纳（将相似的思维观点或相关的行动组织在一起）得出母条目，通常来说归纳比演绎更利于读者理解。平行条目之间需要按照一定的顺序排列，一般有时间流程顺序、结构关系顺序和重要性顺序。 ","date":"2016-09-11","objectID":"/2016-09-11-minto-pyramid-principle/:1:0","tags":["笛卡尔信徒"],"title":"明托金字塔原理","uri":"/2016-09-11-minto-pyramid-principle/"},{"categories":["阅读"],"content":"写作 本书写作部分的原理与思维部分大同小异。为了让读者理解，最好先告诉读者一个概括性的结论，然后再有规律地分条详细说明，既金字塔结构。 值得一提的是写作部分的序言，本书介绍了一种包含情境、冲突、问题和答案四部分的写法。在序言部分，作者需要说明有关主题的情境，将读者的注意力吸引到文章中来，冲突由情境发展而来，让读者自然而然地提出问题，然后给出作者自己的答案，吸引读者继续阅读。当然这四部分可以根据个人的习惯组合。 而文章的主体部分，即分条详细说明的部分，需要作者独到的见解，让读者眼前一亮。 ","date":"2016-09-11","objectID":"/2016-09-11-minto-pyramid-principle/:2:0","tags":["笛卡尔信徒"],"title":"明托金字塔原理","uri":"/2016-09-11-minto-pyramid-principle/"},{"categories":["阅读"],"content":"解决问题 解决问题首先要界定问题，也就是问题是什么。可以根据以下界定问题的框架确定问题 非期望结果是什么？ 期望结果是什么？ 解决方案是什么？如何执行？ 解决方案不可行要怎么做？ 可行的解决方案中最优的方案是什么？ 至于如何解决问题需要具体问题具体分析，书中提到了结构化分析的方法。结构化分析方法给出一组帮助系统分析人员产生功能规约的原理与技术。它一般利用图形表达用户需求，使用的手段主要有数据流图、数据字典、结构化语言、判定表以及判定树等，读者可以自行查阅。 ","date":"2016-09-11","objectID":"/2016-09-11-minto-pyramid-principle/:3:0","tags":["笛卡尔信徒"],"title":"明托金字塔原理","uri":"/2016-09-11-minto-pyramid-principle/"},{"categories":["阅读"],"content":"ChangeLog 2016-09-11 初稿 ","date":"2016-09-11","objectID":"/2016-09-11-minto-pyramid-principle/:4:0","tags":["笛卡尔信徒"],"title":"明托金字塔原理","uri":"/2016-09-11-minto-pyramid-principle/"},{"categories":["阅读"],"content":"万历十五年，平平淡淡，毫不起眼的一年，却为最后一个汉人统治王朝的衰败拉开了序幕。 本书共七章，大致可以分为三部分：皇帝、首辅和突出人物。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:0:0","tags":["历史"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["阅读"],"content":"万历皇帝 从小接受正规的太学教育，以冯保和张居正为主要老师，学习经史、礼仪。九岁登基，可以说是完全在文官体制中长大。成年后，万历皇帝励精图治，想有一番作为，但几次与文官对抗之后，失望不已，自己家事被臣子们粗暴干预，也厌倦了在各种典礼上充当木偶，于是怠政三十多年，使明王朝再无可能复兴。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:1:0","tags":["历史"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["阅读"],"content":"首辅 万历皇帝的第一任首辅是他的老师张居正。张居正一心想重整赋税，丈量全国田地。虽反对者众多，但以他的名望和权利，也许可能改革成功。天不随人愿，改革刚开始，他便抱恨终天了。 后一位首辅是申时行，善于调和君臣矛盾，使君臣相妥协。他深知帝国有一个特点：一项政策能否付诸实施及成败，全靠看它与所有文官共同的习惯是否相安勿扰，否则理论上再完美也不过是空中楼阁，国家最大的问题就是文官。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:2:0","tags":["历史"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["阅读"],"content":"文官 为文官者，通常是父祖节衣缩食，寡母自我牺牲，贤妻茹苦含辛，外加个人的聪明和努力而来。 根据家族背景和个人财富欲望，分别可以分为两种：家境贫寒和富裕、用贪和不用贪。按照向揽财致富的社会风气投降程度可分为：大多数在似合法又似非法的灰色地带取得部分额外收入，即保持生活水平又无损于情操；有相当数量的文官搜刮自肥，声名狼藉；有一部分则极端清高自负，一介不苟取于人。 文官如此划归，造成了文官之间的不能和谐，“乡谊”、“年谊”、“姻谊”等小团体又加剧了这种不和谐。文官虽自称公仆，实系主人，又阴又阳。帝国不是以法律治理天下臣民，而是以“四书”中的伦理道德作为主宰，即便贵为皇帝，其全部言行也都要符合道德规范，而解释权却分属文官。 治国关键不是去解决繁琐问题，而是防止坏事发生。有时文官会以正直作为商品，骗取声望。技术上的争端，一经发展，就可以升级扩大为道德问题，胜利者及失败者也就相应被认为至善或极恶。张居正自信过度，不肯对事实做必要的让步，太理想，不理会官场的阴，死后惨招文官讨伐。张一案结束之后，张欣赏的官员下贬，张不喜欢的官员升迁。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:3:0","tags":["历史"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["阅读"],"content":"突出人物 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:4:0","tags":["历史"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["阅读"],"content":"古怪模范官僚——海瑞 海瑞奉行传统儒家道德，是当时全国模范官员，但终没看透官场的阴阳之道，履任现职，一身抱负无法施展。文官个体在文官群体中的力量微不足道，不能改变整个体制。海瑞不认为治国的根本大计，是在上层悬挂一个抽象的至善至美的道德标准，而责成下面的人在可能范围内照办，行不通就打折扣。海瑞尊重法律，按照规定的最高限度执行，体现了有教养的读书人，服务于公众而牺牲自我的精神。君子何以有志于做官：无非出于恻隐和义愤。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:4:1","tags":["历史"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["阅读"],"content":"孤独将领——戚继光 将领在明朝地位极低。其着眼于取得实效而不避极端：冲锋陷阵，要求集中全力，对敌人的重点作猛烈打击；退守防御，考虑的是地形险要和工事完善，如不可守就断然放弃；战斗胜利，就一心扩张战果，不为其他问题犹豫。他们把自己和部下的生命视为赌场筹码，必要时孤注一掷。而大多数文官则以中庸之道为处世原则，标榜稳健和平。 武人退役后又会与社会格格不入，人们重视安详的仪表，华丽的文辞，口若悬河的辩才，以及圆通无碍的机智，武人所培养的是严格和精确，在和平社会无用武之地。 戚继光和谭纶、张居正的关系密切，使他有机会施展才华，在蓟州任总兵十五年间，初步形成自己的战术——鸳鸯阵。但由于张居正一案，他只能告老还乡，从此明王朝错过了强兵抵御外敌的最后机会。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:4:2","tags":["历史"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["阅读"],"content":"自相冲突哲学家——李贽 李贽继承心学主张，试图改革儒家学说，如成功可以为我中华点亮一丝人性解放的光芒。可惜他终不敌保守的腐朽众儒，被捕入狱，自尽而亡。李贽一生承受着家族责任带来的压力，仕途不顺，有段时间还靠救济度日，可悲可叹。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:4:3","tags":["历史"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["阅读"],"content":"制度的得利益者 明王朝以「仁」治天下的立国精神已耗尽了生命力，作者认为，单纯以意识形态约束子民，用道德代替法律的制度，不但将庞大帝国拽入深渊，还使改革者身败名裂、壮志未酬。而在下认为，以当时生产力水平，法律即使完备，其效果未必胜过约法三章。而意识形态的强化，是既得利益者，即文官群体，逐渐巩固自身利益的结果。 每个制度都会有其得利群体，明朝的得利群体是文官群体。文官群体会为了维护自身和家族利益出卖国家和皇家利益，少数逆潮流者改变不了时局。拥有至高个体权利的皇帝，也只能搬出太监去与文官抗衡，能打破这一系统的却是清兵入关。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:5:0","tags":["历史"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["阅读"],"content":"ChangeLog 2016-02-16 初稿 2019-07-13 润笔 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:6:0","tags":["历史"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"}]