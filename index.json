[{"categories":["learning"],"content":"这篇文章是《人格解码》的读书笔记，讲述了一种形成人格全景的实践策略。可能有部分读者跟在下一样，容易在闲言碎语的公共场合感到尴尬，无所适从，该书提供的一个可供诸位在聚会上消磨时光的游戏--捕捉酒杯后面众生的人格全景。","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"作者塞缪尔·巴伦德斯（Samuel Barondes），生于 1933 年，是美国神经病专家、神经科学家，加州大学（旧金山）心理学教授，美国科学院医学院士、美国艺术与科学研究院院士。巴伦德斯主要研究分子神经病学（molecular psychiatry），曾发表过 200 多篇论文，H 指数高达 80+。著有通俗读物《人格解码》、《分子和心理疾病》、《情绪基因》、《胜过百忧解》等。 巴伦德斯学术功底深厚，轻而易举把大五人格整合到日常实践中，通俗好懂易操作。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:0:0","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"大五人格特质 上世纪八十年代，美国人格心理学家刘易斯·格登伯格（Lewis R. Goldberg），曾极力公开支持词汇假设（lexical hypothesis），即任何重要文化人格特质都将以该文化的语言表达出来。格登伯格将八十年代早期心理学家归纳，描述人格的词汇的五个大类，称为「大五人格特质（Big Five personality traits）」。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:1:0","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"一 大五人格特质，又称大五性格模型（The Five Model，FFM），是现代心理学中描述最高组织层次的五个方面的人格特质。五类人格特质包括外向性（extraversion，E）、宜人性（agreeableness，A）、责任心（conscientiousness，C）、神经质（neuroticism，N）和开放性（openness，O），简称 OCEAN。从个人性格发展角度上来说，「大五人格」在进入职场后大约四年趋于稳定，即使经历重大人生事件，成人的性格特质也不会发生太大变化。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:1:1","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"二 在最初 1985 年设计的 NEO PI 人格量表基础上，美国人格心理学家罗伯特·麦克雷（Robert McCrae）与保罗·考斯塔（Paul Costa）一同研发出了 NEO PI-R（Revised NEO Personality Inventory） 人格量表。该问卷采用短句，从而消除了单个词汇所隐含的歧义；问卷对大五人格中的每个维度进行测量，把每个维度（domain）分为六个层面（facet），深入到具体的性格差异。NEO PI-R 在跨年龄、跨文化，以及采用不同测量方法都是有效的。 结合不同版本 NEO PI-R 的表述方式，大五人格的六个层面可以归纳为： 外向性 热心、友谊（容易交朋友） 爱交际（喜欢与其他人为伴） 自信心（喜欢担当） 有活力（喜欢忙碌） 寻求刺激（喜欢刺激） 积极的情绪、愉悦感（很容易感到开心） 宜人性 信任（认为人们都是好心的） 坦率、道德感（直率，避免欺骗） 利他性（觉得帮助他人很有价值，不剥削他人） 顺从、合作（喜欢协商而不是对立） 谦虚（不吹嘘） 温和、同情心（善良，富有同情心） 责任心 胜任感、自我效能（能做出成就） 秩序感、规矩（很有条理，制定计划） 责任感（十分可靠） 努力追求成就（为卓越而努力工作） 自律（有意志力） 深思熟虑、谨慎（花时间做决策） 神经质 焦虑（容易感到害怕） 充满敌意（容易怨恨） 抑郁（容易沮丧、悲观） 忸怩不自然（因为害怕被拒绝而害羞） 冲动、缺乏思考（不易抑制冲动） 脆弱（因压力而失去平衡） 开放性 幻想、想象力（竭力想创造一个更为有趣的世界） 审美、艺术兴趣（喜欢艺术和自然的美） 情感、情绪（能意识到自己的情感） 行动、冒险性（渴望尝试新活动） 思想、智力（喜欢思考） 价值观、自由主义（常常挑战传统） 五个维度更易察觉，而三十个层面更有质感，可以从上到下，先凭直观感受判断维度值高低，再进入层面捕捉突出的特点，并以事例佐证，形成更精确的判断；反之五个维度更简洁抽象，可以从下往上，将层面的得分累加到各维度，形成一个简化版的人格图景。 这里有一个免费的 IPIP NEO-PI 测试，包括 300 题完整测试和 60 题简易测试，由宾夕法尼亚大学的 John Johnson 教授维护。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:1:2","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"十大人格类型 日常生活中，人们会用一些词汇方便地总结了某些显著的人格特点，例如交际花形容擅长交际性格外向的人。心理治疗师意识到这些富有感染力的词汇非常有用，于是总结出了十个特别有用的词汇，即十大人格类型（Top Ten Personality Type）。 《美国心理治疗协会诊断和统计分析手册》（DSM-IV）简述十大人格类型如下： 反社会型：不尊重他人且侵犯他人权益 回避型：社交回避，有自卑感，对负面评价高度敏感 边缘型：人际关系、自我形象及情绪都不稳定，非常易冲动 强迫症：过分追求条理、完美主义和控制感 依赖型：过分需要被照顾，顺从和依附他人 表演型：过分寻求情感和关注 自恋型：夸夸其谈，需要他人赞赏，缺乏同理心 妄想型：不信任、怀疑，恶意曲解他人目的 分裂样型：远离任何社交关系，情绪表达受限 分裂型：对亲密关系感到非常不舒服，认知或观念扭曲，行为乖张 分析他人的人格时，先凭直觉将其归为十大人格类型之一，或者根据其外号和对其的评价判断可能人格特质，再由此思考大五人格特质，这样比没有假设单纯对照大五人格的三十六个层面更有效。 例如，一些只想做自己，对社交不感兴趣，不在乎别人怎么想，缺乏性欲，唯一想的是实现梦想，外向性低可能属于分裂样型或分裂型，但根据其不厌恶别人、不会焦虑的特点，可判断他属于分裂样型。基于分裂样型假设，可找到观察的重心，例如分裂样型的人容易患抑郁症，可能难以获得积极情绪。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:2:0","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"性格形成 性格多样性有其深层根源，既受限于基因，又受后天环境影响。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:3:0","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"一 性格不是通常认为的，有些性格是好的，有些性格是坏的，例如高宜人性是好的，高神经质是坏的。 环境随进化过程不断变化，人类彼此竞争，相同竞争策略在不同环境下有得有失。这一过程会选择适应不同条件的基因变异（其中包含影响人格的基因变异），决定不同人格的基因在环境变迁中积累，达成一个个稳态。 例如，在外向性上得分高的人喜欢和他人密切交往，喜欢有机会担任要职，容易获得性伴侣；但太过密切的关系会带来相应的风险，担当要职会招致嫉妒和反叛，高刺激寻求会更容易发生事故，牵扯进犯罪。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:3:1","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"二 既然人格受限于基因，许多人格特质与生俱来，成年后也很难改变。 例如，属于分裂样型的人，情绪表达受限，在他家族中通常能找到相似人格特质的人。 又如，杰洛米·卡根的系列研究发现，儿童 2 岁和 7 岁时不愿意与不熟悉的人接触，成年后大部分仍然不愿意与不熟悉的人接触。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:3:2","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"三 即使基因一模一样的同卵双胞胎，基因表达也不同。例如，大脑神经网络就有巨大差异。 人类大脑不像其他组织一样，每个细胞在组织内有确定的位置。受精卵分裂时，会产生很多原始的神经元，他们通过启动和关闭特定的基因，选择性的对一些化学信号作出反应，在化学信号的指引下，游移到指定的地方。这些神经元到达目的地后，就开始与其他神经元建立联结，形成神经回路和神经网络。神经回路的成熟，并不是靠形成新的联结，而是用进废退，这一情况大多发生在胎儿期和出生后最初几年，少数发生在成年之前。 人格虽源于基因，但仍能够做有限的改变，尤其是成年前的经历对一个人的人格有很大的影响。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:3:3","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"美德 由克里斯托弗·皮特森和马丁·塞利格曼为首的一小群心理学家，反对高登·奥尔波特坚持用一种完全描述性的方式去使用人格（无视品质好坏），在一项针对东西方主要宗教和哲学传统进行的研究中发现，人们对很多优秀品格存在普遍的认同和赞许，所有文化都高度认同的优点可归纳为六大类： 节制，诸如自我控制和节俭的优点 勇气，勇敢和坚持的优点，面对内外阻碍时有助于实现目标 人道，善良和爱的优点，关爱他人，友善待人 正义，公正和公民意识，有助于集体生活 智慧，开放的心态，热爱学习，有助于知识的获取和运用 超越，敬畏和精神力量，有助于与宇宙相连，提供生命意义 心理医生罗伯特·克洛宁格对此有自己的分类： 自我指向性：指对自我的控制，使自己成为一个有目的、有责任、有很多资源的人，与节制和勇气相重叠 合作性：指有同理心、怜悯心和原则性，有助于和他人建立互惠关系，与人道和正义相重叠 自我超越性：指意识到你是宇宙的一部分，是精神、智慧和理想的综合体，与智慧和超越相重叠 人类往往不满足于「真」，喜欢把他人绑上善恶的标签。为避免自身偏见影响评价他人品质，可以对照六大美德判断他人的品质。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:4:0","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"个人神话 虽然借助大五人格模型、十大人格类型、六大美德等工具，可以获得他人格特征，但是这些只是数据，记不住，用不上。此时，便需要故事来充实他的人格全景。 心理学家丹·麦克亚，给「人们所构建的关于自己是谁的个人神话」一个术语，即人格同一性（identity），包括关于过去的想法和对未来的希望等。关注他人的同一性，聆听他人讲述自己的故事，容易产生同理心，会促使你思考在他的境况下自己会成为怎样的人，有助于澄清对其品格所做的判断。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:5:0","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"人格全景 巴伦德斯在全书的末尾梳理了一套形成人格全景的实践策略： 记住人类共同的人性和人格发展的共同方式 形成一个大五人格轮廓，并注意那些明显的特质 寻找潜在的人格问题类型 运用普适标准和文化标准进行道德评价 聆听他人的故事，并将此与你所观察到的现象联系起来 整合你发现的所有信息 最后，希望这个实践策略能够为你添加社交佐料，让你不再厌恶社交聚会，在人世间遇见更多精彩的个体。 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:6:0","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"参考 人格解码 (豆瓣) Samuel Barondes | UCSF Profiles Samuel Barondes - Google Scholar Citations 五大性格特质 - 维基百科，自由的百科全书 Revised NEO Personality Inventory - Wikipedia ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:7:0","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"ChangeLog 2019-07-27 初稿 ","date":"2019-07-27","objectID":"/2019-07-27-decoding-personality-mysteries/:8:0","tags":["读书","心理学","实践策略"],"title":"如何形成人格全景？","uri":"/2019-07-27-decoding-personality-mysteries/"},{"categories":["learning"],"content":"这篇文章是《众病之王—癌症传》的读书笔记，讲述癌症往事、治疗与预防。","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":" 你是谁，你来自何方？ 我来自于你，我是另一个你。 我是我，你怎么会是我？ 我是你的突变体，你们称之为「扭曲态」。 你为何会出现？ 一切事物都有偏差，我是你犯下的错误。 难道没办法避免错误吗？ 除了死亡，任何人都逃不脱这一宿命。 那你的宿命呢？ 我的宿命是你，你活下来是我唯一的希望。 会有一天，我能一直活下去吗？ 不排除可能，但那一天，你已不再是你，可能是我，可能是其他，也可能成了神。 — By 夜航星 本书作者悉达多·穆克吉（Siddhartha Mukherjee），是印度裔美籍肿瘤医生、生物学家，主要研究癌细胞的生理机制、白血病的免疫疗法和骨骼-软组织形成干细胞。此外，他还是科普作家，著有《众病之王》、《基因传》等，其中《众病之王》获得 2011 年非虚构类普利策奖。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:0:0","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":"癌症往事 医学行业知道癌症已经 3000 多年，直到近两个世纪，随着孟德尔、沃森、克里克等人逐步揭开基因秘密，人类才知晓癌症起于何处，有了治疗特定癌症的方法。《众病之王》讲述了癌症千百年的历史，从引发人类恐惧并被赋予其邪恶隐喻的黑胆汁，到二十一世纪作为人类日常生活一部分的癌症。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:1:0","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":"不明所由 中世纪，约翰尼斯·史卡尔提特斯（Johannes Scultetus），记述了一种乳房切除术—用火、酸和皮革绑缚来做外科乳腺癌移除。这一类最原始的攻击癌症方法，在二十世纪之前，一直是治疗癌症的唯一选择，只是器材变先进，手法变高超，切除范围变得更肆无忌惮而已。 直到 1947 年，西德尼·法伯发现了一种叶酸类似物氨基蝶呤，能够（通过阻断细胞代谢）杀死骨髓中快速增殖的细胞。他利用氨基蝶呤实现了急性淋巴细胞白血病的短暂缓解，开启了化疗在癌症治疗中的应用。在此基础上，埃米尔·弗雷、埃米尔·弗雷瑞克等人开创了细胞毒性药物组合化疗，结合使用 6-巯基嘌呤和甲氨蝶呤部分或者全面地缓解症状，并且延长急性白血病患者的寿命。 之后，放疗作为一种能够替代外科手术的治疗手段出现，用于消灭局部癌症。亨利·卡普兰（Henry Kaplan）率先用放疗治愈了霍奇金氏病，将放疗引入到淋巴癌治疗。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:1:1","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":"扭曲的基因 随着生物学家逐步揭开基因真相，癌症理论开始形成。哈罗德·瓦缪斯（Harold Elliot Varmus）和迈克尔·毕晓普（Harold Elliot Varmus）共同发现癌症不由外源性病毒引起，而通过激活（所有正常细胞都含有的）内源性前体基因而引起，一同获得 1989 年诺贝尔生理学或医学奖。该发现为癌症的早期检测改进，疗效预测，以及靶标疗法的发展等提供了全新的策略。 正如，牛顿以对万有引力的理解，预言了 1758 年哈雷彗星的返回。瓦缪斯和毕晓普提出的癌变学说（即致癌基因的前体（原癌基因）存在于所有的正常细胞中，并在劳斯肉瘤病毒里找到了 src 原癌基因），也做了一次冒险性预测（risky prediction）— 原癌基因的突变体一定存在于癌细胞中。罗伯特·温伯格等人分别从癌细胞中发现了 Ras（Ras subfamily） 基因（正常细胞都有）的突变体，正如瓦缪斯和毕晓普所预测，Ras 基因在癌细胞中发生突变，尔后编码出的突变体蛋白，不可遏制地产生一种信号促使细胞持续分裂。之后，罗伯特等人又发现了肿瘤抑制基因 Rb1（Retinoblastoma gene）。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:1:2","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":"世纪之交 罗伯特·温伯格和道格拉斯·哈纳汉，于 2000 年 1 月发表了《癌症的标志》，标志着癌症研究在二十世纪一整个世纪的发展之后，峰回路转，回到「单一病因」的观念。该文将上百种不同类型和亚类型肿瘤的核心行为，归纳为以下六种核心机能的不同组合变换形式： 生长信号的自给自足：由于致癌基因，例如 ras 或 myc 的活化，导致癌细胞获得了自主增殖（病理性有丝分裂）的能力。 对抑制生长（抗增长）信号的不敏感性：癌细胞可以使肿瘤抑制基因失活，如成视网膜细胞瘤（Rb），通常能抑制生长。 逃避细胞程序性死亡（细胞凋亡）：癌细胞能抑制和灭活引起细胞正常死亡的基因和通路。 无限的复制潜力：癌细胞能激活特异性的基因通路，使它们代代增长永远不死。 持续的血管新生：癌细胞通过肿瘤血管新生获得了从血液和血管里自给自足的能力。 组织浸润和转移：癌细胞具有转移到其他器官、侵入其他组织并占据这些器官的能力，因此它们可以蔓延到身体各处。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:1:3","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":"带着癌症老去 农业生产力提升减少了饥饿和营养不良，疫苗发明让天花退出了历史，抗生素迎头痛击细菌，癌症在人类杀手排行榜上一路向前冲。全球每年约 800 万人死于癌症，我国居民医生罹患癌症概率为 22%，癌症成了许多人生活的一部分。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:2:0","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":"癌症治疗 根据癌细胞的弱点和癌症病例，主要疗法可归纳为六类。 两类传统疗法 大多数癌症在系统性扩散之前源于局部性疾病，外科手术和放疗可将癌细胞彻底消灭，激素可使发病器官萎缩。 某些癌细胞快速增长，药物可以此为标靶。 例如，叶酸拮抗剂（如法伯的氨基喋呤）干扰叶酸代谢，剥夺所有细胞分裂所需的某种重要营养；氮芥、顺铂与 DNA 发生化学反应，致使 DNA 受损的细胞不能复制自己的基因，从而不能分裂；长春新碱（长春花毒）阻挠细胞分裂所需的架构「分子脚手架」的能力。 缺点是细胞毒素同样会攻击正常细胞，负作用难以承受。 四类新疗法 原癌基因和肿瘤抑制基因通常位于细胞信号通路的中枢。癌细胞之所以分裂和生长，是因为它们受驱于这些关键通路发出的「高度活跃」或「不活跃」的信号。这些通路在正常细胞中也存在，但是被严格地管控，潜在的肿瘤细胞依赖于这种永久激活的通路。 例如，赫赛丁（Herceptin）作为 Her-2 的抗体，能够结合癌细胞表面的 Her-2 ，从而清除致癌基因过度活跃的信号，阻碍癌细胞生长，适用于 Her-2 阳性的癌症患者。 另外，通过癌细胞基因测序，发现许多癌症中突变的核心通路有 13 条，可针对这些核心通路开发药物，而不去管「乘客」突变。 突变、选择和生存不断地循环，创造出在生长失控之外又获得了其他额外特征的癌细胞。这些特征包括抗拒死亡的信号、全身性转移以及刺激血管生长。这些「癌症标志」并不是癌细胞的发明创造，而是由与身体正常生理类似的败坏过程衍生而来的，癌细胞征用并依赖这些过程。 例如，格列卫能够滑入 Bcr-ab1 蛋白分子中央的一个窄小的楔形裂隙中，从而阻止癌细胞生殖。 利用免疫系统在特定种类癌症中的作用。 例如，治疗晚期黑素瘤的药物 Pembrolizumab，这种单克隆抗体可以阻断免疫细胞上 PD1 蛋白的活性，增强了针对于癌症的免疫活性。 癌细胞微环境的作用，特定的癌细胞只入侵特定的组织。通过破坏癌细胞「避风港」，可减弱癌细胞的抗药能力。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:2:1","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":"治与不治 一些有明显弱点的癌症，如乳腺癌、慢性粒细胞白血病、霍奇金病和多数早期局部癌症，已经有了有效疗法。但晚期转移癌症，如转移性 Her-2 阴性乳腺癌和转移性胰腺癌，或者无法进行外科手术的癌症，如胆囊癌，目前疗效与 3000 年前没多少差别，癌症依旧是人类心口的刺。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:2:2","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":"提防死神 患有癌症，即使疗效好的癌症，也是可怕的经历。其一，治疗期也长达好几个月，甚至一辈子；其二，治愈后，病人还要多次复查；其三，未必那么幸运能够治愈。因此，即便逃不脱统计学概率，即便终究会因老而死，仍然有必要预防以降低非系统性风险。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:3:0","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":"致癌物清单 中国食品药品检定研究院安全评价研究所，根据世界卫生组织国际癌症研究机构 2017 年 10 月 27 日公布的致癌物清单进行的初步整理，将致癌物分为四个等级： 1 类致癌物：对人为确定致癌物。 2 类致癌物 2A 类致癌物：对人很可能致癌，此类致癌物对人致癌性证据有限，对实验动物致癌性证据充分。 2B 类致癌物：对人可能致癌，此类致癌物对人致癌性证据有限，对实验动物致癌性证据并不充分；或对人类致癌性证据不足，对实验动物致癌性证据充分。 3 类致癌物：对人类致癌性可疑，尚无充分的人体或动物数据。 4 类致癌物：对人类很可能不致癌。 其中 1 类致癌物清单（共 120 种）： 序号 英文名称 中文名称 时间（年） 1 Acetaldehyde associated with consumption of alcoholic beverages 与酒精饮料摄入有关的乙醛 2012 2 “Acheson process, occupational exposure associated with” 与职业暴露有关的艾其逊法（用电弧炉制碳化矽） 2017 3 “Acid mists, strong inorganic” 强无机酸雾 2012 4 Aflatoxins 黄曲霉毒素 2012 5 Alcoholic beverages 含酒精饮料 2012 6 Aluminium production 铝生产 2012 7 4-Aminobiphenyl 4-氨基联苯 2012 8 Areca nut 槟榔果 2012 9 Aristolochic acid 马兜铃酸 2012 10 “Aristolochic acid, plants containing” 含马兜铃酸的植物 2012 11 Arsenic and inorganic arsenic compounds 砷和无机砷化合物 2012 12 “Asbestos (all forms, including actinolite, amosite, anthophyllite, chrysotile, crocidolite, tremolite)” 石棉（各种形式，包括阳起石、铁石绵、直闪石、温石棉、青石棉、透闪石） 2012 13 Auramine production 金胺生产 2012 14 Azathioprine 硫唑嘌呤 2012 15 Benzene 苯 In prep. 16 Benzidine 联苯胺 2012 17 “Benzidine, dyes metabolized to” 染料代谢产生的联苯胺 2012 18 Benzo[ a ]pyrene 苯并[a]芘 2012 19 Beryllium and beryllium compounds 铍和铍化合物 2012 20 Betel quid with tobacco 含烟草的槟榔嚼块 2012 21 Betel quid without tobacco 不含烟草的槟榔嚼块 2012 22 Bis(chloromethyl)ether; chloromethyl methyl ether (technical-grade) 双（氯甲基）醚；氯甲基甲基醚（工业级） 2012 23 Busulfan 白消安 2012 24 “1,3-Butadiene” “1,3-丁二烯” 2012 25 Cadmium and cadmium compounds 镉及镉化合物 2012 26 Chlorambucil 苯丁酸氮芥 2012 27 Chlornaphazine 萘氮芥 2012 28 Chromium (VI) compounds 铬(6 价)化合物 2012 29 Clonorchis sinensis (infection with) 华支睾吸虫（感染） 2012 30 Coal gasification 煤炭气化 2012 31 “Coal, indoor emissions from household combustion of” 家庭烧煤室内排放 2012 32 Coal-tar distillation 煤焦油蒸馏 2012 33 Coal-tar pitch 煤焦油沥青 2012 34 Coke production 焦炭生产 2012 35 Cyclophosphamide 环磷酰胺 2012 36 Cyclosporine 环孢菌素 2012 37 “1,2-Dichloropropane” “1,2-二氯丙烷” 2017 38 Diethylstilbestrol 己烯雌酚 2012 39 “Engine exhaust, diesel” 柴油发动机排气 2014 40 Epstein-Barr virus 爱泼斯坦-巴尔病毒 2012 41 Erionite 毛沸石 2012 42 “Estrogen therapy, postmenopausal” 绝经后雌激素治疗 2012 43 Estrogen-progestogen menopausal therapy (combined) 雌激素-孕激素更年期治疗（合用） 2012 44 Estrogen-progestogen oral contraceptives (combined) 雌激素-孕激素口服避孕药（合用） 2012 45 Ethanol in alcoholic beverages 含酒精饮料中的乙醇 2012 46 Ethylene oxide 环氧乙烷 2012 47 Etoposide 依托泊苷 2012 48 Etoposide in combination with cisplatin and bleomycin 依托泊苷与顺铂和博来霉素合用 2012 49 “Fission products, including strontium-90” 裂变产物，包括锶- 90 2012 50 Fluoro-edenite fibrous amphibole 氟代-浅闪石纤维状角闪石 2017 51 Formaldehyde 甲醛 2012 52 Haematite mining (underground) 赤铁矿开采（地下） 2012 53 Helicobacter pylori(infection with) 幽门螺杆菌（感染） 2012 54 Hepatitis B virus (chronic infection with) 乙型肝炎病毒（慢性感染） 2012 55 Hepatitis C virus (chronic infection with) 丙型肝炎病毒（慢性感染） 2012 56 Human immunodeficiency virus type 1 (infection with) 人免疫缺陷病毒 I 型（感染） 2012 57 “Human papillomavirus types 16,18,31,33,35,39,45,51,52,56,58,59” 人乳头瘤病毒 16，18，31，33，35，39，45，51，52，56，58，59 型 2012 58 Human T-cell lymphotropic virus type I 人嗜 T 淋巴细胞病毒 I 型 2012 59 Ionizing radiation (all types) 电离辐射（所有类型） 2012 60 Iron and steel founding (occupational exposure during) 钢铁铸造（职业暴露） 2012 61 Isopropyl alcohol manufacture using strong acids 使用强酸生产异丙醇 2012 62 Kaposi sarcoma herpesvirus 卡波氏肉瘤疱疹病毒 2012 63 Leather dust 皮革粉末 2012 64 Lindane (see also Hexachlorocyclohexanes) 林丹（参见六氯环己烷） In prep. 65 Magenta production 品红生产 2012 66 Melphalan 美法仑 2012 67 Methoxsalen (8-methoxypsoralen) plus ultraviolet A radiation 花椒毒素（8-甲氧基补骨脂素）伴紫外线 A 辐射 2012 68 “4,4’-Methylenebis(2-chloroaniline) (MOCA)” “4,4’-亚甲基二（2-氯苯胺）（MOCA）” 2012 69 “Mineral oils, untreated or mildly treated” 未经处理或轻度处理矿物油 2012 70 MOPP and other combined chemotherapy including alkylating agents MOPP（氮芥、长春新碱、甲基苄肼、强的松）及其他含烷化剂的联合化疗 2012 71 2-Naphthylamine 2-萘胺 2012 72 Neutron radiation 中子辐射 2012 73 Nickel compounds 镍化合物 2012 74 N’-Nitrosonornicotine (NNN) and 4-(N-Nitrosomethylamino)-1-(3-pyridyl)-1-butanone (NNK) N’-亚硝基降烟碱（NNN）和 4-（N-甲基亚硝胺","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:3:1","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":"防癌最小行动 针对日常容易遇见的致癌物，例如，酒精饮料、槟榔、加工过的肉类、中式咸鱼、烧煤、吸烟、汽车尾气、室外空气污染、含颗粒物的室外空气污染、二手烟草烟雾、焊接烟尘、木尘、太阳辐射，制定以下几项最小行动。 饮食 如果去超市、小店买零食，那么不要把啤酒、RIO、槟榔、酱肉、香肠、牛肉干带出来。 如果和朋友去聚会，那么要坚决少喝酒，以 300 ml 啤酒为上限，且不喝其他酒精度更高的酒。 如果去食堂、快餐店或者其他餐饮店吃饭，那么不要点香肠、培根、咸鱼，而是点新鲜的鱼肉蛋奶作为蛋白质来源。 燃料、烟与尘 如果回家路上遇见烧烤摊，或者出去吃饭，那么不要去买烧烤，真想吃，就买个榴莲过瘾。 如果路上遇见烟尘很大的地方或者有人吸烟的地方，那么快速离开这个地方。 如果上下班路上经过汽车拥堵的大马路或者空气污染严重，那么买一个能减轻汽车尾气和空污影响的口罩，带上口罩走路。 辐射 如果太阳很大的天要出门，那么带上鸭舌帽。 如果遇见辐射标志，那么快速离开附近。 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:3:2","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":"参考 众病之王 (豆瓣) 世界卫生组织国际癌症研究机构致癌物清单 250 年抗击癌症中的里程碑式进展- 北京大学肿瘤医院 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:4:0","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["learning"],"content":"ChangeLog 2019-07-17 补充开头的诗 2019-07-15 初稿 ","date":"2019-07-15","objectID":"/2019-07-15-cancer-history/:5:0","tags":["读书","健康","行动清单"],"title":"一窥癌症：人类扭曲态","uri":"/2019-07-15-cancer-history/"},{"categories":["tech"],"content":"REST framework 仓库：encode/django-rest-framework: Web APIs for Django. ⚡️ REST framework 文档：Django REST framework 中文文档 引入 REST framework：pip install djangorestframework ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:0:0","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"序列化 开始之前，添加 rest_framework 到settings.py 的 INSTALLED——APPS 以 stanineapi 作为 app 为例，在 models.py 创建一个 model，根据 model 序列化。 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:1:0","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"创建一个序列化类 在 stanineapi 目录下创建 serializers.py ，并添加内容 from rest_framework import serializers from stanineapi.models import Category class CategorySerializer(serializers.Serializer): # 序列化器类的第一部分定义了序列化/反序列化的字段 id = serializers.IntegerField(read_only=True) enname = serializers.CharField(max_length=100) zhname = serializers.CharField(max_length=100) # create()和update()定义了在调用serializer.save()时如何创建和修改完整的实例 def create(self, validated_data): # 根据提供的验证过的数据创建并返回一个新的`Category`实例 return Category.objects.create(**validated_data) def update(self, instance, validated_data): # 根据提供的验证过的数据更新和返回一个已经存在的`Category`实例 instance.enname = validated_data.get('enname', instance.enname) instance.zhname = validated_data.get('zhname', instance.zhname) instance.save() return instance ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:1:1","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"使用序列化类 python manage.py shell 进入 Django shell from stanineapi.models import Category from stanineapi.serializers import CategorySerializer c = Category.objects.get(zhname='行动与哲学') CategorySerializer(c).data # '{'id': 1, 'enname': 'Action \u0026 Philosophy', 'zhname': '行动与哲学'}' ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:1:2","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"使用 ModelSerializers 使用 ModelSerializer 类重构序列化类，将 stanineapi/serializers.py 替换为 from rest_framework import serializers from stanineapi.models import Category # ModelSerializer类只是创建序列化器类的快捷方式：一组自动确定的字段；默认简单实现的create()和update()方法。 class CategorySerializer(serializers.ModelSerializer): class Meta: model = Category fields = ('id', 'enname', 'zhname') ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:1:3","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"使用序列化（Serializer）编写常规的 Django 视图 views 编辑 stanineapi/views.py ，将视图标记为 csrf_exempt 能够使不具有 CSRF 令牌的客户端对此视图进行 POST # from django.shortcuts import render # Create your views here. from django.http import HttpResponse from django.views.decorators.csrf import csrf_exempt from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser from stanineapi.models import Category from stanineapi.serializers import CategorySerializer class JSONResponse(HttpResponse): # An HttpResponse that renders its content into JSON. def __init__(self, data, **kwargs): content = JSONRenderer().render(data) kwargs['content_type'] = 'application/json' super(JSONResponse, self).__init__(content, **kwargs) @csrf_exempt def category_list(request): # 列出所有的code category，或创建一个新的category。 if request.method == 'GET': category = Category.objects.all() serializer = CategorySerializer(category, many=True) return JSONResponse(serializer.data) elif request.method == 'POST': data = JSONParser().parse(request) serializer = CategorySerializer(data=data) if serializer.is_valid(): serializer.save() return JSONResponse(serializer.data, status=201) return JSONResponse(serializer.errors, status=400) @csrf_exempt def category_detail(request, pk=None): # 获取，更新或删除一个 code category。 try: category = Category.objects.get(pk=pk) except Category.DoesNotExist: return HttpResponse(status=404) if request.method == 'GET': serializer = CategorySerializer(category) return JSONResponse(serializer.data) elif request.method == 'PUT': data = JSONParser().parse(request) serializer = CategorySerializer(category, data=data) if serializer.is_valid(): serializer.save() return JSONResponse(serializer.data) return JSONResponse(serializer.errors, status=400) elif request.method == 'DELETE': category.delete() return HttpResponse(status=204) 将视图与 URL 连起来，创建 stanineapi/urls.py ，写入 from django.conf.urls import url from . import views urlpatterns = [ url(r'^stanineapi/$', views.category_list), url(r'^stanineapi/(?P\u003cpk\u003e[0-9]+)/$',views.category_detail), ] 在根 URL 配置 stanine/urls.py文件中，添加 stanineapi 应用的 URL from django.contrib import admin from django.conf.urls import url, include urlpatterns = [ url(r'admin/', admin.site.urls), url(r'', include('stanineapi.urls')), ] ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:2:0","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"包装（wrapping）API 视图 REST 框架提供了两个可用于编写 API 视图的包装器（wrappers）。 用于基于函数视图的 @api_view 装饰器。 用于基于类视图的 APIView 类。 这些包装器提供了一些功能，例如确保你在视图中接收到 Request 实例，并将上下文添加到 Response ，以便可以执行内容协商。 包装器还提供了诸如在适当时候返回 405 Method Not Allowed 响应，并处理在使用格式错误的输入来访问 request.data 时发生的任何 ParseError 异常。 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:3:0","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"重构视图 在 views.py 中重构视图 from rest_framework import status from rest_framework.decorators import api_view from rest_framework.response import Response from stanineapi.models import Category from stanineapi.serializers import CategorySerializer @api_view(['GET', 'POST']) def category_list(request): # 列出所有的categories，或者创建一个新的category if request.method == 'GET': categories = Category.objects.all() serializer = CategorySerializer(categories, many=True) return Response(serializer.data) elif request.method == 'POST': # request.data 可以处理传入的json请求，也可以处理其他格式 serializer = CategorySerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) @api_view(['GET', 'PUT', 'DELETE']) def category_detail(request, pk): # 获取，更新或删除一个category实例 try: category = Category.objects.get(pk=pk) except Category.DoesNotExist: return Response(status=status.HTTP_404_NOT_FOUND) if request.method == 'GET': serializer = CategorySerializer(category) return Response(serializer.data) elif request.method == 'PUT': serializer = CategorySerializer(category, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) elif request.method == 'DELETE': category.delete() return Response(status=status.HTTP_204_NO_CONTENT) 请求对象（Request objects） REST 框架引入了一个扩展了常规 HttpRequest 的 Request 对象，并提供了更灵活的请求解析。Request 对象的核心功能是 request.data 属性，它与 request.POST 类似，但对于使用 Web API 更为有用。 request.POST # 只处理表单数据 只适用于'POST'方法 request.data # 处理任意数据 适用于'POST'，'PUT'和'PATCH'方法``` 响应对象（Response objects） REST 框架还引入了一个 Response 对象，这是一种获取未渲染（unrendered）内容的 TemplateResponse 类型，并使用内容协商来确定返回给客户端的正确内容类型。 return Response(data) # 渲染成客户端请求的内容类型。 状态码（Status codes） 在你的视图（views）中使用纯数字的 HTTP 状态码并不总是那么容易被理解。而且如果错误代码出错，很容易被忽略。REST 框架为 status 模块中的每个状态代码（如HTTP_400_BAD_REQUEST）提供更明确的标识符，使用它们来代替纯数字的 HTTP 状态码是个很好的主意。 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:3:1","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"给网址添加可选的格式后缀 为了充分利用响应不再与单一内容类型连接，可以为 API 路径添加对格式后缀的支持，这意味着 API 将能够处理诸如http://example.com/stanineapi/category/1.json之类的 URL。 像下面这样在这两个视图中添加一个format关键字参数 def category_list(request, format=None): # def category_detail(request, pk, format=None): 更新 urls.py 文件，给现有的 URL 后面添加一组 format_suffix_patterns from rest_framework.urlpatterns import format_suffix_patterns urlpatterns = format_suffix_patterns(urlpatterns) ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:3:2","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"基于类的视图(CBV) 用基于类的视图编写 API 视图有助于保持代码 DRY ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:4:0","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"重构视图 对 views.py 文件的重构 from rest_framework import status from rest_framework.response import Response from django.http import Http404 from rest_framework.views import APIView from stanineapi.models import Category from stanineapi.serializers import CategorySerializer class CategoryList(APIView): # 列出所有的 categories 或者创建一个新的 category def get(self, request, format=None): categories = Category.objects.all() serializer = CategorySerializer(categories, many=True) return Response(serializer.data) def post(self, request, format=None): serializer = CategorySerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class CategoryDetail(APIView): # 检索，更新或删除一个 categpry 实例 def get_object(self, pk): try: return Category.objects.get(pk=pk) except Category.DoesNotExist: raise Http404 def get(self, request, pk, format=None): category = self.get_object(pk) serializer = CategorySerializer(category) return Response(serializer.data) def put(self, request, pk, format=None): category = self.get_object(pk) serializer = CategorySerializer(category, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) def delete(self, request, pk, format=None): category = self.get_object(pk) category.delete() return Response(status=status.HTTP_204_NO_CONTENT) ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:4:1","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"重构视图与 URL 的链接 重构 urls.py from django.conf.urls import url from rest_framework.urlpatterns import format_suffix_patterns from . import views urlpatterns = [ url(r'^category/$', views.CategoryList.as_view()), url(r'^category/(?P\u003cpk\u003e[0-9]+)/$',views.CategoryDetail.as_view()), ] urlpatterns = format_suffix_patterns(urlpatterns) ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:4:2","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"使用混合（mixins） 使用基于类视图的最大优势之一是它可以轻松地创建可复用的行为。重写 views.py 模块， from stanineapi.models import Category from stanineapi.serializers import CategorySerializer from rest_framework import mixins from rest_framework import generics # 用 GenericAPIView 构建了我们的视图，并且用上了 ListModelMixin 和 CreateModelMixin class CategoryList(mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView): queryset = Category.objects.all() serializer_class = CategorySerializer def get(self, request, *args, **kwargs): return self.list(request, *args, **kwargs) def post(self, request, *args, **kwargs): return self.create(request, *args, **kwargs) class CategoryDetail(mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, generics.GenericAPIView): queryset = Category.objects.all() serializer_class = CategorySerializer def get(self, request, *args, **kwargs): return self.retrieve(request, *args, **kwargs) def put(self, request, *args, **kwargs): return self.update(request, *args, **kwargs) def delete(self, request, *args, **kwargs): return self.destroy(request, *args, **kwargs) ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:4:3","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"使用通用的基于类的视图 REST 框架提供了一组已经混合好（mixed-in）的通用视图，我们可以使用它来简化我们的 views.py 模块。 from stanineapi.models import Category from stanineapi.serializers import CategorySerializer from rest_framework import generics class CategoryList(generics.ListCreateAPIView): queryset = Category.objects.all() serializer_class = CategorySerializer class CategoryDetail(generics.RetrieveUpdateDestroyAPIView): queryset = Category.objects.all() serializer_class = CategorySerializer ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:4:4","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"认证和权限 目前，我们的 API 对编辑或删除代码段没有任何限制。我们希望有更高级的行为，以确保： 代码片段始终与创建者相关联。 只有通过身份验证的用户可以创建片段。 只有代码片段的创建者可以更新或删除它。 未经身份验证的请求应具有完全只读访问权限。 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:5:0","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"在模型（model）中添加信息 将以下字段添加到 models.py 文件中的 Category模型中，并更新数据库表，重新创建用户 owner = models.ForeignKey(User, related_name='stanineapi', on_delete=models.CASCADE) ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:5:1","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"为用户模型添加路径 在 serializers.py 文件中添加 from django.contrib.auth.models import User class UserSerializer(serializers.ModelSerializer): # 因为'category' 在用户模型中是一个反向关联关系。在使用 ModelSerializer 类时它默认不会被包含，所以我们需要为它添加一个显式字段。 category = serializers.PrimaryKeyRelatedField(many=True, queryset=Category.objects.all()) class Meta: model = User fields = ('id', 'username', 'category') 在 views.py 中添加几个视图 from stanineapi.serializers import UserSerializer from django.contrib.auth.models import User class UserList(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer class UserDetail(generics.RetrieveAPIView): queryset = User.objects.all() serializer_class = UserSerializer 这些视图需要添加到 API 中，将以下内容添加到 urls.py 文件的 urlpatterns 中 url(r'^users/$', views.UserList.as_view()), url(r'^users/(?P\u003cpk\u003e[0-9]+)/$', views.UserDetail.as_view()), ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:5:2","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"将 Category 和用户关联 如果创建了一个代码片段，并不能将创建该代码片段的用户与代码段实例相关联。user 不在传过来的数据中，而是通过 request.user 获得。 处理的方式是在代码片段视图中重写一个 .perform_create() 方法，如此便可以修改实例保存的方法，并处理传入请求或请求 URL 中隐含的任何信息。 在 CategoryList 视图类中，添加以下方法 def perform_create(self, serializer): serializer.save(owner=self.request.user) # 序列化器的 create() 方法现在将被传递一个附加的'owner'字段以及来自请求的验证数据 更新 CategorySerializer 来体现这个关联关系，将以下字段添加到 serializers.py 中的序列化器定义 owner = serializers.ReadOnlyField(source='owner.username') # 将'owner',添加到内部 Meta 类的字段列表中 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:5:3","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"添加视图所需的权限 现在确保只有经过身份验证的用户才能创建，更新和删除代码片段 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:5:4","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"给 Browsable API 添加登陆 通过编辑项目级别的 urls.py 文件来添加可浏览的 API 使用的登录视图 from django.conf.urls import include # 在 urlpatterns 之后 urlpatterns += [ url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')), ] ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:5:5","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"对象级别的权限 为使 API 可以被任何人看到，同时也要确保只有创建代码片段的用户才能更新或删除它，需要创建一个自定义权限。 在 stanineapi 中创建一个新文件 permissions.py from rest_framework import permissions class IsOwnerOrReadOnly(permissions.BasePermission): # 自定义权限只允许对象的所有者编辑它 def has_object_permission(self, request, view, obj): # 读取权限允许任何请求， # 所以我们总是允许GET，HEAD或OPTIONS请求。 if request.method in permissions.SAFE_METHODS: return True # 只有该 api 的所有者才允许写权限。 return obj.owner == request.user 通过在 CategorytDetail 视图类中编辑 permission_classes 属性将该自定义权限添加到实例路径，并导入IsOwnerOrReadOnly类 permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly,) ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:5:6","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"使用 API 进行身份验证 现在在 API 上有一组权限，如果要编辑 API ，需要验证请求。目前还没有设置任何身份验证类，应用的是默认的 SessionAuthentication 和 BasicAuthentication 。 当我们通过 Web 浏览器与 API 进行交互时，我们需要在每次请求上显式提供身份验证凭据，然后浏览器会话将为请求提供所需的身份验证。可以通过加上之前创建的用户的用户名和密码来成功创建 # 先要 pip install httpie http -a user:password POST http://127.0.0.1:8000/category/ enname=\"Innovation \u0026 Design\" zhname=\"创新与设计\" 现在已经在 Web API 上获得了相当精细的一组权限控制，并为用户创建的 API 提供了 API 路径。 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:5:7","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"关系和超链接 API 目前 API 中的关系是用主键表示的，下面通过使用超链接来提高 API 的内部联系。 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:6:0","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"为 API 创建一个根路径 目前 API 没有一个入口点，下面将使用一个常规的基于函数的视图和前面介绍的 @api_view装 饰器创建一个。在 stanine/views.py 中添加 from rest_framework.decorators import api_view from rest_framework.response import Response from rest_framework.reverse import reverse @api_view(['GET']) def api_root(request, format=None): return Response({ # 使用 REST 框架的 reverse 功能来返回完全限定的 URL，URL 模式是通过方便的名称来标识 'users': reverse('user-list', request=request, format=format), 'category': reverse('category-list', request=request, format=format) }) 在 stanineapi/urls.py 中为新 API 根路径添加一个 url 模式 url(r'^$', views.api_root), ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:6:1","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"超链接 API 处理好实体之间的关系是 Web API 设计中更具挑战性的方面，可以选择几种不同的方式来代表一种关系： 使用主键。 在实体之间使用超链接。 在相关实体上使用唯一的标识字段。 使用相关实体的默认字符串表示形式。 将相关实体嵌套在父表示中。 一些其他自定义表示。 REST 框架支持所有这些方式，并且可以将它们应用于正向或反向关系，也可以在诸如通用外键之类的自定义管理器上应用。 在这种情况下，我们希望在实体之间使用超链接方式。这样的话，需要修改我们的序列化程序来扩展 HyperlinkedModelSerializer 而不是现有的 ModelSerializer 。 HyperlinkedModelSerializer 与 ModelSerializer 有以下区别： 默认情况下不包括 id 字段。 它包含一个 url 字段，使用 HyperlinkedIdentityField 。 关联关系使用HyperlinkedRelatedField，而不是PrimaryKeyRelatedField。 现在重写现有的序列化程序以使用超链接，修改 stanineapi/serializers.py from rest_framework import serializers from stanineapi.models import Category # ModelSerializer 类只是创建序列化器类的快捷方式：一组自动确定的字段；默认简单实现的create()和update()方法。 from django.contrib.auth.models import User class UserSerializer(serializers.HyperlinkedModelSerializer): # 因为'category' 在用户模型中是一个反向关联关系。在使用 ModelSerializer 类时它默认不会被包含，所以我们需要为它添加一个显式字段。 category = serializers.HyperlinkedRelatedField(many=True, view_name='category-detail', read_only=True) class Meta: model = User fields = ('id', 'username', 'category') class CategorySerializer(serializers.HyperlinkedModelSerializer): # source 参数控制属性用于填充字段，并且可以指向序列化实例上的任何属性 # 无类型的 ReadOnlyField 始终是只读的，只能用于序列化表示，不能用于在反序列化时更新模型实例 owner = serializers.ReadOnlyField(source='owner.username') class Meta: model = Category fields = ('id', 'enname', 'zhname', 'owner') ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:6:2","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"确保 URL 模式被命名 如果要使用超链接的 API，那么需要确保为 URL 模式命名，最终 stanineapi/urls.py 文件应该如下 from django.conf.urls import url, include from rest_framework.urlpatterns import format_suffix_patterns from . import views urlpatterns = [ url(r'^$', views.api_root), url(r'^users/$', views.UserList.as_view(), name='user-list'), url(r'^users/(?P\u003cpk\u003e[0-9]+)/$', views.UserDetail.as_view(), name='user-detail'), url(r'^category/$', views.CategoryList.as_view(), name='category-list'), url(r'^category/(?P\u003cpk\u003e[0-9]+)/$',views.CategoryDetail.as_view(), name='category-detail'), ] urlpatterns = format_suffix_patterns(urlpatterns) # 模式的r'^api-auth/'部分实际上可以是你要使用的任何 URL，唯一的限制是包含的 URL 必须使用'rest_framework'命名空间。 urlpatterns += [ url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')), ] ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:6:3","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"添加分页 API 列表视图可能会返回相当多的实例，因此需要确保对结果分页，并允许 API 客户端依次获取每个单独的页面。由此可以通过修改的 stanine/settings.py 文件来更改默认列表展示样式来使用分页，添加以下设置 REST_FRAMEWORK = { 'PAGE_SIZE': 10 } 如果打开浏览器并浏览 API，那么可以通过页面上的超链接来了解 API。 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:6:4","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"视图集和路由器 使用 ViewSets 和 Routers 来减少构建 API 所需的代码量。 REST 框架包括一个用于处理 ViewSets 的抽象，它允许开发人员集中精力对 API 的状态和交互进行建模，并根据常规约定自动处理 URL 构造。 ViewSet 类与 View 类几乎相同，不同之处在于它们提供诸如 read 或 update 之类的操作，而不是 get 或 put 等方法处理程序。 最后一个 ViewSet 类只绑定到一组方法处理程序，当它被实例化成一组视图的时候，通常通过使用一个 Router 类来处理自己定义 URL conf 的复杂性。 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:7:0","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"使用 ViewSets 重构 将 UserList 和 UserDetail 视图重构为一个 UserViewSet ，同时将 CategoryList 和 CategoryDetail 视图重构为一个 CategoryViewSet from stanineapi.models import Category from stanineapi.serializers import CategorySerializer from stanineapi.serializers import UserSerializer from django.contrib.auth.models import User from stanineapi.permissions import IsOwnerOrReadOnly from rest_framework import permissions from rest_framework.decorators import api_view from rest_framework.response import Response from rest_framework.reverse import reverse from rest_framework import viewsets @api_view(['GET']) def api_root(request, format=None): return Response({ # 使用 REST 框架的 reverse 功能来返回完全限定的 URL，URL 模式是通过方便的名称来标识 'users': reverse('user-list', request=request, format=format), 'category': reverse('category-list', request=request, format=format) }) # 使用 ReadOnlyModelViewSet 类来自动提供默认的“只读”操作 # 此视图自动提供`list`和`detail`操作 class UserViewSet(viewsets.ReadOnlyModelViewSet): # 仍然像使用常规视图那样设置 queryset 和 serializer_class 属性，但我们不再需要向两个不同的类提供相同的信息 queryset = User.objects.all() serializer_class = UserSerializer # 使用了 ModelViewSet 类来获取完整的默认读写操作 class CategoryViewSet(viewsets.ModelViewSet): # 此视图自动提供`list`，`create`，`retrieve`，`update`和`destroy`操作 queryset = Category.objects.all() serializer_class = CategorySerializer permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly,) def perform_create(self, serializer): serializer.save(owner=self.request.user) ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:7:1","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"明确地将 ViewSets 绑定到 URL 在 urls.py 文件中，将 ViewSet 类绑定到一组具体视图中 from stanineapi.views import CategoryViewSet, UserViewSet, api_root # 从每个 ViewSet 类创建多个视图 user_list = UserViewSet.as_view({ 'get': 'list' }) user_detail = UserViewSet.as_view({ 'get': 'retrieve' }) category_list = CategoryViewSet.as_view({ 'get': 'list', 'post': 'create' }) category_detail = CategoryViewSet.as_view({ 'get': 'retrieve', 'put': 'update', 'patch': 'partial_update', 'delete': 'destroy' }) 现在将资源绑定到具体的视图中 urlpatterns = [ url(r'^stanineapi/$', views.api_root), url(r'^stanineapi/users/$', user_list, name='user-list'), url(r'^stanineapi/users/(?P\u003cpk\u003e[0-9]+)/$', user_detail, name='user-detail'), url(r'^stanineapi/category/$', category_list, name='category-list'), url(r'^stanineapi/category/(?P\u003cpk\u003e[0-9]+)/$', category_detail, name='category-detail'), ] ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:7:2","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"使用路由器 重构后使用的是 ViewSet 类而不是 View 类，因此不需要自己设计 URL。将资源连接到视图和 url 的约定可以使用 Router 类自动处理。需要做的就是使用路由器注册相应的视图集，然后让它执行其余操作。 这是重写的 urls.py 文件 from django.conf.urls import url, include from . import views from rest_framework.routers import DefaultRouter # 创建路由器并注册我们的视图 # DefaultRouter 类会自动为我们创建 API 根视图 router = DefaultRouter() router.register(r'category', views.CategoryViewSet) router.register(r'users', views.UserViewSet) # API URL 现在由路由器自动确定，另外还要包含可浏览的 API 的登录 URL urlpatterns = [ url(r'^', include(router.urls)), url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')) ] ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:7:3","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"视图（views）与视图集（viewsets）之间的权衡 视图集可以是一个非常有用的抽象，它有助于确保 URL 约定在 API 中 保持一致，最大限度地减少编写所需的代码量，让你能够专注于 API 提供的交互和表示，而不是 URLconf 的细节。这并不意味着采用视图集总是正确的方法，在使用基于类的视图而不是基于函数的视图时，有一个类似的权衡要考虑，即使用视图集不像单独构建视图那样明确。 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:7:4","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"概要和客户端库 概要是一种机器可读文档，用于描述可用的 API 路径，其 URLS 以及它们支持的操作。概要可以是自动生成文档的有用工具，也可以用于驱动可以与 API 进行交互的动态客户端库。 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:8:0","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"Core API 为了使概要支持 REST 框架，使用 Core API。 Core API 是用于描述 API 的文档规范，它用于提供可用路径的内部表示形式和 API 公开的可能的交互，可以用于服务器端或客户端。 当使用服务器端时，coreAPI 允许 API 支持呈现范围广泛的概要或超媒体格式。 当使用客户端时，核心 API 允许动态驱动的客户端库，它可以与任何公开受支持的概要或超媒体格式的 API 交互。 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:8:1","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"添加概要 REST 框架支持明确定义的概要视图或自动生成的概要。由于项目使用的是视图集和路由器，所有可以简单地使用自动概要生成。 需要安装 coreapi python 包才能包含 API 概要，$pip install coreapi 现在通过在 URL 配置中包含一个自动生成的概要视图来为 API 添加概要 from rest_framework.schemas import get_schema_view schema_view = get_schema_view(title='Stanine API') urlpatterns = [ url('^schema/$', schema_view), ... ] 此外还要参考 pyyaml required for openapi-json schemas · Issue #6366 · encode/django-rest-framework ，python manage.py generateschema --format=openapi-json ， pip install pyyaml 此时在浏览器中访问 http://127.0.0.1:8000/stanineapi/schema/ ，可以看到可用选项中有 corejson 和 openapi 表示形式。 也可以通过在 Accept 标头中指定所需的内容类型从命令行请求概要，http http://127.0.0.1:8000/stanineapi/schema/ Accept:application/coreapi+json ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:8:2","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"使用命令行客户端 现在 API 暴露了一个概要路径，可以使用一个动态的客户端库与 API 进行交互。 命令行客户端作为一个 coreapi-cli 包提供，pip install coreapi-cli 检查 coreapi-cli 在命令行上是否可用，coreapi 使用命令行客户端加载 API 概要，coreapi get http://127.0.0.1:8000/stanineapi/schema/ // 返回 \u003cStanine API \"http://127.0.0.1:8000/stanineapi/schema/\"\u003e category: { list() read(id) } users: { list() read(id) } 使用命令行客户端，列出 category，coreapi action category list ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:8:3","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"验证我们的客户端 如果想要创建、编辑和删除代码片段，需要进行有效性用户身份验证。在这种情况下，只需使用基本的 auth，coreapi credentials add 127.0.0.1 \u003cusername\u003e:\u003cpassword\u003e --auth basic 现在再次提取概要，coreapi reload，能够看到一组可用的交互 \u003cStanine API \"http://127.0.0.1:8000/stanineapi/schema/\"\u003e category: { list() create(enname, zhname) read(id) update(id, enname, zhname) partial_update(id, [enname], [zhname]) delete(id) } users: { list() read(id) } 现在能够与这些路径行交互 要创建一个新的 category，coreapi action category create --param enname=\"Math \u0026 Physics\" --param zhname=\"数学与物理\" 删除一个 category，coreapi action category delete --param id=2 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:8:4","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"参考 Django REST framework 中文文档 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:9:0","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":"ChangeLog 2019-04-11 初稿 ","date":"2019-04-11","objectID":"/2019-04-11-django-rest-framework/:10:0","tags":["技术","Python"],"title":"Django REST framework 搭建后端 API 接口记录","uri":"/2019-04-11-django-rest-framework/"},{"categories":["tech"],"content":" Git 是目前世界上最先进的分布式文本文件版本控制系统 ","date":"2019-04-06","objectID":"/2019-03-26-git/:0:0","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"Git 快速上手 Cheat Sheet：workspace :: Git Cheatsheet 、常用 Git 命令清单 - 阮一峰的网络日志 Git 使用流程：Git 使用规范流程 - 阮一峰的网络日志 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:0","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"Git 基本概念 工作区（Working Directory），即电脑里能看到的目录 版本库/本地仓库（Repository），即工作区的隐藏目录 .git ，包含暂存区、分支、HEAD 等 暂存区（stage/index），存在于版本库之中 分支（branch），Git 创建版本库时，会自动创建第一个分支 master ，以及指向 master 的一个指针 HEAD 远程仓库（remote repository） 上图来自：Git 常用命令 - Gityuan 博客 | 袁辉辉的 Android 博客 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:1","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"安装 Git Linux 可以用 git 在终端测试系统是否安装了 Git，安装方法是 sudo apt-get install git macOS 一是安装 homebrew，然后通过 homebrew 安装 Git，具体方法请参考 homebrew 的文档：The missing package manager for macOS (or Linux)。 二是直接从 AppStore 安装 Xcode，更简单，也更推荐。Xcode 集成了 Git，不过默认没有安装，你需要运行 Xcode，选择菜单 Xcode-\u003ePreferences ，在弹出窗口中找到 Downloads ，选择 Command Line Tools，点 Install就可以完成安装了。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:2","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"全局配置 安装完成后，还需要最后一步设置，在命令行输入： $ git config --global user.name \"Your Name\" $ git config --global user.email \"email@example.com\" 因为 Git 是分布式版本控制系统，所以要表明各自的身份。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:3","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"创建版本库(repository，仓库)和提交修改 版本库可以简单理解成一个目录，这个目录里面的所有文件都可以被 Git 管理起来，每个文件的修改、删除，Git 都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以还原。 创建版本库 进入到一个目录，通过 git init 命令把这个目录变成 Git 可以管理的仓库，此时输入 ls -ah 命令，发现当前目录下多了一个 .git 的目录 把工作区（目录）的修改添加到暂存区 若新建了 README.md ，用命令 git add README.md 把文件添加到仓库暂存区，git add . 可将所有的修改添加到暂存区 查看仓库当前状态 用命令 git status 可以查看仓库当前状态 On branch master No commits yet Changes to be committed: (use \"git rm --cached \u003cfile\u003e...\" to unstage) new file: README.md 提交到当前分支 用命令 git commit -m \"commit message\" 把本次修改提交到当前分支，此时工作区变为 nothing to commit, working tree clean 一步将工作区的修改提交到分支 用命令 git commit -am \"commit message\" 可以提交工作区所有 tracked 的修改到当前分支。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:4","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"撤销修改和版本回滚 万事都有失，Git 挽回失误的操作有撤销「添加到暂存区」、撤销「本次提交到当前分支」、回滚到「之前的某一次提交」。 查看工作区的修改 git diff 查看上次对工作区的修改，显示工作区与暂存区的比较（优先）或工作区与当前分支比较，显示的格式正是 Unix 通用的 diff 格式。 撤销工作区修改 用 git status 查看当前仓库状态时，Changes not staged for commit: 下面会提示如何撤销工作区修改， use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory ，即用 git checkout -- \u003cfile\u003e 将文件在工作区的修改恢复到上一次添加到暂存区后的状态（优先）或当前分支的状态。 撤销添加到暂存区 用 git status 查看当前仓库状态时，Changes to be committed: 下面会提示如何撤销暂存区的修改， use \"git reset HEAD \u003cfile\u003e...\" to unstage ，即用 git reset HEAD \u003cfile\u003e 把暂存区的修改撤销掉，重新放回工作区。若再用 git checkout -- \u003cfile\u003e 可以把文件恢复与版本库中当前版本一致。 版本回退 用 git log 命令查看提交日志（从最近到最远），加上 --pretty=oneline 参数，仅显示版本号（commit id）、commit message 和 HEAD 指针的指向当前版本。 使用 git reset 命令可退回以前版本，原理是改变 HEAD 指针的指向，其间提交的版本不可在 git log 命令下显示。 使用 git reset --hard HEAD^ 命令退回到上一个版本 或用 git reset --hard HEAD~n 往前退回 n 版本 或用 git reset -- hard \u003c前五位 commit id\u003e 回退到一特定版本 Git 提供了一个命令 git reflog 来记录每一次提交，包括 HEAD 指针之后的版本，用 git reset -- hard \u003c前五位 commit id\u003e 依旧可以回退到一特定版本。 删除文件 从版本库中删除文件可用命令 git rm \u003cfile\u003e ，参数 —cached 保存工作区的文件， -f 删除工作区和版本库的文件。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:5","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"远程仓库 远程仓库以 GitHub 为例。 建立本地 SSH Key 密钥对 本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，需要创建 SSH Key。 在用户主目录下，看看有没有 .ssh/ 目录，若有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 文件，若有，可直接跳过这一步。若没有，打开 Shell 创建 SSH Key ，ssh-keygen -t rsa -C \"youremail@example.com\" ，为了方便无需设置密码。 一路回车后，在用户主目录里找到 .ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，即 SSH Key 的密钥对， id_rsa 是私钥，不能泄露出去， id_rsa.pub 是公钥。 把公钥给 GitHub 登陆 GitHub，打开 Account settings ，进入 SSH Keys 页面，点 Add SSH Key ，填上任意 Title ，在 Key 文本框里粘贴 id_rsa.pub 文件的内容。 关联远程仓库 在 GitHub 新建一个空仓库，根据 GitHub 提示，在本地仓库下运行 git remote add origin git@github.com:\u003cGitHub Username\u003e/\u003crepository name\u003e.git 命令。 origin 就是远程仓库的名字，是 Git 的默认叫法。 下一步把本地库的所有内容推送到远程库上，运行 git push -u origin master 可以把当前分支 master 推送到 origin 。参数 -u 会把本地的 master 分支与远程的 master 分支关联，以后推送或拉取时就可以简化为 git push 和 git pull 。 从远程库克隆 运行 git clone git@github.com:\u003cGitHub Username\u003e/\u003crepository name\u003e.git 可以将远程仓库克隆到本地，会在当前目录下生成一个 repository name 文件。 Git 支持多种协议，包括 https ，但通过 ssh 支持的原生 git 协议速度最快。 SSH 警告 第一次使用 Git 的 clone 或者 push 命令连接 GitHub 时，会得到一个警告： The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established. RSA key fingerprint is xx.xx.xx.xx.xx. Are you sure you want to continue connecting (yes/no)? 这是因为 Git 使用 SSH 连接，而 SSH 连接在第一次验证 GitHub 服务器的 Key 时，需要你确认 GitHub 的 Key 的指纹信息是否真的来自 GitHub 的服务器，输入yes 回车即可。此时 ~/.ssh/konwn_host 文件里会多一个 github.com host. 忽略特殊文件 在 Git 工作区的根目录下创建一个特殊的 .gitignore 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。GitHub 已经为我们准备了各种配置文件：github/gitignore: A collection of useful .gitignore templates ，再把 .gitignore 也提交到 Git。 忽略文件的原则是： 忽略操作系统自动生成的文件，比如缩略图等； 忽略编译生成的中间文件、可执行文件等，也就是若一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Python 编译产生的 .pyc 文件、 .pyo 文件和 dist 目录； 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。 若确实想添加被忽略的文件，可以用 -f 强制添加到 Git，git add -f test.pyc 。 git check-ignore 命令检查被忽略的文件来自哪条规则 $ git check-ignore -v test.pyc .gitignore:2:__pycache__/ test.pyc .gitignore 的第 2 行规则忽略了该文件。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:1:6","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"分支管理 分支管理可以让开发者从容地写一个新功能，而不用担心代码无处提交。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:2:0","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"创建与合并分支 截止到目前，在 Git 里只有一个分支，叫主分支，即master分支。master 指向提交，HEAD 指向当前分支，每次提交，master 分支都会向前移动一步。 创建分支 运行 git checkout -b dev 创建新的分支，并切换到 dev 分支。 git checkout 加上 -b参数表示创建并切换，相当于创建新的分支 git branch dev 加上切换分支 git checkout dev . 创建新的分支时，例如 dev ，Git 会新建了一个指针叫 dev ，指向 master 相同的提交，再把 HEAD 指向 dev ，就表示当前分支在 dev 上。现在开始，对工作区的修改和提交就是针对 dev 分支，比如新提交一次后，dev 指针往前移动一步，而 master 指针不变。 master ↓ ○---○---○---○---○ ↑ dev ← HEAD 合并分支 假如在 dev 上的工作完成了，就可以把 dev 合并到 master 上，最简单的方法，就是直接把 master 指向 dev 的当前提交。 命令是运行 git checkout master 把 HEAD 指针指向 master 分支，然后运行 git merge dev 把 dev 分支的工作成果合并到 master 分支上。终端返回 Fast-forward 信息表示这次合并是「快进模式」，即直接把 master 指向 dev 的当前提交。 master ← HEAD ↓ ○---○---○---○---○ ↑ dev 但不是每次合并都能 Fast-forward ，后面会讲其他方式的合并。 合并完分支后，可以删除 dev 分支， git branch -d dev ，即删除dev 指针。删除后，查看 branch ， git branch ，只剩下 master 分支。 解决分支合并冲突 若在新建的分支 dev 修改了 README.md 并提交，又切换回 master 分支，修改了 README.md 并提交，则此时的 master 和 dev 处在不同的提交时间轴上。 master ← HEAD ↓ ○---○---○---○---○ \\---○ ↑ dev 此时运行 git merge dev ，会报错（ git status 也会提示冲突的文件） Auto-merging README.md CONFLICT (content): Merge conflict in README.md Automatic merge failed; fix conflicts and then commit the result. README.md 文件存在冲突，必须手动解决冲突后再提交。查看 README.md \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD Creating a new branch is quick \u0026 simple. ======= Creating a new branch is quick AND simple. \u003e\u003e\u003e\u003e\u003e\u003e\u003e dev Git 用 \u003c\u003c\u003c\u003c\u003c\u003c\u003c ， ======= ， \u003e\u003e\u003e\u003e\u003e\u003e\u003e 标记出不同分支的内容，假如修改 README.md 为 Creating a new branch is quick and simple. 再提交 git add README.md git commit -m \"conflict fixed\" 现在 master 分支和 dev 成了下图所示 master ← HEAD ↓ ○---○---○---○---○---○ \\--○--/ ↑ dev git log --graph --pretty=oneline --abbrev-commit 可以看到分支的合并情况。 —graph 参数可查看分支合并图，--abbrev-commit 参数可缩写 commit 信息。 * b75b466 (HEAD -\u003e master) conflict fixed |\\ | * 3d0eb40 (feature1) using And * | 42c89d0 using \u0026 |/ * 01c11b4 branch test ... 删除 dev 分支。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:2:1","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"分支管理策略 通常，合并分支时，若可能，Git 会用 Fast forward 模式，但这种模式下，删除分支后会丢掉分支信息。 若要强制禁用 Fast forward 模式，Git 就会在 merge 时生成一个新的 commit ，这样，从分支历史上就可以看出分支信息。可以在 merge 时添加 --no-ff 参数在分支历史上呈现合并分支信息，--no-ff 参数表示禁用 Fast forward 。 仍然创建并切换 dev 分支，修改 README.md 文件，并提交一个新的 commit ，再切换回 master 。此时运行 git merge --no-ff -m \"merge with no-ff\" dev ，终端返回 Merge made by the 'recursive' strategy. README.md | 1 + 1 file changed, 1 insertion(+) 合并后，用 git log 查看分支历史 $ git log --graph --pretty=oneline --abbrev-commit * 3481f74 (HEAD -\u003e master) merge with no-ff |\\ | * 3a86b6c (dev) add merge |/ * b75b466 conflict fixed ... 在实际开发中，应该按照几个基本原则进行分支管理： master 分支应该非常稳定，仅用来发布新版本，平时不能在上面干活； 干活都在 dev 分支上，版本发布时，再把 dev 分支合并到 master 上，在 master 分支发布版本； 团队合作时，每个人都在 dev 分支上干活，每个人都有自己的分支，时不时地往 dev 分支上合并。 Bug 分支 每个 bug 都可以通过一个新的临时分支来修复，修复后合并分支，然后将临时分支删除。 Git 提供了一个 stash 功能，可以把当前工作现场「储藏」起来，等以后恢复现场后继续工作。 在 dev 分支修改 README.md 后， $ git stash Saved working directory and index state WIP on dev: 3a86b6c test hard merge 现在用 git status 查看工作区，是干净的，因此可以放心地创建分支来修复 bug 。 若需要在 master 分支上修复 bug ，则从 master 创建临时分支。 $ git checkout master $ git checkout -b issue-101 修改 bug ，这里修改了 README.md ，然后提交 $ git commit -am \"fix bug 101\" [issue-101 4d97816] fix bug 101 1 file changed, 1 insertion(+), 1 deletion(-) 修复完成后，切换到 master 分支，并完成合并，最后删除 issue-101 分支 $ git checkout master $ git merge --no-ff -m \"merged bug fix 101\" issue-101 Merge made by the 'recursive' strategy. readme.txt | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) $ git branch -d issue-101 重新回到 dev 分支干活 $ git checkout dev $ git status On branch dev nothing to commit, working tree clean 工作区是干净的，用 git stash list 命令工作现场 $ git stash list stash@{0}: WIP on dev: 3a86b6c add merge 恢复工作现场有两个办法 用 git stash apply 恢复，但是恢复后，stash 内容并不删除，需要用 git stash drop 来删除 用 git stash pop ，恢复的同时把 stash 内容也删了 $ git stash pop On branch dev Changes not staged for commit: (use \"git add \u003cfile\u003e...\" to update what will be committed) (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory) modified: README.md no changes added to commit (use \"git add\" and/or \"git commit -a\") Dropped refs/stash@{0} (e8f4328c3334144570f3c6d38641fc971aa460a2) 此外，还可以多次 stash，恢复的时候，先用 git stash list 查看，然后恢复指定的 stash，用命令 git stash apply stash@{0} 。 Feature 分支 软件开发中，总有无穷无尽的新的功能要不断添加进来。每添加一个新功能，最好在新建分支 feature 上面开发（以免污染 dev ），完成后合并删除 feature 分支。 若新功能突然不需要了，git branch -d feature-name 命令会报错 error: The branch 'feature-name' is not fully merged. If you are sure you want to delete it, run 'git branch -D feature-name'. 可以运行 git branch -D feature-name 强行删除。 Git 工作流程 Git 工作流程 - 阮一峰的网络日志 Git 分支管理策略 - 阮一峰的网络日志 ","date":"2019-04-06","objectID":"/2019-03-26-git/:2:2","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"多人协作开发 要查看远程库的信息，用 git remote ，或者用 git remote -v 显示更详细的信息 $ git remote -v origin git@github.com:michaelliao/learngit.git (fetch) origin git@github.com:michaelliao/learngit.git (push) 上面显示了可以抓取和推送的 origin 的地址，若没有推送权限，就看不到 push 的地址。 推送分支 推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样 Git 就会把该分支推送到远程库对应的远程分支上，例如 git push origin dev 。 有些本地分支不需要往远程推送，有些本地分支需要往远程推送 master 分支是主分支，要时刻与远程同步； dev 分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步； bug 分支只用于在本地修复 bug，就没必要推到远程了； feature 分支是否推到远程，取决于是否和小伙伴合作在上面开发。 抓取分支 多人协作时，大家都会往 master 和 dev 分支上推送各自的修改。 假设有小伙伴要在 dev 分支上开发，就必须创建远程 origin 的 dev 分支到本地，于是他用命令 git checkout -b dev origin/dev 创建本地 dev 分支。接着他修改了 README.md ，并提交到本地仓库的 dev 分支，然后 git push origin dev 推送到远程仓库。 碰巧你也修改了 README.md ，并提交到本地仓库的 dev 分支。 $ git push origin dev To github.com:\u003cgithub username\u003e/\u003crepository\u003e.git ! [rejected] dev -\u003e dev (non-fast-forward) error: failed to push some refs to 'git@github.com:\u003cgithub username\u003e/\u003crepository\u003e.git' hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. 因为有小伙伴的最新提交和你试图推送的提交有冲突，所以推送失败。解决办法 Git 已经提示我们，先用 git pull 把最新的提交从 origin/dev 抓下来，然后在本地合并，解决冲突，再推送。 $ git pull There is no tracking information for the current branch. Please specify which branch you want to merge with. See git-pull(1) for details. git pull \u003cremote\u003e \u003cbranch\u003e If you wish to set tracking information for this branch you can do so with: git branch --set-upstream-to=origin/\u003cbranch\u003e dev git pull 也失败了，原因是没有指定本地 dev 分支与远程 origin/dev 分支的链接，根据提示设置 dev 和 origin/dev 的链接，再 pull $ git branch --set-upstream-to=origin/dev dev Branch 'dev' set up to track remote branch 'dev' from 'origin'. $ git pull Auto-merging README.md CONFLICT (add/add): Merge conflict in README.md Automatic merge failed; fix conflicts and then commit the result. git pull 成功，但是合并有冲突，需要手动解决，见前文「解决分支合并冲突」，再 git push origin dev 。 Rebase 多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后 push 的小伙伴也不得不先 pull，在本地合并，然后才能 push 成功。 每次合并再 push 后，分支变成了这样 $ git log --graph --pretty=oneline --abbrev-commit * d1be385 (HEAD -\u003e master, origin/master) init hello * e5e69f1 Merge branch 'dev' |\\ | * 57c53ab (origin/dev, dev) fix env conflict | |\\ | | * 7a5e5dd add env | * | 7bd91f1 add new env | |/ * | 12a631b merged bug fix 101 |\\ \\ | * | 4c805e2 fix bug 101 |/ / * | e1e9c68 merge with no-ff |\\ \\ | |/ | * f52c633 add merge |/ * cf810e4 conflict fixed ... Git 有一种称为 rebase(变基) 的操作，能把分叉的提交变成直线，使查看历史提交的变化更容易。 在和远程分支同步后，对 hello.py 做了两次提交。用 git log 命令查看 $ git log --graph --pretty=oneline --abbrev-commit * 582d922 (HEAD -\u003e master) add author * 8875536 add comment * d1be385 (origin/master) init hello * e5e69f1 Merge branch 'dev' |\\ | * 57c53ab (origin/dev, dev) fix env conflict | |\\ | | * 7a5e5dd add env | * | 7bd91f1 add new env ... 注意到 Git 用 (HEAD -\u003e master) 和 (origin/master) 标识出当前分支的 HEAD 和远程 origin 的位置分别是 582d922 add author 和 d1be385 init hello ，本地分支比远程分支快两个提交。 现在尝试推送本地分支 $ git push origin master To github.com:\u003cgithub username\u003e/\u003crepository\u003e.git ! [rejected] master -\u003e master (fetch first) error: failed to push some refs to 'git@github.com:\u003cgithub username\u003e/\u003crepository\u003e.git' hint: Updates were rejected because the remote contains work that you do hint: not have locally. This is usually caused by another repository pushing hint: to the same ref. You may want to first integrate the remote changes hint: (e.g., 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. 说明有小伙伴抢先推送了远程分支，按照提示先 pull $ git pull remote: Counting objects: 3, done. remote: Compressing objects: 100% (1/1), done. remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0 Unpacking objects: 100% (3/3), done. From github.com:\u003cgithub username\u003e/\u003crepository\u003e d1be385..f005ed4 master -\u003e origin/master * [new tag] v1.0 -\u003e v1.0 Auto-merging hello.py Merge made by the 'recursive' strategy. hello.py | 1 + 1 file changed, ","date":"2019-04-06","objectID":"/2019-03-26-git/:2:3","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"Git 远程操作 git remote 不带选项的时候， git remote 命令列出所有远程主机 $ git remote origin 使用-v选项，可以参看远程主机的网址。 克隆版本库的时候，所使用的远程主机自动被 Git 命名为 origin 。若想用其他的主机名，需要用 git clone 命令的 -o 选项指定 $ git clone -o jQuery https://github.com/jquery/jquery.git $ git remote jQuery 查看该主机的详细信息 $ git remote show \u003c主机名\u003e 添加远程主机 $ git remote add \u003c主机名\u003e \u003c网址/SSH\u003e 删除远程主机 $ git remote rm \u003c主机名\u003e 远程主机改名 $ git remote rename \u003c原主机名\u003e \u003c新主机名\u003e git fetch 默认情况下， git fetch 取回所有分支（branch）的更新。若只想取回特定分支的更新，可以指定分支名。 $ git fetch \u003c远程主机名\u003e \u003c分支名\u003e git branch 命令的 -r 选项，可以用来查看远程分支， -a 选项查看所有分支。 所取回的更新，在本地主机上要用「远程主机名/分支名」的形式读取。取回远程主机的更新以后，可以在它的基础上，使用 git checkout 命令创建一个新的分支。 $ git checkout -b newBrach origin/master 此外，也可以使用 git merge 命令或者 git rebase 命令，在本地分支上合并远程分支。 $ git merge origin/master # 或者 $ git rebase origin/master git pull git pull 命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。 $ git pull \u003c远程主机名\u003e \u003c远程分支名\u003e:\u003c本地分支名\u003e # 同于 $ git fetch \u003c远程主机名\u003e $ git merge \u003c远程主机名\u003e/\u003c远程分支名\u003e 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。 如果合并需要采用 rebase 模式，可以使用 --rebase 选项。 $ git pull --rebase \u003c远程主机名\u003e \u003c远程分支名\u003e:\u003c本地分支名\u003e 如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致 git pull 不知不觉删除了本地分支。加上参数 -p 就会在本地删除远程已经删除的分支。 $ git pull -p # 等同于 $ git fetch --prune origin $ git fetch -p git push git push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相仿。 $ git push \u003c远程主机名\u003e \u003c本地分支名\u003e:\u003c远程分支名\u003e git push \u003c远程主机名\u003e \u003c本地分支名\u003e ，将 \u003c本地分支名\u003e 本地分支推送到 \u003c远程主机名\u003e 主机的 \u003c本地分支名\u003e 分支。如果后者不存在，则会被新建。 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。 $ git push origin :master # 等同于 $ git push origin --delete master 不带任何参数的 git push ，默认只推送当前分支，这叫做 simple 方式。此外，还有一种 matching 方式，会推送所有有对应的远程分支的本地分支。如果要修改这个设置，可以采用git config命令。 $ git config --global push.default matching 还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用 --all 选项。 $ git push --all origin 上面命令表示，将所有本地分支都推送到 origin 主机。 如果远程主机的版本比本地版本更新，推送时 Git 会报错，要求先在本地做 git pull 合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用 --force 选项。 $ git push --force origin 上面命令使用 --force 选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用 --force 选项。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:2:4","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"标签管理 发布一个版本时，通常先在版本库中打一个标签（tag）（指向某个 commit 的指针），这样就唯一确定了打标签时刻的版本，即标签是版本库的一个快照。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:3:0","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"创建标签 切换到需要打标签的分支上，再打标签 $ git tag v1.0 默认标签是打在最新提交的 commit 上，但有时也会忘记，方法是找到历史提交的 commit id ，然后打上标签 $ git tag v0.9 f1e08 再用命令 git tag 查看标签，标签按字母排序 $ git tag v0.9 v1.0 可以用 git show \u003ctagname\u003e 查看标签信息 $ git show v0.9 commit f1e08437318d1e871680120c95bdcecb05a56b68 (tag: v0.9) Author: \u003cuser.name\u003e \u003c\u003cuser.emali\u003e\u003e Date: Sat Apr 6 16:14:10 2019 +0800 add merge diff --git a/README.md b/README.md ... 还可以创建带有说明的标签，用 -a 指定标签名， -m 指定说明文字 git tag -a v0.1 -m \"version 0.1 released\" 45f6a 标签总是和某个 commit 挂钩。若这个 commit 既出现在 master 分支，又出现在 dev 分支，那么在这两个分支上都会看到这个标签。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:3:1","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"操作标签 若标签打错了，也可以删除 $ git tag -d v0.1 Deleted tag 'v0.1' (was 45f6ab3) 若要推送某个标签到远程，使用命令 git push origin \u003ctagname\u003e $ git push origin v1.0 Total 0 (delta 0), reused 0 (delta 0) To github.com:\u003cgithub username\u003e/\u003crepository\u003e.git * [new tag] v1.0 -\u003e v1.0 也可以一次性推送全部尚未推送到远程的本地标签， git push origin --tags 若标签已经推送到远程，要删除远程标签就要删除， git tag -d v0.9 ，再从远程删除， git push origin :refs/tags/v0.9 。 ","date":"2019-04-06","objectID":"/2019-03-26-git/:3:2","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"其他 Git 技巧 ","date":"2019-04-06","objectID":"/2019-03-26-git/:4:0","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"配置别名 若用 st 表示 status ，可以为 status 配置别名， git config --global alias.st status 。 git config --global alias.unstage 'reset HEAD' ，自定义撤销暂存区的修改操作。 更有甚者，git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset' --abbrev-commit\" 。 每个仓库的 Git 配置文件都放在 .git/config 文件中，当前用户的 Git 配置文件放在用户主目录下 .gitconfig 文件中，删除配置别名可以直接删除在 Git 配置文件对应的行 [alias] st = status unstage = reset HEAD 此外 # 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--global] ","date":"2019-04-06","objectID":"/2019-03-26-git/:4:1","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"搭建 Git 服务器 远程仓库实际上和本地仓库没啥不同，只是一直保持开机并供小伙伴交换修改。 搭建 Git 服务器需要准备一台运行 Linux 的机器，强烈推荐用 Ubuntu 或 Debian ，这样通过几条简单的 apt 命令就可以完成安装。 安装 git ： sudo apt-get install git 创建一个 git 用户，用来运行 git 服务： sudo adduser git 创建证书登录：收集所有需要登录的用户的公钥，即 id_rsa.pub 文件，把所有公钥导入到 /home/git/.ssh/authorized_keys 文件里，一行一个 初始化 Git 仓库：先选定一个目录作为 Git 仓库（服务器上的 Git 仓 库通常都以 .git 结尾），输入 sudo git init --bare sample.git ，Git 会创建一个裸仓库，没有工作区 把 owner 改为 git ： sudo chown -R git:git sample.git 禁用 shell 登录：出于安全考虑，第二步创建的 git 用户不允许登录 shell，可以通过编辑 /etc/passwd 文件完成，找到类似下面的一行： git❌1001:1001:,,,:/home/git:/bin/bash 改为 git❌1001:1001:,,,:/home/git:/usr/bin/git-shell 这样，git 用户可以正常通过 ssh 使用 git，但无法登录 shell，因为 git 用户指定的 git-shell 每次一登录就自动退出。 克隆远程仓库：现在可以通过 git clone 命令克隆远程仓库， git clone git@server:.../sample.git 另： 要管理公钥，用 Gitosis 要控制权限，用 Gitolite ","date":"2019-04-06","objectID":"/2019-03-26-git/:4:2","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"Ref Git Git 教程 - 廖雪峰的官方网站 Git 远程操作详解 - 阮一峰的网络日志 Git 常用命令 - Gityuan 博客 | 袁辉辉的 Android 博客 ","date":"2019-04-06","objectID":"/2019-03-26-git/:5:0","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"ChangeLog 2019.04.07 贴上阮一峰关于 Git 博客链接，供下次学习 2019.04.06 学习廖雪峰 Git 教程的笔记 ","date":"2019-04-06","objectID":"/2019-03-26-git/:6:0","tags":["技术","工具"],"title":"Git 使用指南","uri":"/2019-03-26-git/"},{"categories":["tech"],"content":"阿里云快捷登录 在阿里云的控制台中复制服务器的公网 IP，我的是 47.102.121.213 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:1:0","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"免密登录 在本地执行命令（按提示输入密码），向服务器发送自己的公钥文件 ssh-copy-id -i 公钥文件 root@服务器ip 此时阿里云上的 ~/.ssh/authorized_keys 与本地 ~/.ssh/id_rsa.pub 一致，即可免密登录阿里云 ssh root@服务器ip 若重新格式化磁盘，则需要在目录 ~/.ssh 下的 known_hosts 中的 47.102.121.213 ，才能登录阿里云。 此外，也可将自己的私钥加入 ssh-agent，ssh 代理，它会帮你自动输入密码短语 passphrase # 加入代理，输入你的密码短语 ssh-add ~/.ssh/id_rsa # 查看ssh代理的内容 ssh-add -l ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:1:1","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"配置服务器 Host 在本地 ~/.ssh 目录下新建 config ，输入以下内容 Host aliyun HostName 47.102.121.213 User root IdentitiesOnly yes 保存退出后即可用 ssh aliyun 登录。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:1:2","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"修改 hostname 登录服务器后会发现，服务器实例名称是一串冗长的字母和数字，可在阿里云服务器上修改 etc/hostname ，例如 aliyun ，并 reboot 使之生效。此时终端命令行的开头变成 root@aliyun: ，更美观。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:1:3","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"安装相关软件 服务器系统是 Ubuntu 16.04.6 LTS 部署 Django 需要用到 Git、Pytohn3、pip3、virtualenv、Nginx ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:2:0","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"安装 Git apt-get update apt-get upgrade apt-get install git 生成公钥、密钥，并且在 github 上配置 ssh-keygen -t rsa -C \"your email\" cat ~/.ssh/id_rsa.pub 将输出的公钥添加到 GitHub，settings -\u003e SSH and GPG keys -\u003e New SSH key ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:2:1","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"安装 Pytohn3、pip3、virtualenv apt-get install python3 python3-pip pip3 install virtualenv 安装 virtualenv 时，报错 Traceback (most recent call last): File \"/usr/bin/pip3\", line 11, in \u003cmodule\u003e sys.exit(main()) File \"/usr/lib/python3/dist-packages/pip/__init__.py\", line 215, in main locale.setlocale(locale.LC_ALL, '') File \"/usr/lib/python3.5/locale.py\", line 594, in setlocale return _setlocale(category, locale) locale.Error: unsupported locale setting 终端执行 export LC_ALL=C 可暂时解决该问题。 可在 .bashrc 中添加 # locale export LC_ALL=C 并运行 source .bashrc 重新安装 virtualenv pip3 install virtualenv 切入到目录 /root/sites/stanine.top/ ，输入一下命令建立虚拟环境，取名为 env virtualenv --python=python3 env 这里使用 –python=python3 来指定克隆 Python3 的环境，如果不特别指定的话 Virtualenv 默认克隆的是 Python2 的环境。 使用虚拟环境，在终端输入source env/bin/activate ，退出虚拟环境，输入deactivate 。如果项目开发完成后想删除虚拟环境，直接删除虚拟环境目录即可。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:2:2","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"安装 Nginx apt-get install nginx ubantu 安装完 Nginx 后，文件结构大致为： 所有的配置文件都在 /etc/nginx下； 启动程序文件在 /usr/sbin/nginx下； 日志文件在 /var/log/nginx/下，分别是access.log和error.log； 并且在 /etc/init.d下创建了启动脚本nginx。 在阿里云 -\u003e ECS -\u003e 安全组 -\u003e 配置规则，添加 80 端口以通过 HTTP 服务访问网站，通过 netstat -ant |grep 80 可查看 80 端口的监听状况。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:2:3","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"启动 Ngnix 服务 Nginx 是用来处理静态文件请求的，比如当我们访问一个博客文章详情页面时，服务器会接收到下面两种请求： 显示文章的详情信息，这些信息通常保存在数据库里，因此需要调用数据库获取数据 图片、css、js 等存在服务器某个文件夹下的静态文件 对于前一种请求，博客文章的数据需要借助 Django 从数据库中获取，Nginx 处理不了，它就会把这个请求转发给 Django，让 Django 去处理。而对于后一种静态文件的请求，只需要去这些静态文件所在的文件夹获取，Nginx 就会代为处理，不再麻烦 Django。 用 Django 去获取静态文件是很耗时的，但 Nginx 可以很高效地处理，这就是我们要使用 Nginx 的原因（当然其功能远不止这些）。 Nginx 启动、停止和重启 /etc/init.d/nginx start # 启动 /etc/init.d/nginx stop # 停止 /etc/init.d/nginx restart # 重启 或 service nginx start service nginx stop service nginx restart 启动后，在浏览器输入 IP 地址 47.102.121.213，看到如下页面说明 Nginx 启动成功了。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:2:4","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"本地建立 Django 项目 先在本地建立 Django 并测试，在同步到阿里云。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:3:0","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"建立 Django 项目 建立 Django 项目，django-admin startproject stanine ，目录结构为 stanine\\ manage.py # Django 为我们生成的管理这个项目的 Python 脚本文件 stanine\\ __init__.py settings.py urls.py wsgi.py 运行 python manage.py runserver 命令就可以在本机上开启一个 Web 服务器 修改 settings.py 文件 # 把英文改为中文 LANGUAGE_CODE = 'zh-hans' # 把国际时区改为中国时区 TIME_ZONE = 'Asia/Shanghai' 添加 Django APP，python manage.py startapp stanineapi ，目录结构为 stanineapi\\ __init__.py admin.py apps.py migrations\\ __init__.py models.py tests.py views.py 修改 settings.py 文件，在 INSTALLED_APPS 数组添加 stanineapi ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:3:1","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"创建 Django 项目数据库模型 编写博客模型代码，修改 stanineapi/models.py # coding: utf-8 from django.db import models # Create your models here. class Category(models.Model): # Django 要求模型必须继承 models.Model 类 zhname = models.CharField(max_length=100) enname = models.CharField(max_length=100) class Tag(models.Model): zhname = models.CharField(max_length=100) enname = models.CharField(max_length=100) class Sagebio(models.Model): \"\"\" CharField 指定了分类名 name 的数据类型，CharField 是字符型， CharField 的 max_length 参数指定其最大长度，超过这个长度的分类名就不能被存入数据库。 指定 CharField 的 blank=True 参数值后就可以允许空值 \"\"\" zhname = models.CharField(max_length=100, blank=True) enname = models.CharField(max_length=100, blank=True) # 文章正文，我们使用了 TextField。 # 存储比较短的字符串可以使用 CharField，但对于文章的正文来说可能会是一大段文本，因此使用 TextField 来存储大段文本。 bio = models.CharField() # 这两个列分别表示文章的创建时间和最后一次修改时间，存储时间的字段用 DateTimeField 类型。 created_time = models.DateTimeField() modified_time = models.DateTimeField() # sage 只属于一个分类，使用的是 ForeignKey，即一对多的关联关系 # 可以有多个或没有标签，使用的是 ForeignKey，即多对多的关联关系 category = models.ForeignKey(Category) tags = models.ManyToManyField(Tag, blank=True) 运行 python manage.py createsuperuser 命令并根据提示创建用户。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:3:2","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"迁移数据库 选择数据库版本，这里选择自带的 sqlite3 切换到 manage.py 文件所在的目录下，分别运行 python manage.py makemigrations 和 python manage.py migrate 命令 查看数据库表创建语句，python manage.py sqlmigrate stanineapi 0001 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:3:3","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"用 Django 的方式操作数据库 存数据 在 manage.py 所在目录下运行 python manage.py shell 命令 from stanineapi.models import Sagebio, Category, Tag c = Category(enname='action \u0026 philosophy') c.zhname = '行动与哲学' c.save() t = Tag(enname='like', zhname='喜欢') t.save() 取数据 objects 是我们的模型管理器，它为我们提供一系列从数据库中取数据方法。 all 方法，表示把对应的数据全部取出来，是一个类似于列表的数据结构（QuerySet）； get 返回一条记录数据，如有多条记录或者没有记录，get 方法均会抛出相应异常。 from stanineapi.models import Sagebio, Category, Tag c = Category.objects.get(zhname='行动与哲学') c # \u003cCategory: action \u0026 philosophy\u003e Category.objects.all() # \u003cQuerySet [\u003cCategory: action \u0026 philosophy\u003e]\u003e 删数据 p = Tag.objects.get(enname='test') p # \u003cTag: test\u003e p.delete() Tag.objects.all() # \u003cQuerySet []\u003e 重置 migration 若不需要原有的数据库数据 删除数据库所有表 删除项目的 migration 模块中的所有文件，除了 init.py 执行脚本 python manage.py makemigrations 和 python manage.py migrate 若不想删除现有的数据库，只想重新建立 migration 文件 保证目前的 migration 文件与数据库同步，通过执行 python manage.py makemigrations ，若提示 No changes detected ，则可以继续 通过执行 python manage.py showmigrations 查看所有 app 及对应的已生效的 migration 文件 通过执行 python manage.py migrate --fake stanineapi zero 删除 stanineapi 这个 app 下的 migrations 模块中除了 init.py 的所有文件(程序会再次生成 0001_intial.py 之类的文件） 执行 python manage.py migrate --fake-initial ，在数据库中的 migrations 表中记录当前这个 app 执行到 0001_initial.py ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:3:4","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"视图 绑定 URL 与视图函数 首先 Django 需要知道当用户访问不同的网址时，应该如何处理这些不同的网址（即所说的路由）。Django 的做法是把不同的网址对应的处理函数写在一个 urls.py 文件里，当用户访问某个网址时，Django 就去会这个文件里找，如果找到这个网址，就会调用和它绑定在一起的处理函数（叫做视图函数）。 在 stanineapi 目录下新建 urls.py ，写入 from django.conf.urls import url from . import views urlpatterns = [ ''' 网址是用正则表达式写的，Django 会用这个正则表达式去匹配用户实际输入的网址，如果匹配成功，就会调用其后面的视图函数做相应的处理 比如说我们本地开发服务器的域名是 http://127.0.0.1:8000，那么当用户输入网址 http://127.0.0.1:8000 后， Django 首先会把协议 http、域名 127.0.0.1 和端口号 8000 去掉，此时只剩下一个空字符串，而 r'^$' 的模式正是匹配一个空字符串 于是二者匹配，Django 便会调用其对应的 views.index 函数 name，这个参数的值将作为处理函数 index 的别名 ''' url(r'^$', views.index, name='index'), ] 编写视图函数 Web 服务器的作用就是接收来自用户的 HTTP 请求，根据请求内容作出相应的处理，并把处理结果包装成 HTTP 响应返回给用户 修改 stanineapi/views.py from django.http import HttpResponse def index(request): ''' 首先接受了一个名为 request 的参数，这个 request 就是 Django 为我们封装好的 HTTP 请求， 它是类 HttpRequest 的一个实例。然后我们便直接返回了一个 HTTP 响应给用户， 这个 HTTP 响应也是 Django 帮我们封装好的，它是类 HttpResponse 的一个实例，只是我们给它传了一个自定义的字符串参数 ''' return HttpResponse(\"欢迎访问我的博客首页！\") 配置项目 URL 之前绑定了 URL 和视图函数 index，但是 Django 并不知道。Django 匹配 URL 模式是在 stanine\\ 目录的 urls.py 下的，所以我们要把 stanineapi 应用下的 urls.py 文件包含到 stanine\\urls.py 里去。 from django.contrib import admin from django.urls import path from django.conf.urls import url, include #+ urlpatterns = [ path('admin/', admin.site.urls), url(r'', include('stanineapi.urls')), #+ ] 运行 python manage.py runserver ，打开浏览器查看效果。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:3:5","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"部署 Django ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:4:0","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"部署前的项目配置 Django 项目中会有一些 CSS、JavaScript 等静态文件，为了能够方便地让 Nginx 处理这些静态文件的请求，可以把项目中的全部静态文件收集到一个统一的目录下。在 settings.py 添加如下配置 STATIC_URL = '/static/' # 加入下面的配置 STATIC_ROOT = os.path.join(BASE_DIR, 'static') STATIC_ROOT 指明了静态文件的收集目录，即项目根目录（BASE_DIR）下的 static 文件夹。 为了安全起见，在生产环境下需要关闭 DEBUG 选项以及设置允许访问的域名。打开 settings.py 文件，找到 DEBUG 和 ALLOWED_HOSTS 这两个选项，将它们设置成如下的值： DEBUG = False ALLOWED_HOSTS = ['127.0.0.1', 'localhost ', '47.102.121.213'] ALLOWED_HOSTS 是允许访问的域名列表，127.0.0.1 和 localhost 是本地访问的域名。 项目还会依赖一些第三方 Python 库，为了方便在服务器上一次性安装，将全部依赖写入一个叫 requirements.txt 的文本文件中。激活本地的虚拟环境，并进入项目的根目录，运行 pip3 freeze \u003e requirements.txt 命令。这时项目根目录下会生成了一个 requirements.txt 的文本文件，其内容记录了项目的全部依赖。 最后，将代码上传到 GitHub 等代码托管平台。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:4:1","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"拉取代码并安装项目依赖 进入到 ~/sites/stanine.top/ 目录下，激活虚拟环境，接着从代码仓库把项目代码拉取到 stanine.backend/ 路径下。 进入到项目根目录，即 requirements.txt 所在的目录，安装项目的全部依赖 pip install -r requirements.txt ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:4:2","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"收集静态文件 虚拟环境下继续运行 python manage.py collectstatic 命令收集静态文件到 static 目录下 python manage.py collectstatic ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:4:3","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"配置 Nginx 并启动服务 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:5:0","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"配置 Nginx 先在服务器的 /etc/nginx/sites-available/ 目录下新建一个配置文件，文件名一般就设置为域名，api.stanine.top。写上配置内容 server { charset utf-8; listen 80; server_name 47.102.121.213; # 服务的域名 location /static { # 所有 URL 带有 /static 的请求均由 Nginx 处理，alias 指明了静态文件的存放目录 alias /root/sites/stanine.top/stanine-backend/static; } location / { # 其它请求转发给 Django 处理 proxy_set_header Host $host; proxy_pass http://127.0.0.1:8000; # proxy_pass 后面使用了 unix 套接字，其作用是防止端口冲突 #proxy_pass http://unix:/tmp/api.stanine.top.socket; #index test.html index.htm index.nginx-debian.html; } } 在 /etc/nginx/sites-available/ 放置了配置文件，而被启用网站的目录在 /etc/nginx/sites-enabled/，需要建立软链 sudo ln -s /etc/nginx/sites-available/api.stanine.top /etc/nginx/sites-enabled/api.stanine.top PS：软链中目标路径必须是绝对路径 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:5:1","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"启动服务 在项目根目录下，运行 python manage.py runserver ，打开浏览器查看效果，47.102.121.213/admin 可登陆后台。 但是阿里云下线时，服务也会停止。一下命令可在下线情况下，仍然提供服务 nohub python manage.py runserver \u0026 nohup 命令可在注销后运行后台中的程序，\u0026 可以把一个程序放在后台运行。 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:5:2","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"参考 使用 Nginx 和 Gunicorn 部署 Django 博客_追梦人物的博客 阿里云服务器从零开始部署博客 | 无趣的小帕 linux 的 nohup \u0026 和 daemon 总结(转) - 平和的心 - 博客园 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:6:0","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["tech"],"content":"ChangLog 2019-04-06 初稿 ","date":"2019-04-06","objectID":"/2019-04-06-deploy-django/:7:0","tags":["技术","Python"],"title":"阿里云从零部署 Django","uri":"/2019-04-06-deploy-django/"},{"categories":["info"],"content":"速查表 字符 描述 \\ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\\n’ 匹配一个换行符。序列 ‘\\’ 匹配 “\\” 而 “(” 则匹配 “(“。 ^ 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\\n’ 或 ‘\\r’ 之后的位置。 $ 匹配输入字符串的结束位置。如果设置了 RegExp 对象的 Multiline 属性，$ 也匹配 ‘\\n’ 或 ‘\\r’ 之前的位置。 * 匹配前面的子表达式零次或多次。例如，zo*能匹配 z 以及 zoo。*等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 zo 以及 zoo，但不能匹配 z。+ 等价于 {1,}。 ? 匹配前面的子表达式零次或一次。例如，do(es)?可以匹配 do 或 does 中的 do。? 等价于 {0,1}。 {n} n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 Bob 中的 o，但是能匹配 food 中的两个 o。 {n,} n 是一个非负整数。至少匹配 n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。 {n,m} m 和 n 均为非负整数，其中 n\u003c=m。最少匹配 n 次且最多匹配 m 次。例如，o{1,3}将匹配 fooooood 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。 ? 当该字符紧跟在任何一个其他限制符后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 oooo，’o+?’ 将匹配单个 o，而 o+将匹配所有 o。.匹配除\\n 之外的任何单个字符。要匹配包括\\n 在内的任何字符，请使用像(.|\\n)的模式。 (pattern) 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在 VBScript 中使用 SubMatches 集合，在 JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(’ 或 ‘)’。 (?:pattern) 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。 (?=pattern) 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?=95|98|NT|2000)’ 能匹配 “Windows 2000” 中的 “Windows” ，但不能匹配 “Windows 3.1” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 (?!pattern) 负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95|98|NT|2000)’ 能匹配 “Windows 3.1” 中的 “Windows”，但不能匹配 “Windows 2000” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 x|y 匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。 [xyz] 字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。 [^xyz] 负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。 [a-z] 字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。 [^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。 \\b 匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。 \\B 匹配非单词边界。’er\\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。 \\cx 匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。 \\d 匹配一个数字字符。等价于 [0-9]。 \\D 匹配一个非数字字符。等价于 [^0-9]。 \\f 匹配一个换页符。等价于 \\x0c 和 \\cL。 \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ。 \\r 匹配一个回车符。等价于 \\x0d 和 \\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。 \\S 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。 \\t 匹配一个制表符。等价于 \\x09 和 \\cI。 \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。 \\w 匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。 \\W 匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。 \\xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\\x41′ 匹配 “A”。’\\x041′ 则等价于 ‘\\x04’ \u0026 “1”。正则表达式中可以使用 ASCII 编码。 \\num 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\\1′ 匹配两个连续的相同字符。 \\n 标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。 \\nm 标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。 \\nml 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。 \\un 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)。 中文字符 [\\u4e00-\\u9fa5] 双字节字符 [^\\x00-\\xff] email \\w+([-+.]\\w+)@\\w+([-.]\\w+).\\w+([-.]\\w+)* ","date":"2019-03-10","objectID":"/2019-03-10-regular-expressions-quicklook/:1:0","tags":["技术","工具","清单"],"title":"正则表达式常用速查","uri":"/2019-03-10-regular-expressions-quicklook/"},{"categories":["info"],"content":"JavaScript replace() 语法: str.replace(regexp|substr, newSubStr|function) 例子 function styleHyphenFormat(propertyName) { function upperToHyphenLower(match) { return \"-\" + match.toLowerCase(); } return propertyName.replace(/[A-Z]/g, upperToHyphenLower); } ","date":"2019-03-10","objectID":"/2019-03-10-regular-expressions-quicklook/:2:0","tags":["技术","工具","清单"],"title":"正则表达式常用速查","uri":"/2019-03-10-regular-expressions-quicklook/"},{"categories":["info"],"content":"参考 正则表达式速查表 – Shadow Walker 正则表达式在线测试 | 菜鸟工具 String.prototype.replace() - JavaScript | MDN ","date":"2019-03-10","objectID":"/2019-03-10-regular-expressions-quicklook/:3:0","tags":["技术","工具","清单"],"title":"正则表达式常用速查","uri":"/2019-03-10-regular-expressions-quicklook/"},{"categories":["info"],"content":"ChangeLog 2019-05-12 添加 replace() 2019-04-20 添加中文字符 2019-03-10 初稿 ","date":"2019-03-10","objectID":"/2019-03-10-regular-expressions-quicklook/:4:0","tags":["技术","工具","清单"],"title":"正则表达式常用速查","uri":"/2019-03-10-regular-expressions-quicklook/"},{"categories":["learning"],"content":" 《翻译乃大道》读书笔记 中文常态：措辞简洁，语法对称，句式灵活，声调铿锵。 中文病态：引入大量的英文表达，繁琐生硬。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:0:0","tags":["写作","读书","清单"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["learning"],"content":"中文最常见的常态和病态 项目 坏例子 好例子 避免英式抽象名词作主语 他的收入的减少改变了他的生活方式 他收入减少，于是改变生活方式 中文主语可以是一件事情 国语的推行，要靠大家努力 推行国语，要靠大家努力 避免文字义肢，动词变为万能动词+抽象名词，对「作出」、「进行」滥用 听众对访问教授作出了十分热烈的反应 听众对访问教授反应十分热烈 避免学术术语滥用，「性、型、度」 这本书可读性颇高。他是热情型的人。前瞻性等等 这本书引人入胜。他是个热情的人。 避免……之一 李广乃汉朝名将之一 李广乃汉朝名将。 避免「与、及、和、而」过多使用 台北显然比曼谷起步更早及迈步更快 台北显然比曼谷起步更早、迈步更快。 避免介词乱用，「关于、有关、中间、由于、使得」 由于他家境贫寒，使得他只好休学。 他家境贫寒，只好休学。 避免动词降副词 他苦心孤诣地想出一套好办法来。 他苦心孤诣，想出一套好办法。 避免过多使用「的」 参差的斑驳的黑影。 参差而斑驳的黑影。 中文可以后置形容词，避免前修饰太长。 我看见一个长得像你兄弟的男人 我看见一个男人，长得像你兄弟。 避免被动，中文多主动语气 他这意见不被大家接受。他不被获准入学。糖都被吃完了。 他这意见大家都不接受。他未获准入学。糖都吃完了。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:1:0","tags":["写作","读书","清单"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["learning"],"content":"词性被带偏 下面按照词性，分别介绍中文中各种词的用法被英文带偏的情况。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:2:0","tags":["写作","读书","清单"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["learning"],"content":"名词 主语 英文喜欢用抽象名词，「他的收入的减少改变了他的生活方式」，中文的说法是以具体名词，尤其是人做主词：「他因为收入减少而改变生活方式」，或者「他收入减少，乃改变生活方式」。 中文常用一件事情(一个短句) 做主词，英文则常用一个名词(或名词词组)。「横贯公路再度坍方，是今日的头条新闻」，是中文的说法。「横贯公路的再度坍方，是今日的头条新闻」，英文好用抽象名词，其结果是软化了动词，也可以说是架空了动词。 中文 英文 具体名词 抽象名词 一个短句（一件事） 名词或名词片语 宾语 英语好用抽象动词，架空了动词。科学、社会学和公文的用语侵入生活，迫使许多动词变成了万能动词加抽象名词的片语，中文也呈现这种病态。 动词＋抽象名词： 本校的校友对社会作出了重大的贡献。 昨晚的听众对访问教授作出了十分热烈的反应。 原本应有的样子： 本校的校友对社会贡献很大。 昨晚的听众对访问教授反应十分热烈。 单复数数量词 区分单复数是欧洲语文的惯例，而中文的名词没有复数的变化。在中文中，可以使用「众」、「们」来表示多数，但是很多时候并不需要复数尾。 西化的弊病表现在用「人们」取代「人人」、「大家」等词，而「听众们」，「观众们」这样众们并用，既显累赘，又语句不通。 中文词不分数量，中文原无「……之一」的句法，现在我们说「观众之一」实在是不得已。至于这样的句子：「作为竹林七贤之一的刘伶」，不但「作为」二字纯然多余，「之一的」也文白来杂，读来破碎，把主词「刘伶」压在底下，更是扭捏作态。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:2:1","tags":["写作","读书","清单"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["learning"],"content":"辅助词 连接词 英文用\"and\"连接词性相同的词，中文往往有相应的词，或者任其并列。例如「夫妻」、「你我」，「东南西北」。 在连接词使用的不良趋势有两条： 不用连接词的地方用上连接词 「和」，「与」，「及」，「以及」包办了所有连接词，「而」，「并」，「而且」等几乎绝迹 介词 介词在英文里的用途远比中文里重要，简直成了英文的润滑剂。英文的不及物动词加上介词，往往变成了及物动词，英文简直离不了介词。中文则不尽然。「有关」、「关于」、「由于」之类，大概是用得最滥的介词了：由于好奇心的驱使，我向窗内看了一眼。英文在形式上重逻辑，喜欢交代事物物的因果关系。中文则不尽然。「清风徐来，水波不兴」，其中当然有因果关系，但是中文只用上下文作不言之喻。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:2:2","tags":["写作","读书","清单"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["learning"],"content":"修饰词 副词 英文的副词形式对中文为害尚不显著，但也已经开始了。例如这样的句子：「大家苦中作乐地竟然大唱其民谣」。「苦中作乐」本是动词，套上副词语尾的「地」就降为副词了。这么一来，文章仍然清楚，文法上却主客分明，太讲从属的关系，有点呆板。若把「地」一律删去，代以逗点，不但可以摆脱这主客的关系，语气也会灵活一些。 滥用「成功地」在日常生活中很常见。例如，国父孙中山先生成功地推翻了满清。「成功地」在这句话中毫无意义，和「推翻」的意思重复了。 形容词 在白话文里，这「的」字成了形容词除不掉的尾巴：「灰暗的凄冷的天空」改成「灰暗而凄冷的天空」，「夜色来袭」何等有力，「夜色的来袭」就松软下来了。 形容词或修饰语(modifier) 可以放在名词之前，谓之前饰，也可以跟在名词之后，谓之后饰。目前的白话文，不知何故，几乎一律前饰，似乎不懂后饰之道。其实文言文的句子往往是后饰的，例如司马迁写项羽：*籍长八尺余，力能扛鼎，才气过人。*在当代白话文里，很可能变成：「项籍是一个身高八尺，力能扛鼎，同时才气过人的汉子」。后饰句可以一路加下去，虽长而不失自然，富于弹性。前饰句以名词压底，一长了，就显得累赘，紧张，不胜负担。所以前饰句是关闭句，后饰句是开放句。 白话文中的形容词主要有一下弊病： 形容词用太多的「的」来组织，导致啰嗦而软弱。 用抽象名词＋「的」来组成形容词。 形容词可以前饰或后饰，现在的白话文几乎一律前饰。 后饰句是开放句可以一路加下去，虽长而不失自然，富于弹性。 前饰句是关闭句，太长就显得累赘。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:2:3","tags":["写作","读书","清单"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["learning"],"content":"动词 动词西化的危机另有两端：一是单纯动词分解为「弱动词+ 抽象名词」的复合动词。不说「一架客机失事，死了九十八人」，却说「一架客机失事，造成九十八人死亡」，实在是迂回作态。 另一端是采用被动词语气。目前西化的趋势，是在原来可以用主动语气的场合改用被动语气。「他被选为议长」不如「他当选为议长」。「他被指出许多错误」也不如「有人指出他许多错误」。 以下三种句式在英文中都很常见，而中文中只有第一种最常见，第三种更多使用主动语气，如「糖都吃完了」。 哥伦布发现了新大陆。 新大陆被哥伦布发现了。 新大陆被发现了 在可以使用主动语气的场合，改用被动语气，往往失之生硬。使用主动语气更佳。另一个毛病就是被动语气和「被」字绑定使用，忽视了其他的字。 中文的西化有重有轻，有暗有明，但其范围愈益扩大，其现象愈益昭彰，颇有加速之势。以上仅就名词、连接词、介词、副词、形容词、动词等西化之病稍加分析，希望读者能举一反三，知所防范。 中文发展了好几千年，从清通到高妙，自有千锤百炼的一套常态。谁要是不知常态为何物而贸然自诩为求变，其结果也许只是献拙，而非生巧。变化之妙，要有常态衬托才显得出来。一旦常态不存，余下的只是乱，不是变了。 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:2:4","tags":["写作","读书","清单"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["learning"],"content":"中文常态、变态对比 中文常态 中文变态 措辞简洁 措辞繁琐 句式灵活 句式生硬 声调铿锵 邋遢冗余 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:3:0","tags":["写作","读书","清单"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["learning"],"content":"中文危机：西化 成语普及度低 西化太快，非取长补短，破坏了中文自然生态 中文使用习惯 中文西化使用习惯 例子 具体名词，尤其是人，做主词 喜用抽象名词 「他的收入的减少改变了他的生活方式」vs 「他因为收入减少而改变生活方式」 用一件事情（一个短句）做主词 常用一个名词（或名词词组） 「推行的国语，要靠大家的努力」vs「推行国语，要靠大家努力」 无弱动词现象 弱动词现象(喜欢把简单明了的动词分解成「万能动词＋抽象名词」的片词) 例子 1：press vs apply pressure 例子 2：昨晚的听众对访问教授反应十分热烈。 vs昨晚的听众对访问教授作出了十分热烈的反应。 被传染 名词成灾、伪学术化、伪术语（pseudo-jargon） first step vs initial phase 「这本传记引人入胜」vs「这本传记的可读性颇高」「更有远见」 vs 「更具前瞻性」 被传染 主义泛滥 爱国精神 vs 爱国主义 无单复数变化，却被传染 单复数变化 「民众」vs「民众们」（滥用“们”）刘伶是竹林七贤的同人 vs 作为竹林七贤之一的刘伶（改写去掉“之一”）李广乃汉朝名将 vs 李广乃汉朝名将之一（“之一”多余） 被传染（原来不用连接词的地方，在 and 意识的教唆下，都装上了连接词；而所谓连接词都由「和」、「与」、「及」、「以及」包办，可是灵活而宛转的「而」、「并」、「而且」等词，几乎要绝迹了） 词性相同的字眼常用 and 来连接 夫妻 vs man and wife 你我 vs you and I 前后 vs back and forth 介词滥用 介词在英文里的用途远比中文里重要，简直成了英文的润滑剂。英文的不及物动词加上介词，往往变成了及物动词，例如 look after, take in 皆是。介词词组（prepositional phrase）又可当作形容词或助词使用，例如 a friend in need, said it in earnest。 隐含逻辑关系 重因果，重逻辑 「清风徐来，水波不兴」 vs 「因为清风徐来，所以水波不兴」 英文助词滥用，滥用地、的、得，用到形容词，似乎就离不开「的」 助词很重要 他苦心孤诣想出一套好办法来。 vs 他苦心孤诣地想出一套好办法来。 被中文 用学术面貌的抽象名词加助词构成形容词 很难 vs 难度很高的 热情的人 vs 热情型的人 白话文形容词过分前置 前置居多 「我见到一个男人，长得像你兄弟。」 vs 「我见到一个长得像你兄弟的男人。」 被传染 多用被动语气 你这句话吓不倒我。 vs 我不会被你这句话吓倒。 被打 vs 挨打 （即使是被动语气滥用“被”） ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:4:0","tags":["写作","读书","清单"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["learning"],"content":"CHangeLog 2018-03-15 初稿 ","date":"2018-03-15","objectID":"/2018-03-15-good-chinese-bad-chinese/:5:0","tags":["写作","读书","清单"],"title":"中文的常态与病态","uri":"/2018-03-15-good-chinese-bad-chinese/"},{"categories":["tech"],"content":" 如今社会，信息过载，领域丛生，我们常常需要接触一些陌生的知识，一些闻所未闻的领域。那以使用工具著称的人类，是否能借助软件快速了解一个领域呢？那些每天都需要看论文的学者早已发明了快速进入一个领域的方法，在下学些皮毛，稍作实践，特来分享一下。 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:0:0","tags":["学习","工具","实践策略"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["tech"],"content":"工具包 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:1:0","tags":["学习","工具","实践策略"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["tech"],"content":"HistCite 引文分析工具 在下大概一年前从罗昭锋老师博客知道了 HistCite，然后从Tsing 的 HistCite 使用教程获得资源和使用方法。更多实例和教学可见： 快速进入陌生领域： HistCite 使用教程 玩转文献调研 - 网易云课堂 安装好软件后，只需从 WOS 上导出的 txt 文件（一次最多可导出 500 条记录），不用做任何修改，只要把全部的 txt 放到 TXT 文件夹里面，然后双击 main.exe 即可一键完成加载。软件使用过程中主要会遇到以下几个概念： HistCite 使用过程中主要会遇到五个概念——GCS、LCS、LCR、CR， LCS 和 LCR 更重要，它们分别代表了与本领域相关联的被引用数和引用数， LCS 值高的文章一般是重要的新发现或者新解释， LCR 值高的一般是综述类文章。 GCS = global citation score ，即总引用频次，它表示这篇文章被整个 WOS 数据库中所有文献引用的次数。 LCS = local citation score ，即本地引用次数，它表示这篇文章在当前数据集中被引用的次数。如果一篇文章的 LCS 值高，意味着它是领域内的重要文献。 LCR = local cited references ，本地参考文献数，它表示这篇文献的参考文献在当前数据集中的数量，即这篇文献引用别人的情况。如果一篇文章的 LCR 值高，意味着它引用了大量的 领域内文献，极有可能是综述文章。 CR = cited references ，参考文献数，它表示这篇文章的参考文献在整个 WOS 数据库中的数量。 通过界面上方的 “Cited References” ，我们可以进入被引文献的列表。在这个列表中，我们发现很多文献后面都有个绿色的“+”号，这表明这篇文献并没有被本地数据集收录，也就是说通过关键词搜索并没有检索到的文献。每篇文献最后有个 Recs 值，表示这篇文献在当前数据集中被引频次，通过 Recs 排序，我们很快就可以定位重要的被遗漏的文献。 网络图中：圆圈越大被引次数越多，箭头指向的对象是被引用方 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:1:1","tags":["学习","工具","实践策略"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["tech"],"content":"Google scholar \u0026 WOF Web of Science 是质量最高的文献索引网站，收录有 SCIE（SCI Expanded）和 SSCI 文献，使用方法前面教程有详细介绍。 Google Scholar 和 ScienceDirect 主要用来下载文献全文，不能翻墙的朋友可用 Sci-Hub 代替 Google scholar 。 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:1:2","tags":["学习","工具","实践策略"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["tech"],"content":"Zotero 或类似知识管理软件 Zotero 是及其强大的知识管理软件，最大的亮点是：可以用 Zotero Connecter 插件在 Chrome 上一键保存网页中所有的文献、书籍、维基百科和对应 PDF。详细教程见阳志平老师的博客。 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:1:3","tags":["学习","工具","实践策略"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["tech"],"content":"案例：快速了解『财务预警』领域 在下的本科毕设 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:2:0","tags":["学习","工具","实践策略"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["tech"],"content":"获取文献 下载文献信息 在 Web of Science 核心合集中检索“bankruptcy prediction”、“Business Failure Prediction\"或“financial distress prediction”，时间限定为 1985 年至今，共计 1983 篇文献。下载这些文献信息及参考文献的数据集（作为本地文献集），保存至 TXT 。 手动添加遗漏文献 将这 1903 篇论文所引用的 38000 多篇论文，按照其在本地文献集的被引用次数从低到高排序，发现仍然有重要文献没有被之前搜索的三个关键词所覆盖。接着手动将遗漏的重要文献在 WOF 上逐一标记，一并导出添加到本地文献集中（实际操作中添加了 23 篇文献，多与企业信用评级相关），此时本地文献集覆盖了财务危机预警领域所有重要的文献（包括所有 SCI、IE 和 SSCI 文献）。 分析领域发展趋势 利用 HistCite 软件对本地文献集进行分析，首先查看一下该领域的发展趋势（此处截取了 1985-2016 年的数据）。 上图显示，财务危机预警领域在 2004 年开始蓬勃发展，而且发展热度总体呈上升趋势。由此可猜测，该领域在 2004 年左右发生重大变革，实际去考察文献发现，该项变革是人工智能方法被引入该领域。 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:2:1","tags":["学习","工具","实践策略"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["tech"],"content":"分析重要文献网络图 由领域总体发展的分析可得出，该领域值得关注的年份缩小到 2004-2017 年共 14 年的时间段里。然后从本地文献集筛选出发表于 2014 年之后的文献，统计这些文献各自被本地论文集引用的次数，对前 50 最高被引的文献，按照引用关系画出网络关系图。其中被引用次数越多的文献，其节点方框越大，节点按照引用文献指向被引用文献的方式连接。 有图可见222 号、319 号、353 号、439 号、442 号、581 号、813 号、868 号、1133 号是重要的综述文献；而 30 号、39 号、68 号、72 号、77 号、87 号、88 号、94 号、95 号、162 号、207 号、222 号、225 号、305 号、314 号、319 号、330 号、436 号、442 号、552 号、548 号是取得重要进展的文献（其中加黑的文献又相对更重要）。 用 Google scholar 搜索重要文献的 DOI ，并一键保存至 Zotero 。 在 Zotero 显示如下： ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:2:2","tags":["学习","工具","实践策略"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["tech"],"content":"寻找牛人 重要文献太多了怎么办？根据人的记忆生存优势，按照学者来整理文献比较有利于记忆。领域内最靠谱的学者是那些呢？这里整理了领域内前 20 本地高被引的学者以及他们在本地文献集中所拥有的文献数和被本地文献集引用的次数总和。 其中 Sun J 和 Li H 两位学者主要活跃于 2006 年至今，研究内容涉及领域的方方面面，Sun J 更是近 10 年只专注于该领域，而且两位学者的 H 指数也高达 20，因此两位学者是相当靠谱的；排在第三和第五的 Ravi V 和 Kumar PR 则主要活跃在 2006-2012 年，主要研究银行的财务危机预警； 排在第四的 Tsai CF 活跃在 2008 年至今，主要研究财务指标等数据特征的选择。 在 Google scholar citation 中搜索 Sun J ，按右上角 Zotero Connector 文件图标，一键下载 Sun J 最高引的文献信息和 PDF 。 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:2:3","tags":["学习","工具","实践策略"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["tech"],"content":"近期分析 分析近十年重要文献 以上分析会倾向于夸大 2008 年之前研究的重要性，因此需要在此按年份进行筛选。接下来筛选出 2008 年及以后的论文来分析，做前 40 最多被本地文献集引用的文献网络关系图。 此图涌现出了一个难以回避的信息，912 号（原来的 1133 号，其作者是 Sun J 等人）是及其重要的综述文献，通过它可以快速理清整个领域截止至 2014 年的发展情况。 发现前沿 前辈们做了这么多研究，那还剩什么可以做呢？ 结合 2013 年至今的文献网络关系图，可总结为如下几个方向： 构建简单而准确的财务危机预警模型 构建动态财务预警模型 构建基于不平衡数据集的财务预警模型 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:2:4","tags":["学习","工具","实践策略"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["tech"],"content":"延伸学习 科学网—如何使用 CiteSpace 的一组示范及常见问题解答 - 陈超美的博文 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:3:0","tags":["学习","工具","实践策略"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["tech"],"content":"ChangeLog 2018-01-07 初稿 ","date":"2018-01-07","objectID":"/2018-01-07-quickenter-new-academic-realm/:4:0","tags":["学习","工具","实践策略"],"title":"如何快速了解一个学术领域","uri":"/2018-01-07-quickenter-new-academic-realm/"},{"categories":["personal"],"content":" 过往三年，迷茫、求索，仍然迷茫、接着求索……如今幡然醒悟，得一曲径，通向深林幽处。过往三年，如在迷宫中抱头鼠窜，有幸遇见些贵人、师友指点迷津，万分感谢！ 三年前，一位少年，自己狠狠绊了自己一跤。一直顺风顺水的他，突然不知所措，把人生方向盘交给了别人。于是，一个大转弯直接把他甩晕过去。醒来之后，少年内心无比凌乱，四处寻求安抚心灵的方法。次年夏天，少年上山闭关禅修十日，早晨四点至晚上九点，其间除了两餐，其余时间都在练习禅修的技巧。第八天，少年学会了控制自己的意识，心不再心猿意马，世界有了秩序。第十天，少年觉得内心就跟小时候玩耍白石滩一样洁白光亮。 ","date":"2018-01-01","objectID":"/2018-01-01-reading-history-2/:0:0","tags":["成长","读书"],"title":"一个人的阅读史（二）","uri":"/2018-01-01-reading-history-2/"},{"categories":["personal"],"content":"遇见贵人 下山后，少年开始用学来的技巧应对千变万化的世俗世界。不久，少年厌倦了日复一日的抵御，空明的内心又失去了秩序。所幸的是，少年凭借自己的品味，在信息过载的世界找到了开智正典。书单中有 4 本是少年曾经看过的，那 4 本都是他看过最好的书。 顺着书单，少年找到了开书单的人，略似少林寺的扫地僧，他叫阳志平。少年开始关注他，花了半年时间读完他的博客，然后又参加了他的认知写作课，跟他发生更多的交集。由于根基太浅，学得慢，少年花了整整两年的时间才储备了极少量的基本常识，但这已经改写了他的生命历程。 从黑客与画家中，少年知道了世界上有一群有趣的人，他们热爱自己的职业，创造是他们的日常。其实每个人都可以选择自己喜欢的职业，国家唯一强迫公民的征兵制也好多年不执行了。生命可贵，人只能到人间走一回，一定不能屈就。 接着是青年王阳明：行动中的儒家思想，它让少年明白了，即使是“三不朽”的完人，生命历程也是极其曲折，也是多年在错误的方向上求索，一无所获。唯有坚持内心的追求，才会偶有所得，哪怕仅想明白了一件事，都极为幸运。 ","date":"2018-01-01","objectID":"/2018-01-01-reading-history-2/:1:0","tags":["成长","读书"],"title":"一个人的阅读史（二）","uri":"/2018-01-01-reading-history-2/"},{"categories":["personal"],"content":"远离人群 后来，少年又读了这才是心理学和超越智商，两本以一当百的神书。少年了解了作为科学的心理学、三重加工心智模型、常见的思维谬误。此时，少年学会了如何屏蔽媒体、如何过滤大部分泥沙俱下的信息，如何自主安装优秀心智程序，世界开始以不同的面貌呈现在少年的眼前。 怀着好奇心，少年开始接触复杂科学，读了网络、群体与市场、复杂和失败的逻辑。少年惊喜不已，这书单也太神了吧，复杂系统和网络科学实在太迷人了。芸芸众生，或者说网络中的节点，如何在复杂世界中表演着花式失败、如何通过网络关系与其他节点发生连接、如何利用网络中的弱连接和结构洞实现阶级跃迁…… 同时，少年也读了为什么学生不喜欢上学? 、追时间的人、查理·芒格的智慧、穷查理宝典和智识的生产技术，学到了不少学习技巧和增长智慧的方法。结合一些 Zotero、Anki、TextMate 等软件，少年打造了一个从获取知识、管理知识、记忆知识到连接知识、审查连接、输出文章，一套的智识生产系统。这个系统还只是个粗糙的雏形，日后一步步打磨，良性循环，很可能成为少年向往的知识工作室。 至此，少年知道自己已远离了人群，世俗的纷纷扰扰再也不足以击垮少年的精神家园。有了偏离人群的能力，有了偏离人群的动机，但还是不够，少年当时并不知道缺的是什么。 ","date":"2018-01-01","objectID":"/2018-01-01-reading-history-2/:2:0","tags":["成长","读书"],"title":"一个人的阅读史（二）","uri":"/2018-01-01-reading-history-2/"},{"categories":["personal"],"content":"第二序改变 读书之外，少年仍旧在当初别人为他选择的系统里挣扎，依赖原来路径，做些系统内改变。常常学习一整天，回想那些知识点，感慨，“都是些什么破东西”。这些早于计算机科学、认知科学和网络科学，甚至未吸收进化论思想，仅仅构建经典物理均衡理论之上的知识，是如此脆弱，如此偏离实际。少年不肯为自己没有证据支持的感觉，而放弃努力，直到遇见自我决定论、路径依赖、贝叶斯概率，建构了产业整体观雏形。少年意识到，是时候要放弃错误的方向，摆脱路径依赖，跳到成功的基础概率更大的池子里，实现第二序改变。 于是，少年转向了计算机领域，感到久违的舒心，再也不用忧心经济学如何与计算机、网络科学发生交叉的事，再也不用抱怨学习的那些知识只是现代教育的一句谎言。 少年终于赶上了好运，信息简史间接证明了少年的选择是正确的。不同时代，不同学科的重要性有极大的差异，书中提到 20 世纪信息论深刻改造了生物学、心理学、经济学的面貌。而这个世纪，它的主题是建设虚拟世界，最重要的学科是计算机科学、网络科学、认知科学等学科。这些学科的重大突破，均会变革其他学科。少年找到了一条踏实的路，他决定在这个领域精益求精。 ","date":"2018-01-01","objectID":"/2018-01-01-reading-history-2/:3:0","tags":["成长","读书"],"title":"一个人的阅读史（二）","uri":"/2018-01-01-reading-history-2/"},{"categories":["personal"],"content":"去往安珀 好运连连，少年又碰到幸福的真意这本书，了解了如何用一个整体目标串起散落的时间段，使得一个人可以遵照一个统一的秩序，在不同心流活动之间穿梭，创造整个生活的大和谐。内观禅修修习的是一个“空”字，而心流理论则教人如何让生活得到一个“实”字。少年兴奋了好几个白天黑夜，过往习得的知识围绕着“如何过好一生”这个主题联结在一起。 促成行动的要素，除了动机和能力，还缺什么，答案顺其自然涌现出来——归属。少年知道了他为何要偏离人群，只有偏离人群才能获得独特的自己，才能到达别人到不了的地方，然后基于自己的这种偏离，把自己生活的不同主题、不同人的不同主题、自己与历史、自然界还有机器的关系整合在一个和谐的精神世界中。如此，一个人复杂性便能到达一个高度，他所理解的“人”，是一个积极、独特、丰富的存在，生命也由此有了意义。 自此，生活变成了少年的游戏场，生命变成了一场追逐、一次探险。幸福在何方？少年笑而不语，他已在路上。 ","date":"2018-01-01","objectID":"/2018-01-01-reading-history-2/:4:0","tags":["成长","读书"],"title":"一个人的阅读史（二）","uri":"/2018-01-01-reading-history-2/"},{"categories":["personal"],"content":"ChangeLog 2018-01-01 初稿 ","date":"2018-01-01","objectID":"/2018-01-01-reading-history-2/:5:0","tags":["成长","读书"],"title":"一个人的阅读史（二）","uri":"/2018-01-01-reading-history-2/"},{"categories":["learning"],"content":" 登峰造极是一个过程而不是一个结果，在整个过程中间，过于目标导向只会使你失去长期进步的潜力。一旦选择了登峰造极的道路，你就必须放弃短期的利益，放弃对目标的过于执著，和整个追求速效药的世界作对抗。 2015 年第一次看《寿司之神》时，在下还在自己嫌弃不已的专业里煎熬，所追求的是，如何翘掉所有的课，然后争取考前复习三两天考个八九十分，因此对影片主角小野二郎并没有心生多少敬意。如今，在下已转行一个来月，一股来势凶猛的渴望在体内膨胀——“我想在这个领域精益求精，最终达到登峰造极的境界。” 有幸即使遇见一本小书《Mastery: The Keys to Success and Long-Term Fulfillment》，作者乔治·伦纳德深刻地指出了追求精益求精的关键点，还有期间可能遇到的障碍。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:0:0","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"遇见阻碍的三种人 任何领域，技艺高超的专家都仅占从业者的很小比例，大师更是少之又少，甚至某些领域找不到可以称作大师的人。大多数人都走在以下三种路径上，而达不到登峰造极的境界。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:1:0","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"浅尝辄止者 浅尝辄止者对一切新东西都充满好奇，无论是首次接触的体育项目，还是更好的工作机会，或是一段全新的感情。他们喜欢从零开始，喜欢置办各种装备，喜欢念叨新学的术语，喜欢一切新鲜感。一旦尝到学习曲线中最开始的那段快速成长期的甜头，他们就会被喜悦冲昏头脑，迫不及待地想要宣扬自己的成绩，总是期盼能再学点新花样。然而，接下来短暂的回落期会给他们很大的打击，之后的平台期更是超出他们的想象，难以忍受。此时，新鲜感带来的热情渐渐消退，他们开始缺席，开始找各种借口逃避。然后再重新物色下一个猎物。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:1:1","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"强求突破者 强求突破者往往具有坚定的性格，他们奋勇争先，从不安于第二名。他们重视结果，不管付出什么代价也要完成预定目标。他们总是幻想迅速掌握秘诀，制定详细的规划，平台期也被纳入到规划中。但是一旦到了平台期，他们难以忍耐毫无进步的感觉。于是，开始质疑自己，盲目付出努力，通宵达旦，听不进他人的建议，一根筋走到底，不到目的不罢休。此时，他们感到失望、沮丧，负面情绪传递到周围的人身上，亲友、同事、恋人无一幸免。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:1:2","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"安于现状者 安于现状者的表现又是另一种样子。最初的进步之后，他们可能甘愿一直停留在平台期。只要不耽误事，他们就无所谓进步，无所谓精益求精。 这三种分类并非泾渭分明，同一个人在不同的方面，学习的不同阶段可能表现地不尽相同。但从全局来看，总会有一种心态占据主动，它将决定你的成就。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:1:3","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"登峰造极五大要素 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:2:0","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"好导师 找一位好导师就等于连接上一个优质的信息接口，能够帮助新手快速过滤掉次要信息，抓住主要信息，在新领域内找到自己的坐标和前行的道路。例如，在下在台大八极拳社练拳时，教练是台湾著名武术家刘云樵的弟子，刘师爷又是民国著名武术家李书文的传人；这样一来，在下刚接触八极拳这个领域的时候，就跟整个八极拳圈子搭上关系，也坚信自己学到的东西是正宗的，不用纠结自己练习的东西靠不靠谱。 找导师还要求互相信任，互相喜欢。互相信任，学徒才能心甘情愿地模仿导师，导师也不会私藏干货；人们对待自己喜欢的东西，总会有更浓的兴趣，互相喜欢，学徒才会更想学，更想见导师，导师也才会更喜欢教。 跟从导师学习，能够让你尽快接触该领域从业者的工作情境，在该情境下学习、模仿，习得的知识能够更容易得运用到具体情境中。 导师看待学徒时，导师应该以平和的心态对待学得快的学徒和学得慢的学徒，快学者容易遗漏细节，这些细节会成为快学者在高阶学习阶段的瓶颈；慢学着学初学的时候虽然慢，但稳扎稳打得打磨细节，最后可能反而学得更快。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:2:1","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"坚持练习 对于那些追求精益求精境界的人来说，他们不应仅把练习看成一遍遍重复的动作，更不应把练习当成简单的活动，而是把练习和自身融合起来，让它变成自己生活中必不可少的元素。此时，练习不再为了有所得，而只是为了练习本身。就像有些程序员喜欢写很酷的程序，享受解决问题过程中全神贯注的状态，而不关心他的作品能够带来多大声誉。当然对于顶级程序员等真正的成功者，努力练习的过程可以带来丰厚的回报，但这并不是他们追求精益求精的最终目的。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:2:2","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"保持初学者的心态 真正的成功者会随时保持从零开始的心态，面对新老师如此，对待自己旧有经验时如此，在刚开始学、在不断获得进步的时候也是如此。甘心做一个“愚者”：新接触一个领域时，容易被海量陌生概念淹没，感到入门很吃力也不要放弃，听从老师的教导，放空心态，从零开始；也不要怕闹笑话，初学时难免姿势不够优雅，但谁不是先在硬邦邦的冰面上结结实实摔几个跟头之后才慢慢学会自如地滑行。在学习的不同阶段，想要更进一步，或延伸到相近领域时，也唯有保持初学者的心态，心里才不会时刻端着盛满久有经验、已有成绩的那盆水，放下那盆水，手脚才会更轻盈，才能领会到相似事物的微妙差异。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:2:3","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"胸有成竹 学习时，在脑中复现、预演所学知识颇有助益，特别是有步骤的知识，作者举例的小手回也好，想象演讲过程也罢，在脑中模拟一遍，行动的时候会更有把握。这种想象力还能用在构建一个美好愿景上，当你在心中想象一个目标，并赋予美学上的意义，此时你会更愿意为之穷追不舍。例如，练习书法时，脑中构想着希望写出的字形，每次练习都比较以下，每次缩小的距离都会促使你去不断练习。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:2:4","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"超越极限 在顶尖高手身上，我们会发现一些有悖常理的行为：他们往往痴迷于基本功的练习，用心打磨那些被人忽视的细节；于此同时，他们还不断挑战更高、更快、更强的极限，并为此付出常人难以想象的代价，也就是说高手会同时追求两个不同方向的极致。细看，这两个方向是有联系的，高手挑战极限的行为可以理解为一种压力测试，在这种有难度的测试中，或是心理上的弱点，或是技术上的漏洞，都会暴露无遗，去伪存真。高手获取这些反馈，提升对该技能的理解，之后便逐一面对这些不足，打磨细节。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:2:5","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"若干高效方法 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:3:0","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"如何应对改变的艰难？ 当感觉到退步的时候，请挺住！每个人都不喜欢改变，每个人自身的稳态系统会自动抵御改变行为。例如，当我们许久没有跑步，然后跑两圈之后就气喘吁吁，心跳飞快，这是身体在警告我们。我们是否会应该怀疑自己适不适合跑步呢？我们所要学会的是克服久有习惯带来的不适。 对久有习惯时刻保持警惕：改变之后的不适症状首先会出现在自己身上，此时要牢记这是正常现象，视这种不适为改变发生的痕迹就好。然后不适症状会传递到我们周围的人那里，你的亲人、朋友还有同事等，如果有人对此指指点点，请明确这不是你的错，只是别人面对他自己周围环境变化的自然反应。 与自己对话：当我们身体出现不适症状时，把我们的身体想象成一个人，可以是一个小朋友，然后你耐心地跟他讲解出现这种不适的原因，努力去安抚他。例如，集中注意力看几个小时论文之后，会很想做点不费脑子的事，可以对自己说“嘿，你快要打破自己的记录了，再发一波力看看！” 养成规律练习的好习惯：面对改变，养成按时练习的好习惯，注重练习本身的乐趣，能够减轻改变的不适感。 终身学习：学习不仅仅是看几本书的事，学习意味着变革。应对变革的经验越丰富，再次面对改变时就会越从容。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:3:1","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"如何激发潜能？ 你还记得情窦初开，不顾一切去爱的感觉吗？你还记得慢跑五圈后，一个人能打三个人的底气吗？必要的休息对身体固然有好处，但我们只有在实践中才能激发更多的潜能。心理学格式塔学派的创始人佛雷德里克·皮尔斯说过：“不要指望积攒能带来力量，力量是越用越多。”可是，真若如此，我们为什么还时常感到力不从心呢？ 因为我们出生之后就不断受到压抑，家长限制孩子的行为，学校要求学生遵守纪律。以至于绝大多数人陷入这样的误区：责任和压力能够取代乐趣和激情。虽然我们生存的环境有毒，但对于获取更多能量，我们还是有进步的余地： 保持身体健康，健康是开展一切活动的基础，再怎么强调都不为过。 释放积极的力量，经常给自己和身边的人正面的反馈，同时又不浮夸。学会克服消极情绪的影响，多给自己一些肯定。面对生活中的琐事，不要浮躁，深呼吸，观察自己当下的感受。 保持诚实，对自己诚实，能减少抉择时的犹豫，对他人诚实，能够降低交流的成本。 掌控负面情绪，看见不爽的事情，不要只是一味的抱怨，你大可以动手去改变它。 分清事情的轻重缓急，人的能量是有限的，重要的事情优先处理，这些重要的事情才是撑起生命的构件。设定最后期限，倒逼自己的行动；在学习时关注输出，用输出倒逼输入。 最后，再次明确潜能不是积攒出来的，而是激发出来的。在一生的学习中，不断迎接挑战，激发潜能，你会越来越深谙此道。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:3:2","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"如何避免掉入陷阱？ 迈向精益求精的第一步还算容易的话，那么真正的困难是如何走好接下来的每一步，以下几点能够减轻困难的负面影响。 巧妙解决生活中的冲突：大多数人都没能幸运地在一开始就将练习节奏和生活节奏协调一致，更多的人需要在生活和工作的压力之外，再挤出时间练习。 提高专注力：不要把短期目标当作最终的追求，精益求精是终身之旅，需要专注地练习。 对自己负责：自己给自己把关，保证学习质量；不要偷懒：偷懒会影响你的自信，给你带来焦虑。 坦然面对失败和出丑：全身心投入竞争带来的动力，不仅能提高效率，也能带来凝聚力；竞争中偶尔出丑，偶尔“二”一下，能够调节节奏。 切记过犹不及：竞争固然重要，但更重要的是你一直以来养成的练习习惯，不要让外在的奖赏阻碍你练习过程中获得的乐趣，不苛求完美。 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:3:3","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"起风了，扬帆可好？ 读到这里，可能跟在下一样还有不少困惑。如何专注于练习？如何跟从导师学习？如何掌控情绪……不妨从这些知识点延伸出去学习并实践：自我决定论、心流理论、情景学习、刻意练习、压力测试、积极心理学、行动科学等等。 假如你也有幸遇见渴望精益求精的领域，假如你也向往小野一郎精致的寿司，或者 50 行区块链 Python 代码，亦或冲在浪头的帆板。在下想问，起风了，一起杨帆可好？ ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:4:0","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["learning"],"content":"ChangeLog 2017-12-14 初稿 ","date":"2017-12-14","objectID":"/2017-12-14-mastery/:5:0","tags":["成长","读书笔记"],"title":"登峰造极之路","uri":"/2017-12-14-mastery/"},{"categories":["info"],"content":"查 LaTeX 常用数学符号的时候，一开始去官网：LaTeX - A document preparation system找官方文档：LaTeX Documentation，然后又找了 CTEX 的在线文档：LATEX2e 插图指南，内容都太丰富了。 在网上看了几个博客，发现了一份不太简短的 LATEX2ε 介绍 ，git clone到本地，再用终端切换到scr所在的目录，依次在终端输入命令行即可。再从几个博客粘贴一些，整理了一份常用数学符号。 ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:0:0","tags":["工具","速查清单"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["info"],"content":"函数 一般函数名称，要么前面加 \\ ，要么加 \\operatorname{} 。 函数 LaTeX 函数 LaTeX $$\\sin\\theta$$ \\sin\\theta $$\\cos\\theta$$ \\cos\\theta $$\\frac{L}{r}$$ \\frac{L}{r} $$\\pmod{m}$$ \\pmod{m} $$\\operatorname{sh} j$$ \\operatorname{sh} j $$\\operatorname{argsh} k$$ \\operatorname{argsh} k $$\\lim_{\\Delta x\\to 0}$$ \\lim_{\\Delta x\\to 0} $$\\limsup S$$ \\limsup S $$\\pmod{m}$$ \\pmod{m} $$a \\bmod b$$ a \\bmod b $$\\sqrt{3}$$ \\sqrt{3} $$\\sqrt[n]{n}$$ \\sqrt[n]{n} 行内公式有些下标会出现在右边 ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:1:0","tags":["工具","速查清单"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["info"],"content":"复杂表达式 功能 效果 语法 小型分数 $$\\tfrac{2}{4} = 0.5$$ \\tfrac{2}{4} = 0.5 大型分数 $$\\dfrac{2}{4} = 0.5 \\qquad \\dfrac{2}{c + \\dfrac{2}{d +\\dfrac{2}{4}}} = a$$ \\dfrac{2}{4} = 0.5 \\qquad \\dfrac{2}{c + \\dfrac{2}{d +\\dfrac{2}{4}}} = a 二项式系数 $$\\dbinom{n}{r}=\\binom{n}{n-r}=C^n_r=C^n_{n-r}$$ \\dbinom{n}{r}=\\binom{n}{n-r}=C^nr=C^n{n-r} 矩阵 $$\\begin{matrix} x \u0026 y \\ z \u0026 v \\end{matrix}$$ \\begin{matrix} x \u0026 y \\\\ z \u0026 v \\end{matrix} $$\\begin{vmatrix} x \u0026 y \\ z \u0026 v \\end{vmatrix}$$ \\begin{vmatrix} x \u0026 y \\\\ z \u0026 v \\end{vmatrix} $$\\begin{Vmatrix} x \u0026 y \\ z \u0026 v \\end{Vmatrix}$$ \\begin{Vmatrix} x \u0026 y \\\\ z \u0026 v \\end{Vmatrix} $$\\begin{bmatrix} 0 \u0026 \\cdots \u0026 0 \\ \\vdots \u0026 \\ddots \u0026 \\vdots \\ 0 \u0026 \\cdots \u0026 0 \\end{bmatrix}$$ \\begin{bmatrix} 0 \u0026 \\cdots \u0026 0 \\\\ \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ 0 \u0026 \\cdots \u0026 0 \\end{bmatrix} $$\\begin{Bmatrix} x \u0026 y \\ z \u0026 v \\end{Bmatrix}$$ \\begin{Bmatrix} x \u0026 y \\\\ z \u0026 v \\end{Bmatrix} $$\\begin{pmatrix} x \u0026 y \\ z \u0026 v \\end{pmatrix}$$ \\begin{pmatrix} x \u0026 y \\\\ z \u0026 v \\end{pmatrix} 条件定义 $$f(n) = \\begin{cases} n/2, \u0026 \\mbox{if }n\\mbox{ is even} \\ 3n+1, \u0026 \\mbox{if }n\\mbox{ is odd} \\end{cases}$$ f(n) = \\begin{cases} n/2, \u0026 \\mbox{if }n\\mbox{ is even} \\\\ 3n+1, \u0026 \\mbox{if }n\\mbox{ is odd} \\end{cases} 多行等式 $$\\begin{align} f(x) \u0026 = (m+n)^2 \\ \u0026 = m^2+2mn+n^2 \\ \\end{align}$$ \\begin{align} f(x) \u0026 = (m+n)^2 \\\\ \u0026 = m^2+2mn+n^2 \\\\ \\end{align} $$\\begin{alignat}{2} f(x) \u0026 = (m-n)^2 \\ f(x) \u0026 = (-m+n)^2 \\ \u0026 = m^2-2mn+n^2 \\ \\end{alignat}$$ \\begin{alignat}{2} f(x) \u0026 = (m-n)^2 \\\\ f(x) \u0026 = (-m+n)^2 \\\\ \u0026 = m^2-2mn+n^2 \\\\ \\end{alignat} 方程组 $$\\begin{cases} 3x + 5y + z \\ 7x - 2y + 4z \\ -6x + 3y + 2z \\end{cases}$$ \\begin{cases} 3x + 5y + z \\\\ 7x - 2y + 4z \\\\ -6x + 3y + 2z \\end{cases} 数组 $$\\begin{array}{|c|c||c|} a \u0026 b \u0026 S \\ \\hline 0\u00260\u00261\\ 0\u00261\u00261\\ 1\u00260\u00261\\ 1\u00261\u00260\\ \\end{array}$$ \\begin{array}{|c|c||c|} a \u0026 b \u0026 S \\\\ \\hline 0\u00260\u00261\\\\ 0\u00261\u00261\\\\ 1\u00260\u00261\\\\ 1\u00261\u00260\\\\ \\end{array} ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:2:0","tags":["工具","速查清单"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["info"],"content":"希腊字母 字母 LaTeX 字母 LaTeX $$\\alpha$$ \\alpha $$\\beta $$ \\beta $$\\gamma $$ \\gamma $$\\delta $$ \\delta $$\\epsilon $$ \\epsilon $$\\varepsilon $$ \\varepsilon $$\\zeta $$ \\zeta $$\\eta $$ \\eta $$\\theta $$ \\theta $$\\kappa $$ \\kappa $$\\lambda $$ \\lambda $$\\mu $$ \\mu $$\\nu $$ \\nu $$\\xi $$ \\xi $$o $$ o $$\\pi $$ \\pi $$\\rho $$ \\rho $$\\sigma $$ \\sigma $$\\tau $$ \\tau $$\\phi $$ \\phi $$\\varphi $$ \\varphi $$\\chi $$ \\chi $$\\psi $$ \\psi $$\\omega $$ \\omega $$\\Gamma $$ \\Gamma $$\\Sigma $$ \\Sigma $$\\Lambda $$ \\Lambda $$\\Psi $$ \\Psi $$\\Delta $$ \\Delta $$\\Omega $$ \\Omega $$\\Theta $$ \\Theta $$\\Pi $$ \\Pi $$\\Phi $$ \\Phi ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:3:0","tags":["工具","速查清单"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["info"],"content":"符号 ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:4:0","tags":["工具","速查清单"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["info"],"content":"二元关系和二元运算 符号 LaTeX 符号 LaTeX $$\\leq $$ \\leq $$\\geq $$ \\geq $$\\equiv $$ \\equiv $$\\gg $$ \\gg $$\\simeq $$ \\simeq $$\\sim $$ \\sim $$\\subset $$ \\subset $$\\supset $$ \\supset $$\\subseteq $$ \\subseteq $$\\approx $$ \\approx $$\\in $$ \\ni $$\\sim $$ \\sim $$\\ni $$ \\ni $$\\propto $$ \\propto $$\\parallel $$ \\parallel $$\\perp $$ \\perp $$\\notin $$ \\notin $$\\neq $$ \\neq $$\\pm $$ \\pm $$\\mp $$ \\mp $$\\cdot $$ \\cdot $$\\div $$ \\div $$\\cap $$ \\cap $$\\cup $$ \\cup $$\\times $$ \\times $$\\otimes$$ \\otimes $$\\land$$ \\land $$\\lor $$ \\lor $$\\rightarrow $$ \\rightarrow $$\\longrightarrow $$ \\longrightarrow $$\\Rightarrow $$ \\Rightarrow $$\\leftrightarrow $$ \\leftrightarrow ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:4:1","tags":["工具","速查清单"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["info"],"content":"巨算符 符号 LaTeX 符号 LaTeX $$\\sum $$ \\sum $$\\prod $$ \\prod $$\\int $$ \\int $$\\iint $$ \\iint ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:4:2","tags":["工具","速查清单"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["info"],"content":"数学头标符号、底标符号、字体 符号 LaTeX 符号 LaTeX $$\\hat{a} $$ \\hat{a} $$\\bar{a} $$ \\bar{a} $$\\dot{a} $$ \\dot{a} $$\\vec{a} $$ \\vec{a} $$\\tilde{a} $$ \\tilde{a} $$\\widehat{AAA} $$ \\widehat{AAA} $$\\overbrace{1+2+\\cdots+100}$$ \\overbrace{1+2+\\cdots+100} $$\\begin{matrix} 5050 \\ \\overbrace{ 1+2+\\cdots+100 }\\end{matrix}$$ \\begin{matrix} 5050 \\\\ \\overbrace{ 1+2+\\cdots+100 }\\end{matrix} $$\\overrightarrow{AB} $$ \\overrightarrow $$ \\triangleq $$ \\triangleq $$\\underline A$$ \\underline A $$\\iint \\limits_{x+y=1}$$ \\iint \\limits_{x+y=1} $$\\underrightarrow{\\text{你的文字}}$$ \\underrightarrow{\\text{你的文字}} $$B \\xrightarrow[T]{n\u003e0} C$$ B \\xrightarrow[T]{n\u003e0} C $$\\underset{0\\leq j \\leq k-1}{\\arg\\min} $$ \\underset{0\\leq j \\leq k-1}{\\arg\\min} $$\\overset{?}=$$ \\overset{?}= $$\\sum_{\\substack{0\u003ci\u003cn \\ 0\u003cj\u003cn}} $$ \\sum_{\\substack{0\u003ci\u003cn \\ 0\u003cj\u003cn}} $$\\overset{\\frown} {AB}$$ \\overset{\\frown} {AB} 加粗 $$\\bf a$$ \\bf a, \\textbf a, \\mathbf a $$\\big|{x = x_0}$$、$$\\bigg|{x = x_0}$$ `\\big _{x = x_0}、\\bigg _{x = x_0}` $$a^{\\circ}$$ a^{\\circ} ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:4:3","tags":["工具","速查清单"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["info"],"content":"其他符号 符号 LaTeX 符号 LaTeX $$\\dots $$ \\dots $$\\cdots $$ \\cdots $$\\vdots $$ \\vdots $$\\ddots $$ \\ddots $$\\forall $$ \\forall $$\\exists $$ \\exists $$\\partial $$ \\partial $$\\infty $$ \\infty $$\\bot $$ \\bot $$\\angle $$ \\angle $$\\lnot $$ \\lnot $$\\mathrm{d}x$$ \\mathrm{d}x $$\\triangle$$ \\triangle $${}_1^2!X_3^4$$ {}_1^2!X_3^4 $$\\alpha\\quad\\beta$$ \\alpha\\quad\\beta $$\\alpha\\qquad\\beta$$ \\alpha\\qquad\\beta $$\\alpha \\ \\beta$$ \\alpha \\ \\beta $$ \\left( \\frac{a}{b} \\right) $$ \\left( \\frac{a}{b} \\right) $$\\lfloor a \\rfloor$$ \\lfloor a \\rfloor $$\\lceil a \\rceil$$ \\lceil a \\rceil ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:4:4","tags":["工具","速查清单"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["info"],"content":"ChangeLog 2018-08-09 添加 \\limits_{}、符号头标和底标 2017-11-30 初稿 ","date":"2017-11-30","objectID":"/2017-11-30-latex-math/:5:0","tags":["工具","速查清单"],"title":"LaTeX 常用数学符号","uri":"/2017-11-30-latex-math/"},{"categories":["learning"],"content":"飞跃 5000 词\u0026形容词 这部分还在摸索 ","date":"2017-06-14","objectID":"/2017-06-11-learning-words-4/:1:0","tags":["英语","学习"],"title":"单词（四）","uri":"/2017-06-11-learning-words-4/"},{"categories":["learning"],"content":"形容词的分类 结构（单个、复合） 功能（普通、定语、表语） 词义（静态、动态、等级、非等级） 这些分类中，有些能够帮助我们学习形容词。 定语形容词又分为前置定语形容词（描述所修饰词的持久特征或属性）和后置定语形容词（描述短暂或特定的特征）。例如： the president elect 当选总统（尚未就职）；the elected president 民选总统（已经就职） rivers navigable 有时可通航的河流；navigable rivers 可通航的河流 表语形容词，就是只能接在 be 动词后面的形容词。例如，She is alone.√；She is an alone girl.× 静态形容词与动态形容词可以用 being 测试。例如，She is being attractive.√ attractive 是动态形容词；She is being beautiful.× beautiful 是静态形容词 非等级形容词，就是没有比较级和最高级的形容词。它有由名词转化的形容词（例如，daily，wooden 等表示形状、处所时间等，很明显）、极限形容词（例如，perfect，infinite）和表状态的形容词（大多前面有 a，例如 alive，awake） 还有主观意义和客观意义的形容词。例如，historic 有历史意义的——主观，historical 历史的，有关历史的——可观；efficient——主观，efficiency——可观 ","date":"2017-06-14","objectID":"/2017-06-11-learning-words-4/:1:1","tags":["英语","学习"],"title":"单词（四）","uri":"/2017-06-11-learning-words-4/"},{"categories":["learning"],"content":"形容词一语的负迁移 汉语三大坑：词性模糊、用抽象的高频词代替精确词和语义韵 用抽象的高频词代替精确词，例如很大的月亮，汉语用“大”代替精确词，英语里一般用 full moon 而不是 big moon 语义韵包括积极、消极和中性，例如 sophisticated 有个意思是老于世故的，精明老练的，并没有消极意义 ","date":"2017-06-14","objectID":"/2017-06-11-learning-words-4/:1:2","tags":["英语","学习"],"title":"单词（四）","uri":"/2017-06-11-learning-words-4/"},{"categories":["learning"],"content":"认知视角 主语+be+adj+to+v 的结构，换一下形容词，句子的解读就完全不一样了。例如 John is hard to teach. John 很难被教； John is happy to teach. John 很高兴去上课，换一下形容词，主语的身份就变了。 实体形容词，例如，He（实体） is willing（状态） to clean（动作） the classroom. 事件形容词，例如，Emma 实体 is quick（特性） to find（动作） the mistake. ","date":"2017-06-14","objectID":"/2017-06-11-learning-words-4/:1:3","tags":["英语","学习"],"title":"单词（四）","uri":"/2017-06-11-learning-words-4/"},{"categories":["learning"],"content":"形容词的记法 简单形容词： 注意同义词辨析、注意搭配，多看例句，在语境中记忆 注意一些以前没注意到的地方，扩充语义立方体 复杂形容词：记住两到三个意思 ","date":"2017-06-14","objectID":"/2017-06-11-learning-words-4/:1:4","tags":["英语","学习"],"title":"单词（四）","uri":"/2017-06-11-learning-words-4/"},{"categories":["learning"],"content":"名词、动词和形容词的活用 大脑喜欢惊奇，作文里面用上个别“活用”的词会很讨喜。下面举两个例子： Investigation fathered the baby on him. 调查显示他是孩子的亲生父亲。father 的名词是高频词，动词是低频次，这样一用感觉很地道。 brave the winter 顶着严冬 brave 的形容词是高频词，“活用”它的低频词——动词。 我们看到“活用”的单词可以顺带记下。 ","date":"2017-06-14","objectID":"/2017-06-11-learning-words-4/:1:5","tags":["英语","学习"],"title":"单词（四）","uri":"/2017-06-11-learning-words-4/"},{"categories":["learning"],"content":"语法的进阶方法 1 分钟英语学习：英语单句的 5 大句型： 主语＋谓语动词 e.g. it never rains in desert. 主语＋谓语动词＋宾语 e.g. i love apples. 主语＋谓语动词＋补语 e.g.the small company has gone bankrupt. 主语＋谓语动词＋间接宾语＋直接宾语 e.g. the child asks his father a thousand questions a day. 主语＋谓语动词＋宾语＋补语 e.g. the police found the profile missing. 语法书：英语魔法师之语法俱乐部 (豆瓣) ","date":"2017-06-14","objectID":"/2017-06-11-learning-words-4/:2:0","tags":["英语","学习"],"title":"单词（四）","uri":"/2017-06-11-learning-words-4/"},{"categories":["learning"],"content":"用听力来打通音和义的任督二脉 方法只有多听、精听（音频+视频） 一、3000 词汇/5000 词汇+语音（内语）不够好 看：动画片 听：慢速英语 各种听力 app 中的简单音频和视频（有中英对照）：每日听力、沪江听力酷、朗易思听 二、5000 词汇+语音（内语）或者 8000 词汇+语音（内语）一般 看：TED 有字幕、美国电影美剧 听：各种听力 app 中的音频和视频（有英文字幕）：每日听力、沪江听力酷、朗易思听 三、8000 词汇+语音（内语）不错 看：TED 无字幕、英国电影+英剧 听：各种听力 app 中的音频和视频（可以无字幕）：每日听力、沪江听力酷、朗易思听 听写的迷思：效率太低，不如做多样化练习 ","date":"2017-06-14","objectID":"/2017-06-11-learning-words-4/:3:0","tags":["英语","学习"],"title":"单词（四）","uri":"/2017-06-11-learning-words-4/"},{"categories":["learning"],"content":"参考 《词行天下》 《找对英语学习方法的第一本书 》 何老师「认知英语课」 ","date":"2017-06-14","objectID":"/2017-06-11-learning-words-4/:4:0","tags":["英语","学习"],"title":"单词（四）","uri":"/2017-06-11-learning-words-4/"},{"categories":["learning"],"content":"ChangeLog 2017-06-11 初稿 ","date":"2017-06-14","objectID":"/2017-06-11-learning-words-4/:5:0","tags":["英语","学习"],"title":"单词（四）","uri":"/2017-06-11-learning-words-4/"},{"categories":["learning"],"content":"5000 词\u0026名词 从单词频率覆盖率来说，你听到别人正常讲话中几乎有 90% 会在 2000 以内的词汇，但剩下的 10% 足以令你完全不理解对方表达的意思。词汇学专家 Nation 博士认为，只要语言中有 5%的词汇不理解，就会对理解整句或者整段话造成非常严重的影响（后来他还把这个数字进一步调整为 2%，但这个跟阅读的舒适区有点不一致）。 2000 词和 5000 词共有的学习方法是： 第一阶段：观察图像，视频、动作、多听（从慢速听力开始）、手势 第二阶段：学会无穷变幻，学会搭配、同义词辨析 ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:1:0","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"名词最早习得 名词最早习得 Hatch\u0026Brown（1985），儿童最早习得的是名词，然后习得动词。在名词本身的习得顺序上，根据 Lyons（1977）的理论，距语义核越近的名词，就越容就越容易习得。Lyons 认为，所有的词性都有一个语义核（Semantic core）离核心最近的名词为第一级名词（first-order nouns），包括人名、物名与有时间和空间存在的实体名；其次是第二级名词（second-order nouns，包括现实时间中发生的可以观察到的情况的名词，如状态名词（Sleep）过程词（weaving）、事件名词（a crash）等；接着是第三级名词，包括那些无时空联系的抽象事物的名词，如 democracy 那么，理论上说，第一级名词先习得，然后是第二级名词，最后是第三级名词。从儿童习得词汇的情况看，儿童通常是先习得具体名词，然后习得抽象名词。 ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:1:1","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"名词的分类 辨析名词的类别有助于加深记忆 名词可以分为专有名词（Proper Nouns）和普通名词 (Common Nouns） 专有名词是某个（些）人，地方，机构等专有的名称，如 Beijing，China 等 普通名词是一类人或东西或是一个抽象概念的名词，如：book，sadness 等 个体名词（Individual Nouns）：表示某类人或东西中的个体，如：gun 集体名词（Collective Nouns）：表示若干个个体组成的集合体，如：family， the Beings 物质名词（Material Nouns）：表示无法分为个体的实物，如：air 抽象名词（Abstract Nouns）：表示动作、状态、品质、感情等抽象概念，如：work 动名词（gerund）：smoking 个体名词和集体名词可以用数目来计算，称为可数名词（Countable Nouns），物质名词和抽象名词和动名词一般无法用数目计算，称为不可数名词（Uncountable Nouns）。但这是很主观的，对词义的理解不同，可不可数的情形也不同。例如，coffee 一般来说是不可数的，但咖啡店里也常用“two coffees” ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:1:2","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"深度学习单词 怎样才算掌握一个单词，语言学家 J.Richard 在 1976 年给出一个比较权威的定义： 近年有关单词领域的研究成果导出了这样的结论：单词的学习乃至语言学习本身，主要通过了解单词与其他单词的搭配使用方式，以及结合背景内容来学习实现的，而不是通过先学单词的独立含义，然后再去了解与其搭配使用的词汇。 那掌握词汇搭配最好的途经又是什么呢？当然是从英语的原文中，从可理解性输入的文字背景中来学习，就算只学习独立的单词含义，也应该是从英语原文的词汇搭配使用中获得。 ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:2:0","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"“预估”和“猜测” 在“N400”实验中，当当听到或读到跟预估非常不符合的词汇时，母语者会立即“拒绝”接受这个词，发生 N400 现象。这种对语言中即将出现的词汇的“预估”和“猜测”能力，正是是对自然语言理解过程的核心。对语言中即将出现的词汇的“预估”和“猜测”能力差，也是造成语言理解速度慢的主要原因。 母语者以前的语言认知经历，使得他们脑中有大量的词汇“联用和搭配关系”。那么这种“联用和搭配”是如何实现的呢？大脑对语言输入的处理过程，更偏向于“统计”而不是“分析”。当接受大量的自然语言输入后，大脑中包括“听觉短期记忆”系统在内的各个认知系统，会下意识地寻找语言输入的各种“声音规律”和“重复模式”，自动地对出现的规律进行统计处理，将频繁在一起出现的词汇搭配和句法模式当做整单元的语块来处理。这些被统计提取的语块，再与其他相关的语块进行有机连接后，在大脑中进行“存储”，逐渐转化为大脑的长期记忆语块网络，并随时预备与以后听到的语言中相同的语块相对应。 简单讲，就是头脑中数量众多的语块，主要通过对交流语言和整段文字的大量接触自然获得的，并非主要来源于这些词汇组合单独拿出来分析或背诵，语言的“统计-组块-储存”过程是一种隐性学习。充分发挥这种隐性学习的能力，可以显著提高外语的能力。 ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:2:1","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"集体引个体 我们应该用含有某个生词的词汇搭配来学这个生词，而不是先学单词然后再去学词汇搭配。主要有两步; 通过词汇搭配引导和推测词义（隐性学习）：通过搭配使用的其他单词，特别是离得近的词，来确认生词的词性；通过与生词相关的关键词来猜测生词的大致含义。e.g. He tried to the pieces of the broken box back together with glue. 通过 with…可判断 glue 是个名词；它可以把 pieces 给 put back together，可尝试用自己已知的词来替换 glue，比如 nails。 通过查字典来确认词义和引申用途（显性学习）：查阅字典，确认词义；重点看一下当前含义的例句，进一步熟悉该单词的使用方式。 不管生词能否猜出词义，都应该查一下词典。另外，当查阅汉英词典获得准确的词义之后，再看一下英语解释，加深理解，同时减少对汉语翻译的依赖，这里用欧陆词典非常合适。 ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:2:2","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"主题领内容 在扩展单词学习阶段，什么类型的材料有利于学习词汇的相关词汇搭配呢？这时需要做到两点，限制难度和规范内容 限制难度，就是找“可理解性输入 i+1”的材料，同一难度的材料需要大量输入直到进入下一难度 规范内容，就是内容避免散乱的，最好是词汇关联性高的，紧密围绕一个概念或主题展开的内容，可以从《美国之音》里选取主题相关的文章。 对大量具有鲜明主题的内容进行学习，有助于我们了解某个单词在各种背景下出现的概率高地，还有助于提高我们对词义理解的速度和准确性。人在头脑中对词汇的理解是根据前面文字的背景含义“实时更新”的，而这一能力的培养也正是依靠对这个词汇的全方位输入，即其在不同背景下以不同的含义出现在多种句式中的情况。 ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:2:3","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"联络导语义 语义联络是通过绘制表达不同功能与类别的单词之间联系的示意图，来发现某段文字中关键单词与其他单词之间的有机联系，从而把单词按照语义、类别、功能等进行分组和衔接。比如一段对旅客到机场乘机的流程说明文章中关联词汇的语义联络： 这会导致同类单词的混淆吗？单词通过文字背景中的事件、流程、动作或逻辑串联起来的，同类单词的记忆互不干扰，而是相互支持。 语义联络只是一个辅助工具，熟悉了这种形式之后就可以不画图了，因为在读或听的过程中自然会形成词义间的有机联系，久而久之大脑中会逐渐形成一系列相关词汇概念的有机连接，跟语义联络非常相似。 随着接触更多的原文内容，大脑中会形成一个立体的分级词汇概念搭配连接网络。随着网络中外语词汇间的连接越来越强，网络中一个或一组单词的激活，会令最相关的一系列词汇都处在被激活的状态，此时对内容的理解会更深刻，也更快。 ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:2:4","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"背单词与深度学习的比较 相比于背单词，深度学习可能要花好几倍的时间和额外的精力，但是从对单词的理解和掌握方面来讲，特别是长期效果上，深度学习才是真正意义上的掌握单词，且记忆长久而牢固。词汇学专家 Paul Meara 表明，在外语学习的初期，词汇量大小对外语能力的影响非常大；但当基本词汇学会之后，词汇对外语能力的影响就变小了，而这时最重要的是通过发掘词汇的连接结构来提高外语能力。 ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:2:5","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"一语的作用 这是一张二语学习层级模式图，L1 为一语，L2 为二语，词汇概念和一语的双向连接通道很坚固，一语和二语的连接只是将二语翻译成一语的那条单向通道坚固。我们学习二语的目的是使 L2 和 Concepts 建立快速的通道，但是这一过程困难又缓慢。因此要善于借用一语来过渡，先用大量的输入建立二语到一语再到概念的通道，再用输出练习强化其他通道。此外，还有一部分的英语学习是不需要强化虚线部分的，比如需要深加工的数学（读懂意思后便可用一语来思考，思考完后再用二语表达）和比较不常见的青蒿素这种词汇，明白这些可以大大减轻学习量。 ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:2:6","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"示意表用途 抽象词汇一般需要借助具象词汇的解释，或者借助词汇搭配来引导才能理解其含义。但有时引导会相当麻烦，汉语又很难准确表达时，可以尝试用示意图来辅助理解。以 over 为例： 静态基本空间含义：在…之上，e.g. The clock is over the couch. 静态：在…另一侧，e.g. His father lives over the river. 动态：越过…，e.g. He jumped over the fence. 动态：完成，e.g. Game over. 动态：超过，e.g. His spending is over the budget 动态：控制、覆盖，e.g. He oversees this department. 动态：翻转、倒下，e.g. He knocked a chair over in the meeting room. over 的学习，既不是一个一个含义分别记，也不是结合文字记忆，而是 可理解性输入，这里“over”是使用听的手段 带“over”’的句子接触多了以后，大脑会逐渐发现其中的规律，一方面是搭配形式，另一方面是这些含义的共同点和差异 在利用隐形学习的同时，结合显性学习，包括讲解、归纳总结来深化理解和提高效率 ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:2:7","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"参考 《词行天下》 《找对英语学习方法的第一本书 》 何老师「认知英语课」 ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:3:0","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"ChangeLog 2017-06-11 初稿 ","date":"2017-06-13","objectID":"/2017-06-11-learning-words-3/:4:0","tags":["英语","学习"],"title":"学单词（三）","uri":"/2017-06-11-learning-words-3/"},{"categories":["learning"],"content":"第二阶段：2000 词\u0026动词 英语对话中基本上只有 2000 个常用单词，用好这 2000 个单词要建立它们与概念的直接联系。方法是多听，先从慢速、标准音听起，再反复听，各种听。VOA - Voice of America English News ","date":"2017-06-12","objectID":"/2017-06-11-learning-words-2/:1:0","tags":["英语","学习"],"title":"学单词（二）","uri":"/2017-06-11-learning-words-2/"},{"categories":["learning"],"content":"动词的分类 动词的空间分类 动词的表达是个运动事件，包含 Mary（图形）move（运动）to（路径）the car（背景）by running（方式）by her leg（工具） 动词的时间分类 状态类（持续、静止）：know the answer，be tall，own the house 活动类（持续、没完）：walk，swim，ride a bike；e.g. John walked in an hour.× 因为 walk 没完，不能接 in 完成类（持续、有完）：build a house，eat an apple, run to the school 达成类（不持续）：die，arrive，reach the top 及物和不及物 及物动词有单宾及物（e.g. push the car）和双宾及物（e.g. give a dish to Fred; give Fred a dish） 不及物动词有非宾格（状态的变化，没有被动语态：arrive，disappear，fall）和非作格（活动：smile，talk，sleep，cough，snore，yawn） 动词语义在很大程度上对句法形态有决定作用，单句内的语法由动词来管。 不规则是有原因的 朗文英语词库中，不规则动词虽然只占全部动词的 3.6%，缺占到动词频数的 58%。名词复数和形容词比较级也有此规律，不规则的词汇是为了经常使用的方便，有发音简单、拼写简短的特点。 记高频词汇是要把不规则变化当做主流，每种形式都当做一个新单词来记。 动词词汇的参数 运动+方式：除罗曼语外的印欧语和汉语，e.g. float 漂、run 跑、walk 走（英语中有 124 个，只能以不及物形式出现）。其他语言还有别的参数形式，如运动+路径（日语，少量英语，e.g. enter） White 假设 汉语中的保守部分，在英语输出时很少犯错，例如汉语中不允许词汇的使役形式 英语心里动词：e.g. John disappointed Mary.但没有张三失望了李四 非宾格动词：The sun melted the snow.但没有太阳融化了雪 汉语中也有大胆的部分：例如容器处所动词 没有 John covered the blanket onto the bed.但有张三往床上盖了毯子 ","date":"2017-06-12","objectID":"/2017-06-11-learning-words-2/:1:1","tags":["英语","学习"],"title":"学单词（二）","uri":"/2017-06-11-learning-words-2/"},{"categories":["learning"],"content":"记忆方式 第二阶段 2000 核心词的学习，要建立英语单词与概念的直接联系，在能够使用图像、动作、视频，慢速听力和手势等手段来学习单词的情况下，就需要尽量减少对汉语翻译和汉语解释的依赖（但没有必要完全回避汉语）。 ","date":"2017-06-12","objectID":"/2017-06-11-learning-words-2/:2:0","tags":["英语","学习"],"title":"学单词（二）","uri":"/2017-06-11-learning-words-2/"},{"categories":["learning"],"content":"机械记忆 尽管机械记忆存在许多局限性和负面评价，但从外语单词学习的实践角度来说，机械记忆是一个非常重要和不可获缺的手段。首先，它很操作方便，对简单容易记的单词效率并不低；其次，对缺乏联系、出现概率低的单词，它比较合适；最后，初学阶段记高频词也合适。但机械记忆也有方法上的差异，有些要点能够帮助记忆： 听声音：边听声音边看单词的效果好于边听边抄，听写是拿来检查准确性的，不要试图拿来增强记忆。 重复次数：重复五次以上，多项研究表明，对于 100 个单词量的生词表，大多数学生在重复 7 次后能记住大部分单词。 闪卡：卡片一面单词一面意思，目的是迫使你去提取记忆，并且能避免词表顺序的影响。 人为提高新词在阅读中出现的概率 词除了数字，不能以类记，新学时以类记（同时记）容易混，应该在不同的时间放在语境里记，熟悉后可以归类比较巩固。 艾宾浩斯遗忘曲线 一天对应的 33.7%不是指还能想起 33.7%的内容，而是还有 33.7%的记忆保留，是一天后复习到掌握比第一次学习到掌握的学习量，即学习节省量。 至今被公认的遗忘曲线统计式：$b=100k/((logt)^c+k)$, 其中 k=1.48, c=1.25 间隔学习 VS 分散学习 按照艾宾浩斯曲线的误解，延展间隔学习，前几次的密集学习基本是白费的。 记忆保持期（retention interval） 集中记忆，在短期上效果和间隔记忆差不多，但长期明显差于间隔学习。想记住一年，间隔时间为 14 天，两年以上间隔 56 天为宜。但通常为了便于执行，以天、周、月为时间间隔效果更好。 如果 R.I.需求短，比如一天和几个小时以内，则最佳学习间隔约等于 R.I.*1.0 如果 R.I.需求长，比如几天及以上学习间隔约等于 R.I.*0.1 为了避免学习战线拉太长，可以一周复习一次单词，保持听说读写，让单词在更多的情境中碰到，编码多样化记得会更牢。 重复记忆次数 6 次以上。1 次接触就习得的概率为 5%-15%。听说读写都算重复，但大量的机械简单重复未必能带来期待的学习结果。重复次数之间有个反常识的规律，1 次和 3 次没有明显差异，而达到5 次就会不一样。 ","date":"2017-06-12","objectID":"/2017-06-11-learning-words-2/:2:1","tags":["英语","学习"],"title":"学单词（二）","uri":"/2017-06-11-learning-words-2/"},{"categories":["learning"],"content":"感官记忆 借助图像记忆单词，不但可以实现声音和图像的联系，而且记忆深刻。图像要指代明确，名词图像先于声音，动词声音快于图像。此外听声音做动作，观察口型，使用手势都有帮助。 五到口诀 “五到”口诀：眼到、嘴到、耳到、手到、心到 眼到，就是要看单词，看他的形状。快速的通过识别单词的大概样子，达到成块成段的识别句子和段落，对于提高我们提高阅读速度是很有帮助的。 嘴到，就是你需要读出这个单词。我们会因为音标不好，看着单词的音标也不能很好的拼读出来，所以在记忆单词时就很回避这个环节。因此需要把音标好好学一下，如果读错单词真的会妨碍记忆。读的时候不一定要读出声，做口型也是可以的。如果实在不方便，也可以在心里默念，镜像神经元会帮助我们达到类似念出声的效果。 耳到，就是说你的耳朵要听到这个单词的物理声音，可以是自己读，也可以听标准音，虽然这两种声音的传递原理不一样，但这个声音都打通了听力通道，把这种声音记忆储存在听觉脑里，这就足够了。一个单词的发音在不同的 context 下听多了，就好像在不同的环境下看到同一个人的脸一样，重复次数多了，会更容易在 unexpected 的环境下识别这个单词的发音。 手到，就是写，如果环境允许可以在记的时候把单词写出来。书写单词可以帮助我们更好地记单词，提高语言本身的准确性。 心到，就是说，记单词要用心。曾经有个著名小提琴家说过，如果是练习手指，可以练一整天；可是如果是练习脑子，每天能练两个小时就不错了。高手的练习每次最多 1 到 1.5 小时，每天最多 4 到 5 小时，没人受得了更多。这就是说，记忆单词，本来就应该是一件费脑子的事情，把它限定在1 小时内就很不错了。 背单词其实应该是一个单词的多维度的认知加工。它不像汉字，汉字是拼义文字，大脑会特意做一个图像加工处理，而英语没有，英语拼音文字，想要记得这个单词，必须要记住它的发音、音节数，以及重音等超音段特征。 可是我们为什么需要这样费时费力的对一个单词做这些认知加工呢？原理很简单，我们大脑在储存记忆单位时，都是分布式分散式储存的。所以，如果你想更深刻的记忆这个单词，那最好在各个脑区都留下痕迹。所以，我们除了是视觉脑区留下单词痕迹之外，我们还在听觉脑区留下痕迹，配合口腔和手写的运动，在体觉感区最好做一个刺激，然后用自己的大脑再做一些深层次的认知加工，就是通常我们所说的“走心”，比如联想记忆。这个单词，在各大脑区留下的痕迹越多，那么这个单词就在记忆里消退的越慢，只要你坚持不断的学习，坚持不断的暴露（exposed）在英文环境下，相信它总有一天可以 hold 到你再次遇到这个相同的单词的时候，这个时候，你的大脑就开始了新一轮的反复提取，心理学上有一个专有名词：retrieval，此时这个单词的生命，又因为你的再一次提取，而又获得了重生。 编织场景 粘贴习惯 给自己记单词设定一个学习场景，形成一个习惯，减少心理能量的消耗。 ","date":"2017-06-12","objectID":"/2017-06-11-learning-words-2/:2:2","tags":["英语","学习"],"title":"学单词（二）","uri":"/2017-06-11-learning-words-2/"},{"categories":["learning"],"content":"联想法和关键词法 联想法（通过想象图像来实现联系）除非某些单词很适合，否则慎用；关键词法（通过语言来实现联系）不要用。 ","date":"2017-06-12","objectID":"/2017-06-11-learning-words-2/:2:3","tags":["英语","学习"],"title":"学单词（二）","uri":"/2017-06-11-learning-words-2/"},{"categories":["learning"],"content":"参考 《词行天下》 《找对英语学习方法的第一本书 》 何老师「认知英语课」 ","date":"2017-06-12","objectID":"/2017-06-11-learning-words-2/:3:0","tags":["英语","学习"],"title":"学单词（二）","uri":"/2017-06-11-learning-words-2/"},{"categories":["learning"],"content":"ChangeLog 2017-06-11 初稿 ","date":"2017-06-12","objectID":"/2017-06-11-learning-words-2/:4:0","tags":["英语","学习"],"title":"学单词（二）","uri":"/2017-06-11-learning-words-2/"},{"categories":["learning"],"content":"如果要评选一个「我的人生最大的干扰项」，目前为止，非英语莫属。初高中一直赖在班级倒数前五的位子上，每回英语考试前夕都心慌不已，考前一定要拿一个下午背作文，不然很难凑齐字数；到了大学虽然不再倒数，但绝对拉低了浙江学生的平均分，心态依旧，几回六级考试都如临大敌，考前怯场。于是，去年开始就将英语列为最高优先级的待解决问题。可是一朝被蛇咬，一生都怕草绳，因此常常弃英语而寻他欢。究其原因，大概是我学习英语的整个思路都是错的，急需一场脱胎换骨的大手术。 近期，读了漏屋老师的《词行天下》和《找对英语学习方法的第一本书 》，并且参加了何老师的「认知英语课」，收获颇丰。接下来，我将按照词汇学习阶段的顺序，分享学习笔记。 ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:0:0","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"词汇概览 词汇的本质是“概念”与“声音印象”二者的结合 ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:1:0","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"词汇广度 非英语母语的人大致是以 5000 为峰值的长尾分布，英语是母语的人词汇量会有两三万，但实际 8000-10000 便基本能应付日常会碰到的英语。那么为什么词汇量高达一万多的人会觉得词汇量不够呢？ 原因是非英语母语的人，大概只有 40%的主动词汇，而英语是母语的人有 90%的词汇是主动词汇。那么词汇量只有 5000 的人仅有 2000 的主动词汇量，相当于 3 岁儿童的词汇量。 ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:1:1","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"词汇深度 英语中，一个单词通常有好几个意思。例如，spring，一般想到的是春天，然后是泉水、发条，其实还有动词的意思，跳跃。词汇的这种不同词频的含义就是词汇的深度。 最常用的 250 个单词，覆盖了口语中 60%的词汇，其他数据以此类推，因此只需少量词汇就能应付生活中大部分口语。高频词最常用，它的意思也更多，橙色圆圈中表示平均的意思个数，因此记高频词要多记几个意思。 ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:1:2","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"单词覆盖率\u0026词频 扩展词汇主要在四六级、考研英语、TOEFL 和 SAT 的阅读部分出现 词频查询：Wordcount · Tracking the Way We Use Language ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:1:3","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"第一阶段：250 词\u0026介词 不同意或不同音的分开学，一次只学一个音或一个意 ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:2:0","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"居一二三维 格式塔心理学：人对空间事物的视觉认识，不是平面和等同的，而是立体和认识归类的，主要的区分为“前景”F 和“背景”G。F 一般尺寸较小，运动较快；G 一般尺寸较大，运动慢或静止。 正是对 F 和 G 空间关系的认知，介词的功能被扩展到表达抽象概念上；又因为介词与其他词汇连用，介词在人的心理上是描述F 和 G 位置、尺寸及运动的立体空间认知。 at 的 F 和 G 是零维关系，即 F 对应的 G 是一个点 on 的 F 和 G 可以是一维关系，即 F 对应的 G 是一条线 on 的 F 和 G 可以是二维关系，即 F 对应的 G 是一个平面 in 的 F 和 G 可以是三维关系，即 F 对应的 G 是一个三维容器 例子： at/in hospital 前者表在医院，把医院看成一个点，你在医院的任何地方包括周围都算在医院 后者表进了医院，把医院当作一个容器 He in on/in the work market 前者 F 对 G 的控制度高，表示主动自信地去找工作。 后者 F 对 G 的控制度低，表示艰难地找工作。 ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:2:1","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"于刻天年里 人是先有了空间观才有了时间观，因此人是以思考空间的方式来思考时间，例如：前年，之后。有关的介词取决于说话人如何看待所说事件与其发生背景时间的关系。 如果事件的发生对应于背景时间的一个精确的点，就形成了零维关系，用 at 如果表述事件的发生对应于背景时间的一个特定时间段，我们想表示该时间段发生了什么，此时类似于表达位于哪一街道段，是二维关系，用 on 如果表述事件的发生在一个时间段内的任意一个时间点都可以，此时时间背景具有三维容器的特点，用 in 区分： in the morning、 on Tuesday morning：两者都是表示时间段，但前者是要你去找那一时间段里的位置，而后者是要你去找那个时间段的位置 on time、in time：准时、及时，前者强调某一小段时间内，而后者强调在某个时间界限之前的任何时间都可以 at risk、at steak、on target、in trouble：这些用法可以类比空间尺度，小、中、大，at risk 处于某一点的状态，on target 按计划接近实现目标（中尺度），in trouble 延伸到过去和将来的大尺度时间 ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:2:2","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"意象图式 意象图式是感知互动及感觉运动活动中不断再现的动态结构，如垂直、容器、路径等，这种结构给我们的经验以连贯和结构。 人类经验是无数的，但是意象图式是极少量的，它是大量经验的概括。因此我们可以用有限的意象图式来组织和理解无限经验。一项图式主要由动体（trajector，TR）、界标（landmark，LM）和路径（PATH）三部分组成，体现的是 TR 和 LM 某种不对称的关系。 意象图式对于我们抽象思维的重要性：意象图式不仅构建了我们的空间域，也构建了存在于我们抽象的域中的很多概念。 意象图式可以帮助更好地理解介词，之后还会介绍意象图式在用示意图学习抽象词汇中的应用。 ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:2:3","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"概念迁移 语言是相互联系的，学习二语的时候注意语言迁移和意义迁移能更好地理解一语和二语。 ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:2:4","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"造做使成赚 ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:2:5","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"参考 《词行天下》 《找对英语学习方法的第一本书 》 何老师「认知英语课」 ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:3:0","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"ChangeLog 2017-06-11 初稿 ","date":"2017-06-11","objectID":"/2017-06-11-learning-words-1/:4:0","tags":["英语","成长","学习"],"title":"学单词（一）","uri":"/2017-06-11-learning-words-1/"},{"categories":["learning"],"content":"数据在当下可谓越来越重要了，工作中老板谈要注意数据思维，买书的时候网站会利用大数据给你推荐可能喜欢的书，新闻里会用帅帅的图表来和你解释究竟发生了什么……数据已经深入我们生活的方方面面，已掌握大量数据的我们应该如何面对这些数据呢？","date":"2017-05-20","objectID":"/2017-05-20-network-data-analysis-introduction/","tags":["网络科学","讲座"],"title":"讲座记录：零基础网络数据分析入门","uri":"/2017-05-20-network-data-analysis-introduction/"},{"categories":["learning"],"content":"讲师介绍 刘勇，Gephi 官方认证讲师，数据可视化实践者，《网络数据可视化与分析利器：Gephi 中文教程》作者。 ","date":"2017-05-20","objectID":"/2017-05-20-network-data-analysis-introduction/:1:0","tags":["网络科学","讲座"],"title":"讲座记录：零基础网络数据分析入门","uri":"/2017-05-20-network-data-analysis-introduction/"},{"categories":["learning"],"content":"什么是网络数据 我们先来了解一下研究网络的学科——网络科学是什么。美国国家科研委员会（National Research Council）将网络科学定义为“研究物理，生物，和社会现象的网络化表达，建立针对这些象限具有预测效果的模型”的学科。网络数据则是对网络进行一种数字化的记录。网络科学的研究是以图论(数学的分支)为基础，在数据的记录上，也是以图论中图的数字化记录方式记录的。顶点和边是图论中最重要的两种元素，顶点的集合称作点集，边的集合称作边集，我们可以用点集和边集对图进行数字化记录。讲座介绍的 Gephi 也是基于这种方式，用节点表和边表来记录网络数据。 ","date":"2017-05-20","objectID":"/2017-05-20-network-data-analysis-introduction/:2:0","tags":["网络科学","讲座"],"title":"讲座记录：零基础网络数据分析入门","uri":"/2017-05-20-network-data-analysis-introduction/"},{"categories":["learning"],"content":"Gephi 的基本介绍及基本操作 Gephi 是一款由法国工程师开发的用于探索与分析网络的开源工具软件，它是免费的而且支持多平台。 打开 Gephi，界面上会出现三个图窗来供我们选择。最常用的两个图窗是概览和数据资料，概览是 Gephi 数据可视化处理的主要环境，中间的图窗是是数据可视化的图形显示区域，左侧是用来改变图形的工具；数据资料图窗是用来查看、编辑和修改网络数据，该窗口与 Excel 类似。网络图可视化完成后，可以切换到预览图窗来导出图形文件。 ","date":"2017-05-20","objectID":"/2017-05-20-network-data-analysis-introduction/:3:0","tags":["网络科学","讲座"],"title":"讲座记录：零基础网络数据分析入门","uri":"/2017-05-20-network-data-analysis-introduction/"},{"categories":["learning"],"content":"案例：“16 国 32 媒”数据操作 该案例以 16 国的 32 家日报（每个国家选两家最重要的日报）为节点，以一家日报在五年时间内对两家日报的引用次数为有向边的权值，来生成一个网络。数据导入后，Gephi 的界面中间会出现一个难以辨析的初始网络图。接下来可以调整网络图的布局和外观，得到一个清晰以观察的网络图，也可以对数据进行统计计算。 调整后便可得到一个清晰的网络图，可以看到最重要的节点是纽约时报、华盛顿邮报、卫报和泰晤士报，它们恰好也是全球最重要的四家日报。此外，我们还可以深入思考，引用关系究竟表明了什么含义，是贬义的还是褒义的？是正向的还是负向的影响？以及，这些媒体是不是有足够的代表性？ ","date":"2017-05-20","objectID":"/2017-05-20-network-data-analysis-introduction/:4:0","tags":["网络科学","讲座"],"title":"讲座记录：零基础网络数据分析入门","uri":"/2017-05-20-network-data-analysis-introduction/"},{"categories":["learning"],"content":"互动问答 Q1：网络数据分析在我们日常生活中有哪些应用？ 我们可以用 Gephi 来分析 Twitter 中好友和粉丝间的关系，看看哪些人是自己和一些朋友的共同好友，哪些人是自己的粉丝。 Q2：Gephi 处理的最大数据量是多少，数据较多时有没有可视化的技巧？ Gephi 最大的数据处理量跟边的数量有很大的关系，官方公布的数据是 100,000 个节点和 1,000,000 条边。当数据较多时，可以用 Gephi 中的聚类算法将功能相近的节点聚合，这样网络图就会变得清晰一些。 ","date":"2017-05-20","objectID":"/2017-05-20-network-data-analysis-introduction/:5:0","tags":["网络科学","讲座"],"title":"讲座记录：零基础网络数据分析入门","uri":"/2017-05-20-network-data-analysis-introduction/"},{"categories":["learning"],"content":"ChangeLog 2017-04-03 初稿 ","date":"2017-05-20","objectID":"/2017-05-20-network-data-analysis-introduction/:6:0","tags":["网络科学","讲座"],"title":"讲座记录：零基础网络数据分析入门","uri":"/2017-05-20-network-data-analysis-introduction/"},{"categories":["learning"],"content":"音乐的音 唱的比说的好听 学音标的音面对的是固定的 44 个音标；学语块的音要去寻找零星散落的发音要点；但从音乐的音开始，要学的内容变成了一个面，一个句子，一段文字，到处都是发音要点，需要慢慢积累。这个阶段不便集中学习，日常中听到喜欢的歌兴起而学，或是放松的时候学首歌更为合适。 ","date":"2017-04-05","objectID":"/2017-04-03-learning-american-english-3/:1:0","tags":["英语","学习"],"title":"学美语（三）：进阶","uri":"/2017-04-03-learning-american-english-3/"},{"categories":["learning"],"content":"语言和音乐的关系 在学术界，语言和音乐到底哪个先产生，现在还存在争议。 一方面，我们通常认为先有语言再有音乐，音乐是人类的一种较语言激烈的表达方式。正如《诗·大序》所云：“诗者，志之所之也。在心为志，发言为诗，情动于中而形于言。言之不足，故嗟叹之。嗟叹之不足，故咏歌之。咏歌之不足，不知手之舞之足之蹈之也。“ 另一方面，人类学家发现 3000 万年前的小型皮毛树栖灵长目动物（人类的祖先）已经具有了音乐识别能力。同时，我们也可以看到一些南半球的一些语言落后的土著部落有着神秘而复杂的打击乐。这些证据都在支持音乐先与语言的说法。 不管怎样，语言和音乐是紧密联系在一起的，学习语言可以借鉴许多音乐当中的技巧。 ","date":"2017-04-05","objectID":"/2017-04-03-learning-american-english-3/:1:1","tags":["英语","学习"],"title":"学美语（三）：进阶","uri":"/2017-04-03-learning-american-english-3/"},{"categories":["learning"],"content":"音乐如何帮助我们学习语言 很多歌曲都会押韵，副歌也会重复好多遍，这样就不用自己亲自去找单词来练习某些音标了，而且还能辨析易混淆的音（比如/l/和/r/）和长短音（比如 sit 和 seat）和练习双元音（歌曲里有些双元音的前半个元音会拉的很长）。 歌曲更重要的是用来练习连读、弱读、省略以及声调韵律。我们听英文歌常会听到很长、很明显的连读，通常我们读句子的时候不敢连读太长，歌曲恰好击中软肋，逼着我们去适应连读。练习连读的时候也能发现弱读和省略的规律，弱读是指元音向央元音弱化或爆破音失爆，例如，Far Away From Home 这首歌里的“I count on you“，on /ɔ:n/就弱读成/ən/，”cause love can find it time\"中 it 的/t/就是弱读，只塞气不发音，但要留有发音的时间间隔；省略和弱读是有差别的，弱读的爆破音是塞气再在下一个辅音发音的时候释放出来，而省略是整个音省略了，例如，The Climb 的“Keep climbing\"中的省略就很明显。相对于语言，音乐更加绵延起伏，抑扬顿挫，非常适合用来练习声调和韵律。 听老师说，歌曲还能练习气息，但我还没找到大规模练习的方法。 ","date":"2017-04-05","objectID":"/2017-04-03-learning-american-english-3/:1:2","tags":["英语","学习"],"title":"学美语（三）：进阶","uri":"/2017-04-03-learning-american-english-3/"},{"categories":["learning"],"content":"篇章的音 配音大法好 篇章的音，其练习方法不是让你去读文章，而是去配音，从最小单位的句子，再到一段文字。配音可以锻炼口型、内语，更好得感受镜像神经元的模仿学习作用，更好得理解肌动说（自己声腔大小的信息和自己发音运动特性对外来语音的分析和解码至关重要，语言感知和语言发音密切关系，通俗地讲，听力和发音关系密切），提高语音环（一串的语音，它揭示了语音存储容量和复述速度及复述过程在语音信息处理过程中起决定性作用，通俗讲，听力的理解和语音环关系密切）。 ","date":"2017-04-05","objectID":"/2017-04-03-learning-american-english-3/:2:0","tags":["英语","学习"],"title":"学美语（三）：进阶","uri":"/2017-04-03-learning-american-english-3/"},{"categories":["learning"],"content":"配音 选择什么材料： 原版的声音和自己的声音比较像 有清晰的口型，便于模仿 最好先从白人的发音开始 难度、长短合适且自己喜欢的 配音五步法 听熟读顺，理解语音、语义、重音。 只对口型不作声，让大脑产生自己在读的错觉。 只哼节奏不去读，注意气息变换（呼吸的轻重缓急、换气），可尝试画曲线。 mute 掉视频，想象自己的声音（先去熟悉自己录下的声音）。 发生模仿，嘴皮子越磨越薄。check 并修正自己和原声的差异。 ","date":"2017-04-05","objectID":"/2017-04-03-learning-american-english-3/:2:1","tags":["英语","学习"],"title":"学美语（三）：进阶","uri":"/2017-04-03-learning-american-english-3/"},{"categories":["learning"],"content":"读文章 英语的文章多抑扬顿挫，读文章的时候可以虚拟分段，标出重音、弱读、省略等等，刚开始的时候最好用有原声的材料（可模仿，可校正）。 ","date":"2017-04-05","objectID":"/2017-04-03-learning-american-english-3/:2:2","tags":["英语","学习"],"title":"学美语（三）：进阶","uri":"/2017-04-03-learning-american-english-3/"},{"categories":["learning"],"content":"语音闭环 到这里，学习路径走完了一遍：音标、语块、音乐、篇章，实则开了个头，以后的练习积累才是关键。 ","date":"2017-04-05","objectID":"/2017-04-03-learning-american-english-3/:3:0","tags":["英语","学习"],"title":"学美语（三）：进阶","uri":"/2017-04-03-learning-american-english-3/"},{"categories":["learning"],"content":"复盘 音标：/l/ /r/ /ə:r/ 语块：A Course in Phonetics: Home和 American Accent Training APP，完善清单 ","date":"2017-04-05","objectID":"/2017-04-03-learning-american-english-3/:4:0","tags":["英语","学习"],"title":"学美语（三）：进阶","uri":"/2017-04-03-learning-american-english-3/"},{"categories":["learning"],"content":"ChangeLog 2017-04-13 补充遗漏的知识点 2017-04-05 初稿 ","date":"2017-04-05","objectID":"/2017-04-03-learning-american-english-3/:5:0","tags":["英语","学习"],"title":"学美语（三）：进阶","uri":"/2017-04-03-learning-american-english-3/"},{"categories":["learning"],"content":" 音标在此组装成语言 音标练习到自我感觉良好的程度便转向语块练习，大概花了十天的时间，一边听何老师的课，一边学习 Lisa 的视频、读 coca 词表，A Course in Phonetics: Home 和 American Accent Training APP（太贵）还没开始使用，等下一轮的学习再用，毕竟这段时间的学习只是美语学习的一个开始。 ","date":"2017-04-04","objectID":"/2017-04-03-learning-american-english-2/:0:0","tags":["英语","学习"],"title":"学美语（二）：语块的音","uri":"/2017-04-03-learning-american-english-2/"},{"categories":["learning"],"content":"超音段特征 超音段特征又叫韵律特征，指的是除了元音、辅音的音色特征外的，包括音高、音强、音长及其相互关系的一切特征，与句法、语篇结构、信息结构等语言学结构密切相关。 从音位层次上看，音长的变化可以构成有区别意义作用的“长短音” 从音节层次上看，音高的变化可以构成“声调” 从音节组合层次上看，音强等因素的变化可以构成轻重音 从语句层次上看，音高、音强、音长等因素的变化可以构成语调 ","date":"2017-04-04","objectID":"/2017-04-03-learning-american-english-2/:0:1","tags":["英语","学习"],"title":"学美语（二）：语块的音","uri":"/2017-04-03-learning-american-english-2/"},{"categories":["learning"],"content":"音节 音节是用听觉可以区分清楚的语音基本单位。英语中词汇有单音节、双音节和多音节，如 take 是单音节，ta-ble 是双音节，con-tri-bu-tion 是多音节。 音节是按音标来划分的，不要被单词的拼写干扰，规律如下： 一般一个元音一个音节，几个元音就有几个音节。例如，take 只有一个元音，它就只有一个音节。 响辅音也可以构成音节，辅音中 /m/、/n/、/ŋ/、/l/ 四个是响辅音，它们和辅音音素结合也可以构成音节，一般出现在词尾，非重读。 辅音是音节的分界线，两元音音素之间只有一个辅音时，辅音音素归后一个音节，例如，stu’dent，fa‘ther。有两个辅音音素相连时，前一个归前，后一个归后，例如，win’ter，sis‘ter（此处 t 不浊化，因为 /tə:r/ 是一个独立音节，前面一个音素 /s/ 为清辅音，根据同化原则此处是不浊化的）。 开音节与闭音节 绝对开音节：以发音的元音字母结尾的音节。e.g. we three hello 相对开音节：（辅音+）元音字母+辅音字母+不发音的 e 字母（\u003e=1 个）构成的音节。e.g. take due plane bee 在开音节中，发音的元音字母发字母本身的音，e.g. use /ju:z/ 闭音节：以一个或几个辅音字母（r 除外）结尾而中间只有一个元音字母的音节。闭音节中，元音字母不发字母的本音。 辅音+元音+辅音：bad let 元音+辅音：it out ant 重读闭音节是指符合（重读音节、最后只有一个辅音字母、元音字母发短音）三要素的音节，重读闭音节动词的分词要双写。 ","date":"2017-04-04","objectID":"/2017-04-03-learning-american-english-2/:0:2","tags":["英语","学习"],"title":"学美语（二）：语块的音","uri":"/2017-04-03-learning-american-english-2/"},{"categories":["learning"],"content":"同化原则 通过“复制”序列中音位的特征来使一个语音同化为另一个，从而使两个音素相似。例如，多数拼写中的 n 被同化为 m，inpossible \u003e impossible（/m/和/p/更相似）。 ","date":"2017-04-04","objectID":"/2017-04-03-learning-american-english-2/:0:3","tags":["英语","学习"],"title":"学美语（二）：语块的音","uri":"/2017-04-03-learning-american-english-2/"},{"categories":["learning"],"content":"发音要点清单 一下清单总结了 Lisa 和何老师录音里补充的，以后还要增加 A Course in Phonetics 和 American Accent Training 的语块发音要点。 轻重音 对象 要点 基本音节重读 重读音节更长，更响亮 非重读音节 非重读音节向央元音弱化，e.g. o’clock pho’tography /ə/ 动词和名词的音节 名词，90% 的情况下，第一个音节重读 ；动词，60-70% 的情况下，第二个音节重读，e.g. object record 动词短语的重读规则 一般重读介词 ，短语之间有代词或名词也是如此；若动词短语=名词时，重读动词 名+名、形+名 一般分别重读前者和后者，e.g. ‘lunch time，blue ‘eyes.；若名词前有两个形容词，第一个形容词也要重读，e.g. Big black Dog -ate 结尾的单词 若是动词，读/eɪt/，e.g. graduate；若是形容词或名词，发音就要减弱，听起来像 /ɪt/ 或 /et/，具体视情况而定，e.g. articulate 后缀的重读 ese eer ique 结尾，重读后缀，e.g. Chinese pioneer technique；ic 结尾，重读 ic 前一个音节，e.g. rea‘listic e’lectric；从名词变成形容词，名词普遍第一个音节重读，而形容词则是第二个，e.g. ’origin o‘riginal（o 弱化） 地名和人名 两、三个单词组成时，重读最后一个； 缩写词和数字 重读最后一个字母 句子中单词重读 一般重读实义词，即名、动、形、副，e.g. Who stole the ‘money from me?；多个连在一起时，一般重读最后一个，e.g. Did you get the ‘job? 焦点词和虚拟分组 读一个较长的句子时可以将其划分成若干个虚拟的分组，一般焦点词在每个分组的后面部分，通常是名词或动词 特殊重读 特殊情况下，依感情色彩重读，一般出现在口语中 声调 对象 要点 陈述句 降调，升调会让人觉得你说话紧张 提问句 用 yes/no 回答的升调 ；WH 疑问句降调 列举多个物品、给别人选择、条件从句、复合句 最后一个（短句）降调，其余升调；e.g. I think it’s gonna RAIN，but… 引导性的文字 升调，e.g. However，On the other hand… 高阶技巧 对象 要点（以上斜黑体为省略音节 ） 单词轻读 代词、介词、冠词和助动词常轻读，e.g. as on at to for or out our \u003e /ə/，and \u003e /n/ PS: or … that，清楚知道接下来说什么，则削弱元音，还在思考，没想到说什么，可以发原音。 省略音节 完全不发音，e.g. /a/ basic**ally actsally，vegetable different，chocolate comfo**rtable（rt 变成 tr) 常见错误发音 b clim**b** de**bt, ch yacht，d adjust adjective,，l walk half，t ballet** bouque**t，th clothes，p receipt，s island debris，w answ**er 辅音丛 不能省略，e.g. maths months s 音后的清辅音浊化 e.g. sport sky star 辅、元连读 前一单词辅音结尾接后一单词元音开头，连读并不意味着语速快 ，而是平滑的，原来重读的地方还是要重读，分组间不连读，切记不要急着去学连读e.g. what if \u003e whadif 两辅连续 两个辅音一样或有相同的发音点时，只发一个音，e.g. likes swimming，five friends 两元连续 前一单词结尾是/i/ /oɪ/ /aɪ/ /eɪ/，则后接单词前加一个轻轻的/j/，e.g. see it /’sijɪt/；前一单词结尾是/u:/ /oʊ/，则后接单词前加一个轻轻的/w/，e.g. no answer /noʊ‘wʌnsə:r/ 代词的轻读 e.g. did **h**e，call **hi**m，drive her \u003e driver，them \u003e em 当在句首或强调时，则不能省略 缩写 强调的时候，不会用缩写，e.g. it’ll \u003e id’ll，I would \u003e I’d，they are \u003e they’re /ə:r/，we have \u003e we’ve 难懂的缩写 could have \u003e couldəve，could not have \u003e couldnəv，would you have \u003e wouldjuəv 非正式场合 kind of a \u003e kind a，let me \u003e lemme，give me \u003e gimme ","date":"2017-04-04","objectID":"/2017-04-03-learning-american-english-2/:0:4","tags":["英语","学习"],"title":"学美语（二）：语块的音","uri":"/2017-04-03-learning-american-english-2/"},{"categories":["learning"],"content":"ChangeLog 2017-04-13 补充遗漏的知识点 2017-04-05 初稿 ","date":"2017-04-04","objectID":"/2017-04-03-learning-american-english-2/:1:0","tags":["英语","学习"],"title":"学美语（二）：语块的音","uri":"/2017-04-03-learning-american-english-2/"},{"categories":["learning"],"content":"回想初学英语那会儿，老师用方言版的英语领着读 “Good morning”，我就在课本上记下 “gu de mo ning”，还暗自庆幸找到了一个好方法。这个记发音的方法一直沿用到去宁波上高中，期间上千单词的发音得到了巩固，也形成了错误的英语内语。上高中后，英语课上经常被老师纠音，却总改不过来，有时听不出自己的发音哪里不对劲，有时就算听出来了也不知道正确的音要怎么发。老师反复强调“背新概念或课文要先听磁带”，那时当英语是夜叉，心里一百个不情愿，就想着赶紧背完了事。就这样错过了最好的英语老师和最好的英语学习机会，后来偶尔说英语，因为不确定音到底怎么发，都不敢说出口。 去年在开智有幸遇到了何老师，加入了她的认知英语课，但一直拖到上个月才学。一个月坚持下来，效果还是很明显的，学习英语的信念也改变了，没想到学英语能如此轻松愉快。接下来，便按何老师的授课顺序跟你分享这段时间的学习经历吧。 ","date":"2017-04-03","objectID":"/2017-04-03-learning-american-english-1/:0:0","tags":["英语","成长","学习"],"title":"学美语（一）：音标的音","uri":"/2017-04-03-learning-american-english-1/"},{"categories":["learning"],"content":"音标的音 子曰：取乎其上，得乎其中；取乎其中，得乎其下；取乎其下，则无所得矣。 你可能会问，有必要从音标开始学吗？在我看来，这是很有必要的，而且这一块还占了一半的时间。就拿我的情况来说，美语里一半以上的音真的是不知道怎么发，以前都是想怎么发就怎么发。音标看似简单，但不会的舌位、唇形、走位、形变都是要练几十遍上百遍才能做到位，在做对的那一下的欣喜之前也是要有耐心去重复练习、录音、录像、矫正。好在大多音多能在一两天内学会，给自己一个及时的反馈，不然我可能也会半途而废。 一开始，我是用两个 APP 练习，sound of speech 和 IPA phonetics，前者友好一点，但有些口型图片表达的不够清楚，后者需要自己去页面上找到美语的音标。我大概花了一周的时间按照 APP 里的描述模仿发音视频练习，还是感到自己发的不对，有些地方没有领会到，愁云未展。接着又找来 Rachel 和 Lisa 的视频来模仿练习，又是录音，又是照镜子，练多了，舌头便会不经意在认为正确的舌位做出正确的移动；唇形和口腔的开合程度可以照镜子或看录像来跟教学视频比较，嘴唇有没有噘，下巴是不是张太开，都能观察到。 下面来介绍一下音标，记音标最简单科学的方法是记 underhill 音标表（英语 44 个，美语 43 个，没有 ɒ）。 辅音第一行和第二行分别是爆破音和摩擦音，从左往右舌头位置逐渐向口腔后部移动；左上角的单元音是按照舌头的上下前后位置排的，右上角的双元音发音基本上是从前一个单元音的舌位滑到后一个单元音的舌位。 ","date":"2017-04-03","objectID":"/2017-04-03-learning-american-english-1/:1:0","tags":["英语","成长","学习"],"title":"学美语（一）：音标的音","uri":"/2017-04-03-learning-american-english-1/"},{"categories":["learning"],"content":"辅音 每个辅音的发音都有需要注意的地方，尤其是 /ʃ/、/ʒ/、/tʃ/、/dʒ/、/l/、/r/。 辅音 发音要点 清：p； 浊：b 注意不送气的情形（stop）：/p|/和/b|/，e.g. napkin /’næp|kɪn/ 清：t； 浊：d stop 音：e.g. cut /kʌt|/；轻拍音（flap）：t 和 d 都发清 d，不塞气，舌前轻触上颚发音，发音后舌头又恢复放松状态 e.g. better /‘bedə:r/ 清：k； 浊：g stop 音：e.g. back to work /bæk| tə wεək/ 清：f； 浊：v 后接辅音的舌位可同时做出 清：s； 浊：z 两种舌位：舌尖贴于上齿后和下齿后 清：θ； 浊：ð 舌尖微露出齿缝，发音快的时候，舌尖可贴在齿后发音 e.g. the /ðə/ 清：ʃ； 浊：ʒ； 清：tʃ； 浊：dʒ 嘴唇打开（有些 native speaker 牙龈都会露出来），牙齿并拢 鼻音：m； n； ŋ 舌头要张开堵住气流，让气流从鼻腔过，在单词中稍微延长发音时间 声门音：h 是由收窄声门产生的，用力要适中 舌侧音：l light 音：舌尖顶住上颚或上排门牙底部，让气流从舌侧经过；dark：舌头拉回或舌后下压（完整的发音还需第二步，即把舌尖移至上颚，但一般可省） 最难的音：r 介于普通话 r 和 l 之间的卷舌音，或者舌前和舌中抬起，两种方式都需要嘴唇收成圆形向前微伸，下巴不要太下；但/r/在结尾时嘴唇仅向外微开，而无需收紧 较好发的音：w 舌后向软腭伸展，舌前下倾，嘴收紧向外移动，像吹气球 滑音：j 舌中抬起并向前推，舌尖向下 ","date":"2017-04-03","objectID":"/2017-04-03-learning-american-english-1/:1:1","tags":["英语","成长","学习"],"title":"学美语（一）：音标的音","uri":"/2017-04-03-learning-american-english-1/"},{"categories":["learning"],"content":"元音 在我看来，元音比辅音要难一些，因为元音之间的差别较小，容易混淆。下面按由易到难的顺序来讲： 五个极限元音 所谓的极限元音，指的是舌头位置在口腔的五个极端位置。这五个元音重读的时候会有一个升调和降调的过程，弱读的时候是一个向央元音弱化的短促的音。 极限元音 发音要点 æ 后跟 /m/ 或 /n/ 时，发音到一半放松舌头和嘴角，向 /ə/ 变化；后跟 /ŋ/ 时，发音变成 /eɪ/ a: 舌尖轻触门牙背 ɔ: 舌尖向后缩，不触碰任何东西。嘴唇微张开；后跟 /r/ 时，两音会融合在一起变成 /ɔr/，嘴张得小一些，舌前抬起 e.g. core /kɔr/ u: 舌后朝软腭伸展，舌前保持向下，嘴唇由松变圆 i: 舌中、舌前向上颚伸展，嘴角向后下方拉 五个松短元音 五个松短元音，顾名思义，口腔比较放松，发音比较短，舌位比较接近，较难区分。 松短元音 发音要点 ə 央元音，整个口腔都要放松；所有元音弱化的去处 e.g. aways, unstressed e/ε 介于 /ə/ 与 /æ/ 之间 ɪ 舌前向上颚拱起 ʊ 舌后朝上颚抬起，舌前下倾，嘴唇微张 ʌ 舌前稍下压，舌尖向前 其他单元音 美语里还有一个单元音 /ə:r/，也是最难发的一个元音。舌中朝上颚抬起，舌前下垂稍往回拉，嘴唇稍向外张。 英音则还有两个单元音：/ɒ/和/ə:/ 八个双元音 双元音的发音方法是：前一个单元音滑动到后一个单元音，声音逐渐变小。我们读文章的时候语速会比较快，但双元音滑动的过程不能省，省了发音就不够饱满，不够好听。这样说会很累吗？是的，一开始会比较累，要知道 native speaker 说英语是用肩部以上的一大块部位来发音的，而不是仅仅口腔和声带。 ","date":"2017-04-03","objectID":"/2017-04-03-learning-american-english-1/:1:2","tags":["英语","成长","学习"],"title":"学美语（一）：音标的音","uri":"/2017-04-03-learning-american-english-1/"},{"categories":["learning"],"content":"几个帮助发音的技巧 McGurk Effect McGurk Effect，一个感性的认知现象，表现在语音的感知过程中听觉和视觉的相互作用，有时人类的听觉会过多受到视觉的影响，产生误听。当视觉察觉到的一种声音与耳朵听到的另一种声音相匹配时，会让人神秘的察觉到第三种声音。例如看 /i:/ 的口型，听 /e/ 的发音，会听到 /ɪ/。因此我们在发音的时候一定要注意自己的口型，不然会干扰到听众的接收。 标准音的真相 上文说了这么多发音规范，可能会误导你以为会有标准的美语，下图便可以到诉你真相。 如果有些音分辨不出来，听不同的口音的发音，听力会变得敏感，原来听不出的差异也能分辨出来了。 镜像神经元 镜像神经元，位于大脑前额叶，它的作用是：当你看到别人在做一个动作的时候，该神经元会产生一个和你自己做该动作一样的电信号（其实你并没有做动作）。那么你可能会问，“不对啊，为什么我没有这种体验？”，因为我们的动觉器官产生信号来告诉我们，“嗨，别慌，那个被打的人不是你。”但是，倘若你被扒了皮，将会跟别人感同身受，所见即所感。发音其实也是一项运动，它是舌头、嘴唇和声带的精确协调运动，发正确的音是视觉、听觉和动觉互相协调验证的结果。镜像神经元告诉我们，模仿别人发音（多调用一些感官）是一个很好的方法。 ref：【TED】一探神经元何以筑文明 内语 内语是语言内化的产物，不是凭空而来的，而是发音器官对应的脑区创造出来的。当我们想着一个声音，不发生只做口型，也能做到和发声一样的口型，这就是运用内语的结果。看视频练习模仿，不断地重复，都是为了创造内语，当重复听一个音频或看一个视频到喉咙瘙痒，很想跟读的时候，内语就被强化了。此外，如果熟悉自己的声音的话，在心里练习也是有效的。 ","date":"2017-04-03","objectID":"/2017-04-03-learning-american-english-1/:1:3","tags":["英语","成长","学习"],"title":"学美语（一）：音标的音","uri":"/2017-04-03-learning-american-english-1/"},{"categories":["learning"],"content":"ChangeLog 2017-04-13 补充遗漏的知识点 2017-04-05 初稿 ","date":"2017-04-03","objectID":"/2017-04-03-learning-american-english-1/:2:0","tags":["英语","成长","学习"],"title":"学美语（一）：音标的音","uri":"/2017-04-03-learning-american-english-1/"},{"categories":["personal"],"content":"台大的这一学期，总的来说过得很充实。学期初的前四分之一，放了两回假，功课不太紧张，花点时间收尾暑假的学习，去了趟花莲。之后一直到期末都是不变的作息，不分节假日：八点多起床，要么去上课要么去图书馆做作业、看论文、看书，下午接着上课、做作业、看论文、看书（有时会去周边逛逛吃点美食或坐捷运去逛逛台北），晚上要么练拳、和社友聊天要么还是老四项，十一点至十二点吃个夜宵，回公寓后看会儿 YouTube 便去睡。 可能最初来台大的目的就是想学点经济学、看看经济学研究的样子，所以后来选了七门课（两门没上过先修课，一门是硕博班的课），还旁听了好几次课，也导致学期的后四分之三几乎在学校里度过。因此接下来能聊的也只有课程、老师、社团、台湾朋友这些话题了。 ","date":"2017-03-06","objectID":"/2017-03-06-half-year-in-ntu/:0:0","tags":["生活"],"title":"台大半年","uri":"/2017-03-06-half-year-in-ntu/"},{"categories":["personal"],"content":"做学术的老师更有魅力 台大老师让我印象最深刻的是他们讲自己研究领域的那个画面，微微抬起头，双眼放空，思绪飘到自己做研究的漫长岁月，脸上浮起意味深长的喜爱和满足。我暗自羡慕他们，有自己专研的领域，就像自家的小菜园，里面的小番茄已经火红可餐。 短短一学期，感动我的老师还不少：古妈讲课特别有带入感，张森林老师对金融领域的热爱溢于言表，陈圣贤老师知识体系特别清晰，江淳芳老师很在意学生的好奇心…… ","date":"2017-03-06","objectID":"/2017-03-06-half-year-in-ntu/:1:0","tags":["生活"],"title":"台大半年","uri":"/2017-03-06-half-year-in-ntu/"},{"categories":["personal"],"content":"古妈 老师里面最喜欢的是古妈，她的“经济组织”是给大学部高年级和硕士班的学生开的小课，全班只有十几个人。古妈是一个心思单纯的人，比学生还要有好奇心，大概做学术研究久了才会有这种素养。上古妈的课之前，我还在纠结到底选“经济组织”还是“经济发展理论”，听课没十分钟我就决定了，讲的实在太精彩了，还合我口味。 当时古妈分享一篇论文《Masterpieces and Markets》，论文比较了二战前巴黎周围的印象派画家和二战后纽约周围的抽象表现主义画家的作品以及展示作品的形式和时代背景，两个时代作品的展现方式给了画家迥异的激励，以至于两个时代的作品在尺寸和耗时上有极大的差异。古妈还拿出了论文里提到的画家和作品来解读，当场开了眼界，没想到经济学研究的范围如此广阔，艺术作品的形式也可以是一个经济学问题。 期中前，古妈的课以讲论文为主，作业里也有论文要看，但这里的“论文”并不枯燥。有一周的作业还特别有趣，读一篇论文《The Law and Economics of Pirate Organization》。四十几页的论文就像海盗故事，我在图书馆的落地窗前花了五六个小时读完，原来历史上的海盗组织和《加勒比海盗》里的及其相似，有民主的选举制度、明确的合作分工、融洽的船员氛围等等，相比于当时正规的商船先进太多。 古妈有时候也会讲自己的论文，她研究了很多台湾的问题，比如日治时期茶贩的作用、台湾的祭祖组织、台湾土地制度，古妈发表的几十篇论文大多都关于台湾，大概她对那片土地爱的很深吧。 上古妈的课是一种享受，古妈讲，我在底下自己跟着推理，理顺逻辑，时常产生心流；有时同学们也会一起讨论，喜欢学术的同学都有自己的特质，很可爱；下课了再和古妈讨论细节和疑点，古妈总能捕捉到我的疑惑点。 有一回下课后和古妈聊多了，被古妈问起了个人，特别感动。古妈夸我微观经济学学的不错，后来我们还聊了温州人现象的经济学原因、我的个人规划，古妈热心地给了很多建议。两个人，饿着肚子聊了快一个小时，最后一点钟了，我要赶去上课才依依不舍得离开教室。离开的时候，古妈还问我对围棋有没有兴趣，想不想加入她的围棋聚会，我怕再聊下去会忍不住流眼泪，婉言拒绝后便先行离开了。 期中之后，“经济组织”的同学开始一起读《Why Nations Fall》，用一节课分享讨论。这本书讲的是政治制度和经济制度的差异导致不同国家不同的发达程度，因此中国大陆这颗闪亮的明星不可避免会在书里和讨论里出现。讨论的时候，古妈经常问我关于大陆的问题，热情和好奇心让人心生喜爱，但和绝大多数台大老师和同学一样对新中国成立后的大陆很陌生，让我有些心酸。 期末考试太密集，考完了还有些事，就没跟古妈去档案馆看契约，也没有跟她告别，希望未来还有机会再相遇。 ","date":"2017-03-06","objectID":"/2017-03-06-half-year-in-ntu/:1:1","tags":["生活"],"title":"台大半年","uri":"/2017-03-06-half-year-in-ntu/"},{"categories":["personal"],"content":"其他老师 其他课人都比较多，不能频繁地和老师接触，但有些时刻还是挺感动的。 “期货和选择权”的授课老师，张森林老师，是一个很喜欢金融的教授。我之前对金融有偏见，认为金融是靠独占一些有价值的信息来牟利的，做学术研究的意义不大，学金融的人都是太想挣钱了，没有个性。有一次课上，被老师说服了，那天课本上到了理论的部分，仅凭市场无套利和二叉树假设，就推出了符合理性人的理想世界的结果，简洁而优美。如果没有老师努力地强调，估计很容易像参加金融培训的人一样，把它看成建立在理性人假设的前提下。 江淳芳老师是 08 年毕业的 PhD，教“计量经济学”。期中前，讲完理论，期中后便是方法，老师用论文作为例子来讲计量方法，再让学生读论文，完成设计精妙的作业。有一次作业整整做了十几个小时，做完后理解的很透，能闭着眼把知识点串起来，大呼过瘾。此外，年轻的老师似乎更懂学生，江老师课上每每讲到高级的知识点都会延伸出去，满足同学的好奇心。 “财政学”的老师李显峰，对学生特别友好，有点把学生惯坏了的嫌疑。上交第一次课堂小测验的时候，他竟然双手接过还说谢谢，那是我第一次接触台大老师，被这小细节感动的不行。学期末，入冬了，老师还充当天气预报，提醒学生穿衣服，甚至亲自去关心感冒的同学，我在一旁看着心里暖暖的。 其他课都比较硬，根本无暇顾及老师的言行举止，记得最多的是，做一整天还做不完的周末作业。 ","date":"2017-03-06","objectID":"/2017-03-06-half-year-in-ntu/:1:2","tags":["生活"],"title":"台大半年","uri":"/2017-03-06-half-year-in-ntu/"},{"categories":["personal"],"content":"八极拳研习社 台大的社团很多，也很开放，在大陆没见过的法轮功社、SM 社、女同社都有。纳新那个周末，踩着尾巴去转了一圈，本打算加入一个国术社，结果到现场发现光国术社就有十来个，八步螳螂拳社、合气太极拳社、咏春拳社等等，最后拿了国术社团宣传单合集，晚上回公寓一个一个扫码筛选。国术不是花拳绣腿，不勤练的话是出不了成果的，所以选了一个社课较多的八极拳研习社。 八极拳社一周三次社课，一次两个小时的团练，先半小时揉功，再半小时活桩，然后分组练习拳或兵器。我平时功课紧张，常泡在图书馆，把身体坐僵，所以练拳对我来说是一件特别舒服、放松的事（其实也挺累的）。 社员多数是研究生或博士生，入社都有三五年了，相处起来很随和。周一教练会来指导一下，其余时间都是跟着学长练习。练了几年的学长跟我这种新手比，果真是有差别的。上百次练习让他们的身体开始有了变化，有的在一次两个钟头的站桩后整个后背变松了，有的能让身上的某些迟钝的关节动起来，有的能把手掌的受力传导到脚底，他们的身体都慢慢活了起来，越来越多的部位能感知到，很羡慕。教练讲过，国术不是要练肌肉，而是要练一个连贯的感觉，重新找回最自然的发力方式，我直到快学期末了才有点明白。 一开始，练完拳，请教一些技术问题后就回公寓了。后来一次和社员逛夜市聊到，社团最有趣的活动是，练完拳后大家一起聊天（经常聊到十一点）。之后试着留下来，果然有趣。教练在的时候，听教练聊国术，聊中国传统文化，聊台湾同性恋立法（当时正热）；教练不在的时候，跟中文系、历史系的学长还有人类学系的学姐一起瞎聊。社员很多都读过上百本课外书，有自己的兴趣爱好，每每讲到一个节点都有人能延伸出去，席地而坐，说的爽快听的舒服。 离开台大，最不舍的就是这些一起练拳聊天的社员了，那个圈子，现在回母校偶尔会自己一个人练拳，希望练习的成果能保持住，有机会回去参加一次集训。 ","date":"2017-03-06","objectID":"/2017-03-06-half-year-in-ntu/:2:0","tags":["生活"],"title":"台大半年","uri":"/2017-03-06-half-year-in-ntu/"},{"categories":["personal"],"content":"自由之风 台湾与大陆虽然都继承了中华文化，但长期的地理隔离，两岸文化出现了细微的漂移。台湾早在八十年代便完成了经济的高速增长，四五十岁的的长者，不乏受过良好教育的，整个社会普遍普遍文明友好。在台大的一学期，几乎每天都会和台湾的朋友聊天，被自由民主的风吹一吹，难免引起一些反应。 在大陆这边，大学里师生多少有一点上下级的关系，特别是大一使加入的学生会组织，几十个部员围着几个主席和老师转。身处其中的时候可能觉得理所应当，当在台大见到不一样的可能性，一种师生极为平等的状态，顿时觉得，苹果吃到最后吃到了烂芯。 大陆的很多大学相比于台大更像一座“工厂”，特别是继承苏联体制的母校。固定的课表、标准的考试、流水线般的课程、层级明确的行政体系等等，都跟工厂一样生产着会背书的学生。而台大选课很灵活，对学生的考核全面，老师只负责科研和教学，学生事务、行政事务大多由线上系统管理。在母校，学生是绝对不敢反抗老师和领导的（大家都知道后果很严重），在台大看到不少学生自发监督校长，拉横幅抗议校领导的不良行为。 ","date":"2017-03-06","objectID":"/2017-03-06-half-year-in-ntu/:3:0","tags":["生活"],"title":"台大半年","uri":"/2017-03-06-half-year-in-ntu/"},{"categories":["personal"],"content":"附录 骑行苏花公路视频 ：骑行断崖公路，摸黑过生死隧道（朋友拍的） 小说——声螺 ：灵感来自清水断崖、出海赏鲸、台湾电影《听说》 ","date":"2017-03-06","objectID":"/2017-03-06-half-year-in-ntu/:4:0","tags":["生活"],"title":"台大半年","uri":"/2017-03-06-half-year-in-ntu/"},{"categories":["personal"],"content":"ChangeLog 2017-03-06 初稿 ","date":"2017-03-06","objectID":"/2017-03-06-half-year-in-ntu/:5:0","tags":["生活"],"title":"台大半年","uri":"/2017-03-06-half-year-in-ntu/"},{"categories":["personal"],"content":"小学到大二的阅读记录","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["personal"],"content":" 史之为用，其利甚博，乃生人之急务，为国家之要到。——刘知几《史通》 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:0:0","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["personal"],"content":"从泥塘里起步 小学六年级搬到新教学楼，教室刚好跟图书室同一层，我的阅读便是从这个契机开始。这是小学的第一个图书室，学校里的图书馆不允许小学生借书，有时候周末无聊会和小伙伴去逛一下，只是翻翻书，没有真的去读。寄宿生总有一大把的时间要打发，新图书室恰巧又近，自然会常去逛逛。 当时老师、同学总是提到《钢铁是怎样炼成的》，一部不能更经典的名著，到现在还能从嘴里蹦出作者名字，“奥斯特洛夫斯基”，我正经读过的第一本便是它。读的时候不了解小说背景，只是从故事中读出了“生命宝贵，人应该为此努力奋斗”，挺振奋人心。 小学阶段，另外两本正经读过的书是《牛虻》和《复活》，其他的都是用来打发时间，比如“马小跳系列”。《牛虻》很精彩，跟《钢》一样激励读者“在困境中要坚强”，我读后燃起了不少学习动力，以致于后来有段时间，每晚都会做一些数学竞赛题。六年级也是少年对爱情懵懂又开始萌动的时期，但《复活》绝不是一本好的爱情启蒙读物，少年如我读后无端地背上了罪名，走了三年的救赎路。以上三本书便是我小学阶段的阅读全传了，三本黑泥一样厚重的书抹在了最青涩的岁月上，不管怎样总算翻开了书卷。 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:1:0","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["personal"],"content":"科技的蓝天下 初中期间上的是奥赛班，其宗旨是让乡下和小镇的学生在两年半的时间内赶上城市一流学生，紧张的学业和频繁的提前招生模拟考榨干了课余时间，阅读更是被挤到狭缝里。不过初中仅有的一些阅读，让我翻开不一样的人生篇章，弥足珍贵。 几年前，正值 IT 业的浪潮冲到一个高峰，年少的我也被“卷入”其中。初中三年搬过几次教室，好在每次都没有远离过图书室。初一有段时间特别着迷《电脑爱好者》，大概花三四个月的时间看完了二十几期，还用心爱的小笔记本做摘抄。后来又看了些《电脑报》，相比于新闻报道，我更喜欢《电脑爱好者》讲解的软件应用。正是那时候接触到“黑客”，心里尖叫着“简直酷毙了”，恨不得马上去学黑客技术。 有个周末更是心血来潮，让出校的同学去新华书店帮忙带一本关于黑客技术的书，记得书名叫《黑客攻防大师》，同学结账的时候还被店主从上到下审视了一番。假期回家后开始捣鼓《黑》，看了五分之一左右，又翻了一遍附赠光盘，纵使我已经按教程的步骤操作，结果要么卡在某一步上，要么哪里错了，反复几次之后热情便褪去了。想来可惜，一簇小火苗就这样熄灭了，要是被稍微添点油，结局可能会大有不同。 初一末了，电子产品开始流行，最流行的是用来看小说的 MP4，我也买了一个。同学看的最多的是玄幻小说，而我不甘堕落，又耐不住无聊，于是看一些无伤大雅的小说。假期回家还念念不忘 IT，往 MP4 里存了李彦宏的传记《相信中国》和李开复的传记《世界因你而不同》，这两本书都是晚上闷在被窝里看完的。书里大洋彼岸的硅谷被描述成气候宜人的科技城，上演着一个个动人的逐梦故事，让我心驰神往。我还把这种向往写在了周记本里，结果语文老师点评道，“不要想那些不可能的事”。之后，这个梦想就压在心底了，再没跟任何人提起。 初中的那些阅读本已随岁月一起流逝，无意中发现的一叠杂志勾起了一串回忆。 去年暑假回家，在放旧书的房间里发现厚厚一叠的《环球科学》杂志，有 24 本。订阅的那两年，寒暑假回家都能攒到五六本，然后一本本，从封面到背面一页页地读，假期结束之前还会再翻一翻。杂志侧面订书钉旁都裂开了，露出白色纹理，看着挺欣慰的。我是碰上了多大的好运，竟然给了自己如此光辉灿烂的科学启蒙教育。要知道《环球科学》是《Scientific American》独家授权的科普杂志，报道全球最新科学成果以及科技对人类未来商业、文化、伦理和政治等方面的深刻影响。 我翻了几本，心里五味杂陈，这些杂志被冷落的日子，也是科学梦渐渐淡去的日子，面对少年时那颗快要跳出来的好奇心，无比惭愧。几天的失眠紧随而来，那些渴望在枕头里藏了几年又重新跑了出来，一见如故，此刻两个时间结点打通了一条时空隧道。 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:2:0","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["personal"],"content":"顺着气息去寻你 上高中之后，一路上也遇到了不少喜欢读书的小伙伴，先是同桌，受他影响养成了买书读书的习惯，后来又在他的推荐下读了《第三种猩猩》、《自私的基因》等等，把阅读往上提了一个水准；然后是女神，跟着她的脚步看了《看见》、龙应台的三本和《送你一颗子弹》；还有在读了一位同学的作文之后开始喜欢上荷西，于是读了三毛的四本散文。那是时常读到一本感兴趣的书便会顺着这股气息去寻找更多的同类。所谓的气息，总是淡淡的，随风飘荡，几年后再去捕捉，只能找到那些较独特的（还好在豆瓣记录了一些）。 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:0","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["personal"],"content":"毛姆的月亮 初中除了种下科技的种子，也埋了一颗文学的种子。尽管初中课多，老师管得严，一些休闲杂志总能从天罗地网的缝隙间穿进来。像《意林》、《读者》、《格言》等杂志，一篇大概两三页，论其篇幅、价格都适合课上和课间放松娱乐，同学间互相传阅也方便。这种杂志读了不下 30 本，唯独有一篇到现在还记得大概： 一位医学生得到导师推荐去留学，上学途中为了挣船费便在船上当随船医生。船到站，少年没有下船，而是留下来继续做医生。十几年后，曾经不如他的同学都已事业有成，中年的他还是小地方的医生，但奇怪的是他生活虽拮据，目光却清澈无比。 上高中后无意中发现了故事的出处，毛姆的《月亮与六便士》，随着这股气味，还找到很多类似的故事： 毛姆： 刀锋 毛姆短篇小说精选集 其他：德米安 消失的地平线 悉达多 世俗生活，充斥着虚假与谎言，日复一日地束缚着你我，直到把我们送到死亡的那一刻。生命的意义是什么？作为这个星球唯一有智慧的生命，人类，我们如何活出人类的价值而不辜负大自然的恩赐？这些鲜活的故事告诉我，去追求心声，不管选择了什么都努力去实现，不要被世俗的目光击退，勇敢地去追求，只求一个心安。可惜高中的我，刚从乡下来到城里，只觉得世界真大，哪晓得自己喜欢什么。 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:1","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["personal"],"content":"野性的呼唤 大草原上，天地苍茫，牛羊如星点遍布，狼王藏在山头后面，亮出钢锥般的牙，一场围剿和杀戮即将开始。《狼图腾 》里的画面依旧能在脑海里重现，紧张激烈的情节，大草原的神秘，颠覆观念的狼故事，作者让我一点点地爱上了狼，爱上了狼的品性，勇敢、强悍、智慧、狡猾、凶残、贪婪、狂妄、野心、雄心、耐性、机敏、警觉、体力、耐力。狼不同于狗，千万年来都未能被人类驯服，狼追求自由，有自己的尊严，为了自由、生存顽强斗争到底。喜欢就想去了解更多，后来又看了三本关于狼的书。 重返狼群 ：现实生活中养狼的纪实 野性的呼唤 ：心在呼唤自由 白牙 ：狼收起獠牙 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:2","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["personal"],"content":"听他讲故事 高中时期一反常态的轻松，一周上五天，五天上白天。作为住宿生，无数个周末，没有特别的活动就会读读书。散文是很好的选择，轻松又有趣味，不同人的不同生活都记录在文字里，等待着你去发现。有时候也可以用学写作的借口去读，像汪曾祺、林清玄、季羡林的散文文笔都挺好的。这些书多是从图书馆借的，只找到当时有在豆瓣记录的一些： 龙应台：目送 亲爱的安德烈 孩子你慢慢来 三毛：撒哈拉的故事 送你一匹马 温柔的夜 梦里花落知多少 其他：文化苦旅 季羡林散文精选 送你一颗子弹 幸福的七种颜色 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:3","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["personal"],"content":"懂一点事 像很多青少年一样，我也会去寻找自己在这颗星球上的位置，去了解我的国家，我生长的土地。可能很小就一个人在语言文化都跟家乡有差异的地方上学的缘故，成长中除了遇到身心问题，还多了一个归属问题。这些问题就像数学竞赛题，有时候挤破头脑也没有半点思路，不得不去书中翻解答，即便有些不能解决，但至少知道了此题超纲。 了解自身： 孤独六讲 生活十讲 蒙田随笔精选 了解周围：城市的胜利 公正 激荡三十年（上） 许倬云说历史：台湾四百年 常识 看见 国家竞争力 浪潮之巅 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:4","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["personal"],"content":"从小说认识社会 了解周围世界另一个途经是读关于它的小说，了解来源于现实的虚拟小说人物。印象最深刻的一本是《国家干部》，暑假在家花了两天半的时间才读完，一是因为它太厚，再是常被主人公感动得两眼汪汪，影响视线。我可能是一个比较反常的 90 后，还有着为人民服务的理想，脑子里还经常构想着区域建设，唉，估计是看过的那些地图集惹的祸。 活着 边城 蛙 穆斯林的葬礼 国家干部 1988：我想和这个世界谈谈 平凡的世界（全三册） 散文中国 黄金时代 围城 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:5","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["personal"],"content":"其他 最后就用一个“其他”来收纳那些零散在历史长河里，扫一眼还能看得见，而且看见了想捡起来瞧瞧的书。 西方小说：因为不喜欢西方贵族生活，所以对很多西方小说提不起兴趣。 老人与海 麦田里的守望者 等待野蛮人 质数的孤独 世界十大文豪 源泉 日本小说：含蓄又色情，不过还是蛮喜欢课本里的《清兵卫与葫芦》 挪威的森林 雪国 历史： 全球通史（第 7 版 上册） 中国近代史 中国大历史 万历十五年 科幻：只记得最经典的了 三体：I II Ⅲ 基地三部曲：基地 第二基地 基地与帝国 一些标示理科生身份的书： 万物简史 上帝掷骰子吗? 数学之美 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:3:6","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["personal"],"content":"终身学习 通过贪婪地阅读成为一个终身学习者，培养自己的好奇心，争取每天都变得更聪明一点。——查理·芒格 以上叨叨叨讲了这么多，时间跨度从小学五六年级到大二上（作者现在大三），真要问对我有什么用，我会回答，“这段阅读史让我养成了阅读的习惯，成为一个潜在的终身学习者”。终身学习，不断提高自己，在我们这个充满不确定的时代显得格外重要。未来我们除了跟人类抢饭碗，还要跟机器人抢饭碗，如果不想被机器人追着前进，那最好就是自己养成阅读的习惯，习惯地学习一些分外的知识来充实自己。 怎样养成阅读的习惯，我的建议是先阅读一些自己喜欢的领域，不管跟自己的专业或者工作相不相关。等到当你休息时，也会选择去看本书而不是打游戏或刷剧，你可能会发现阅读是一件一举多得、力量无穷的事情；你之后还会发现一些更高级的阅读方法，像主题阅读、全局认识、卡片笔记等等，你说不定会兴奋地对自己说，“嘿，人生终于要走上正轨了”。 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:4:0","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["personal"],"content":"ChangeLog 2018-05-25 拆分过长段落、删除多余的“的” 2017-04-30 删除主题阅读、增加结尾 2017-04-05 增加 统计学、如何学习 2017-02-06 初稿 ","date":"2017-02-06","objectID":"/2017-02-06-reading-history-1/:5:0","tags":["成长","读书"],"title":"一个人的阅读史（一）","uri":"/2017-02-06-reading-history-1/"},{"categories":["learning"],"content":"《金字塔原理》读书笔记","date":"2016-09-11","objectID":"/2016-09-11-minto-pyramid-principle/","tags":["读书"],"title":"明托金字塔原理","uri":"/2016-09-11-minto-pyramid-principle/"},{"categories":["learning"],"content":"此书全名是《金字塔原理，思考、写作和解决问题的逻辑》，书名看似高大上，小编也是被它忽悠了。正如书名 XXX 原理一样，书的内容也很枯燥无味，小编强打着精神把前三篇看完了，希望能在这本极负盛名的书中能再发现一点金子（最后一篇是讲形式上的金字塔结构，不如一般的设计书介绍的好）。虽然书中的例子需要背景知识，方法需要不断的练习，但全书的内容可以分为思维、写作和解决问题三块，用一张纸就可以讲明白。 ","date":"2016-09-11","objectID":"/2016-09-11-minto-pyramid-principle/:0:0","tags":["读书"],"title":"明托金字塔原理","uri":"/2016-09-11-minto-pyramid-principle/"},{"categories":["learning"],"content":"思维 书中介绍的在金字塔原理下形成的思维方式，实际上就是小编认为在自然情况下最容易形成的一种思维方式，也是最容易接受的一种思维方式，说白了就是总分结构的思维方式。可能有些人已经养成了这种思维习惯，那无需再阅读了；有些人有时候会无意识地运用这种思维方式但有时又懒于归纳整理，需要明确一下遵从金字塔原理的思维方式。 小编阅读之后最先意识到的是这种思维方式有助于记忆。书中提到人类记忆平行条目的极限为 7±2，也就是说一般人很难记住接连六七条的内容。利用金字塔原理可以将过于繁多的条目进行归纳分类，使得每一母条目下的子条目不超过四到五个，且平行条目之间按照一定的顺序排列。 母条目和子条目之间具有逻辑关系，子条目或是通过演绎（子条目为一系列推理）得出母条目，或是通过归纳（将相似的思维观点或相关的行动组织在一起）得出母条目，通常来说归纳比演绎更利于读者理解。平行条目之间需要按照一定的顺序排列，一般有时间流程顺序、结构关系顺序和重要性顺序。 ","date":"2016-09-11","objectID":"/2016-09-11-minto-pyramid-principle/:1:0","tags":["读书"],"title":"明托金字塔原理","uri":"/2016-09-11-minto-pyramid-principle/"},{"categories":["learning"],"content":"写作 本书写作部分的原理与思维部分大同小异。为了让读者理解，最好先告诉读者一个概括性的结论，然后再有规律地分条详细说明，既金字塔结构。 值得一提的是写作部分的序言，本书介绍了一种包含情境、冲突、问题和答案四部分的写法。在序言部分，作者需要说明有关主题的情境，将读者的注意力吸引到文章中来，冲突由情境发展而来，让读者自然而然地提出问题，然后给出作者自己的答案，吸引读者继续阅读。当然这四部分可以根据个人的习惯组合。 而文章的主体部分，即分条详细说明的部分，需要作者独到的见解，让读者眼前一亮。 ","date":"2016-09-11","objectID":"/2016-09-11-minto-pyramid-principle/:2:0","tags":["读书"],"title":"明托金字塔原理","uri":"/2016-09-11-minto-pyramid-principle/"},{"categories":["learning"],"content":"解决问题 解决问题首先要界定问题，也就是问题是什么。可以根据以下界定问题的框架确定问题 ![](http://images.stanine.top/Minto Pyramid Principle.jpeg) 非期望结果是什么？ 期望结果是什么？ 解决方案是什么？如何执行？ 解决方案不可行要怎么做？ 可行的解决方案中最优的方案是什么？ 至于如何解决问题需要具体问题具体分析，书中提到了结构化分析的方法。结构化分析方法给出一组帮助系统分析人员产生功能规约的原理与技术。它一般利用图形表达用户需求，使用的手段主要有数据流图、数据字典、结构化语言、判定表以及判定树等，读者可以自行查阅。 ","date":"2016-09-11","objectID":"/2016-09-11-minto-pyramid-principle/:3:0","tags":["读书"],"title":"明托金字塔原理","uri":"/2016-09-11-minto-pyramid-principle/"},{"categories":["learning"],"content":"ChangeLog 2016-09-11 初稿 ","date":"2016-09-11","objectID":"/2016-09-11-minto-pyramid-principle/:4:0","tags":["读书"],"title":"明托金字塔原理","uri":"/2016-09-11-minto-pyramid-principle/"},{"categories":["learning"],"content":"《万里十五年》读书笔记。","date":"2016-02-16","objectID":"/2016-02-16-1587/","tags":["读书"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["learning"],"content":"万历十五年，平平淡淡，毫不起眼的一年，却为最后一个汉人统治王朝的衰败拉开了序幕。 本书共七章，大致可以分为三部分：皇帝、首辅和突出人物。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:0:0","tags":["读书"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["learning"],"content":"万历皇帝 从小接受正规的太学教育，以冯保和张居正为主要老师，学习经史、礼仪。九岁登基，可以说是完全在文官体制中长大。成年后，万历皇帝励精图治，想有一番作为，但几次与文官对抗之后，失望不已，自己家事被臣子们粗暴干预，也厌倦了在各种典礼上充当木偶，于是怠政三十多年，使明王朝再无可能复兴。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:1:0","tags":["读书"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["learning"],"content":"首辅 万历皇帝的第一任首辅是他的老师张居正。张居正一心想重整赋税，丈量全国田地。虽反对者众多，但以他的名望和权利，也许可能改革成功。天不随人愿，改革刚开始，他便抱恨终天了。 后一位首辅是申时行，善于调和君臣矛盾，使君臣相妥协。他深知帝国有一个特点：一项政策能否付诸实施及成败，全靠看它与所有文官共同的习惯是否相安勿扰，否则理论上再完美也不过是空中楼阁，国家最大的问题就是文官。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:2:0","tags":["读书"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["learning"],"content":"文官 为文官者，通常是父祖节衣缩食，寡母自我牺牲，贤妻茹苦含辛，外加个人的聪明和努力而来。 根据家族背景和个人财富欲望，分别可以分为两种：家境贫寒和富裕、用贪和不用贪。按照向揽财致富的社会风气投降程度可分为：大多数在似合法又似非法的灰色地带取得部分额外收入，即保持生活水平又无损于情操；有相当数量的文官搜刮自肥，声名狼藉；有一部分则极端清高自负，一介不苟取于人。 文官如此划归，造成了文官之间的不能和谐，“乡谊”、“年谊”、“姻谊”等小团体又加剧了这种不和谐。文官虽自称公仆，实系主人，又阴又阳。帝国不是以法律治理天下臣民，而是以“四书”中的伦理道德作为主宰，即便贵为皇帝，其全部言行也都要符合道德规范，而解释权却分属文官。 治国关键不是去解决繁琐问题，而是防止坏事发生。有时文官会以正直作为商品，骗取声望。技术上的争端，一经发展，就可以升级扩大为道德问题，胜利者及失败者也就相应被认为至善或极恶。张居正自信过度，不肯对事实做必要的让步，太理想，不理会官场的阴，死后惨招文官讨伐。张一案结束之后，张欣赏的官员下贬，张不喜欢的官员升迁。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:3:0","tags":["读书"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["learning"],"content":"突出人物 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:4:0","tags":["读书"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["learning"],"content":"古怪模范官僚——海瑞 海瑞奉行传统儒家道德，是当时全国模范官员，但终没看透官场的阴阳之道，履任现职，一身抱负无法施展。文官个体在文官群体中的力量微不足道，不能改变整个体制。海瑞不认为治国的根本大计，是在上层悬挂一个抽象的至善至美的道德标准，而责成下面的人在可能范围内照办，行不通就打折扣。海瑞尊重法律，按照规定的最高限度执行，体现了有教养的读书人，服务于公众而牺牲自我的精神。君子何以有志于做官：无非出于恻隐和义愤。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:4:1","tags":["读书"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["learning"],"content":"孤独将领——戚继光 将领在明朝地位极低。其着眼于取得实效而不避极端：冲锋陷阵，要求集中全力，对敌人的重点作猛烈打击；退守防御，考虑的是地形险要和工事完善，如不可守就断然放弃；战斗胜利，就一心扩张战果，不为其他问题犹豫。他们把自己和部下的生命视为赌场筹码，必要时孤注一掷。而大多数文官则以中庸之道为处世原则，标榜稳健和平。 武人退役后又会与社会格格不入，人们重视安详的仪表，华丽的文辞，口若悬河的辩才，以及圆通无碍的机智，武人所培养的是严格和精确，在和平社会无用武之地。 戚继光和谭纶、张居正的关系密切，使他有机会施展才华，在蓟州任总兵十五年间，初步形成自己的战术——鸳鸯阵。但由于张居正一案，他只能告老还乡，从此明王朝错过了强兵抵御外敌的最后机会。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:4:2","tags":["读书"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["learning"],"content":"自相冲突哲学家——李贽 李贽继承心学主张，试图改革儒家学说，如成功可以为我中华点亮一丝人性解放的光芒。可惜他终不敌保守的腐朽众儒，被捕入狱，自尽而亡。李贽一生承受着家族责任带来的压力，仕途不顺，有段时间还靠救济度日，可悲可叹。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:4:3","tags":["读书"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["learning"],"content":"制度的得利益者 明王朝以「仁」治天下的立国精神已耗尽了生命力，作者认为，单纯以意识形态约束子民，用道德代替法律的制度，不但将庞大帝国拽入深渊，还使改革者身败名裂、壮志未酬。而在下认为，以当时生产力水平，法律即使完备，其效果未必胜过约法三章。而意识形态的强化，是既得利益者，即文官群体，逐渐巩固自身利益的结果。 每个制度都会有其得利群体，明朝的得利群体是文官群体。文官群体会为了维护自身和家族利益出卖国家和皇家利益，少数逆潮流者改变不了时局。拥有至高个体权利的皇帝，也只能搬出太监去与文官抗衡，能打破这一系统的却是清兵入关。 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:5:0","tags":["读书"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"},{"categories":["learning"],"content":"ChangeLog 2016-02-16 初稿 2019-07-13 润笔 ","date":"2016-02-16","objectID":"/2016-02-16-1587/:6:0","tags":["读书"],"title":"制度的得利益者","uri":"/2016-02-16-1587/"}]