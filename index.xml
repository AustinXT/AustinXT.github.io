<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>夜航星</title>
        <link>https://austinxt.github.io/</link>
        <description>做一个智能时代的蛮子</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>dougxieting4@gmail.com (夜航星)</managingEditor>
            <webMaster>dougxieting4@gmail.com (夜航星)</webMaster><lastBuildDate>Fri, 01 Aug 2025 00:00:00 &#43;0800</lastBuildDate>
            <atom:link href="https://austinxt.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>什么知识值得学习？</title>
    <link>https://austinxt.github.io/2025-08-01-big-understandings/</link>
    <pubDate>Fri, 01 Aug 2025 00:00:00 &#43;0800</pubDate>
    <author>夜航星</author>
    <guid>https://austinxt.github.io/2025-08-01-big-understandings/</guid>
    <description><![CDATA[<p>「什么知识值得学习？」是<a href="https://book.douban.com/subject/26586892/" target="_blank" rel="noopener noreffer ">《为未知而教，为未来而学》</a>这本书最重要的元问题，也是本书作者试图回答的问题。</p>
<p>珀金斯把答案归结为一类「真知识」（Lifeready Learning）：它们既解决现实问题，又能随时间沉淀并扩展，如同滚雪球般汇聚力量。</p>]]></description>
</item>
<item>
    <title>在 Mac（M2）上，使用 UTM 安装 Windows11 虚拟机</title>
    <link>https://austinxt.github.io/2024-10-30-install-window11-in-utm/</link>
    <pubDate>Wed, 30 Oct 2024 00:00:00 &#43;0800</pubDate>
    <author>夜航星</author>
    <guid>https://austinxt.github.io/2024-10-30-install-window11-in-utm/</guid>
    <description><![CDATA[<p></p>
<p>在 Mac（M2） 上，使用 UTM 安装 Windows11 虚拟机，大致步骤还是按照<a href="https://docs.getutm.app/guides/windows/" target="_blank" rel="noopener noreffer ">Windows 11 | UTM Documentation</a>走，中间会遇到一些卡壳的步骤需要克服一下。</p>]]></description>
</item>
<item>
    <title>和一个跟自己很不一样的人，吃饭聊天</title>
    <link>https://austinxt.github.io/2024-08-08-friend-xh/</link>
    <pubDate>Thu, 08 Aug 2024 00:00:00 &#43;0800</pubDate>
    <author>夜航星</author>
    <guid>https://austinxt.github.io/2024-08-08-friend-xh/</guid>
    <description><![CDATA[<p>7 月末和 XH 约了八月底见面，没想到她还记得。之前聊天的印象是「自律、自由、洒脱的人，帮我坚定了坚持锻炼的决心。XH 是我以前不敢接触的那类人，很独立，让我内心很深处燃起了动力，保持自律，持续做有意义的事，把大目标一步步做成了。」</p>]]></description>
</item>
<item>
    <title>Git 数据模型与命令行</title>
    <link>https://austinxt.github.io/2023-09-10-git/</link>
    <pubDate>Sun, 10 Sep 2023 00:00:00 &#43;0800</pubDate>
    <author>夜航星</author>
    <guid>https://austinxt.github.io/2023-09-10-git/</guid>
    <description><![CDATA[<p>学习 Git 需要自顶向下学习，先了解数据模型，再去学习命令行，思考命令行对数据模型做了哪些操作。</p>
<h2 id="概览">概览</h2>
<blockquote>
<p>版本控制系统 (VCSs) 是一类用于追踪源代码（或其他文件、文件夹）改动的工具。顾名思义，这些工具可以帮助我们管理代码的修改历史；不仅如此，它还可以让协作编码变得更方便。VCS通过一系列的快照将某个文件夹及其内容保存了起来，每个快照都包含了文件或文件夹的完整状态。同时它还维护了快照创建者的信息以及每个快照的相关信息等等。</p>]]></description>
</item>
<item>
    <title>密码学入门</title>
    <link>https://austinxt.github.io/2023-09-09-encrypt/</link>
    <pubDate>Sat, 09 Sep 2023 00:00:00 &#43;0800</pubDate>
    <author>夜航星</author>
    <guid>https://austinxt.github.io/2023-09-09-encrypt/</guid>
    <description><![CDATA[<h2 id="散列函数">散列函数</h2>
<p><a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function" target="_blank" rel="noopener noreffer ">密码散列函数</a> (Cryptographic hash function) 可以将任意大小的数据映射为一个固定大小的输出。除此之外，还有一些其他特性。 一个散列函数的大概规范如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">hash(value: array&lt;byte&gt;) -&gt; vector&lt;byte, N&gt;  (N对于该函数固定) </span></span></code></pre></div></div>
<p>下面我们用<code>sha3sum</code>命令来测试SHA1对几个字符串的输出：</p>]]></description>
</item>
<item>
    <title>Vim 学习指南</title>
    <link>https://austinxt.github.io/2023-07-22-vim/</link>
    <pubDate>Sat, 22 Jul 2023 00:00:00 &#43;0800</pubDate>
    <author>夜航星</author>
    <guid>https://austinxt.github.io/2023-07-22-vim/</guid>
    <description><![CDATA[<blockquote>
<p>Vim 是一个能跟上你思维速度的编辑器。</p></blockquote>
<p>Vim 编辑器学习的步骤为：</p>
<ol>
<li>理解编辑器的设计理念和基本原理；</li>
<li>学习命令，浏览教程，完成 <code>vimtutor</code>；</li>
<li>情景练习；</li>
<li>将编辑器替换成 Vim，持续使用；</li>
<li>优化使用，自定义，安装扩展插件。</li>
</ol>
<h2 id="概况">概况</h2>
<h3 id="vim-的哲学">Vim 的哲学</h3>
<blockquote>
<p>在编程的时候，你会把大量时间花在阅读/编辑而不是在写代码上。所以，Vim 是一个多模态编辑 器：它对于插入文字和操纵文字有不同的模式。Vim 是可编程的（可以使用 Vimscript 或者像 Python 一样的其他程序语言），Vim 的接口本身也是一个程序语言：键入操作（以及其助记名） 是命令，这些命令也是可组合的。Vim 避免了使用鼠标，因为那样太慢了；Vim 甚至避免用 上下左右键因为那样需要太多的手指移动。</p>]]></description>
</item>
<item>
    <title>调试代码常用方法</title>
    <link>https://austinxt.github.io/2023-06-13-debug/</link>
    <pubDate>Tue, 13 Jun 2023 00:00:00 &#43;0800</pubDate>
    <author>夜航星</author>
    <guid>https://austinxt.github.io/2023-06-13-debug/</guid>
    <description><![CDATA[<p>调试代码的学习，需要了解它的构成，有静态代码、打印、日志、第三方日志、调试器和专用工具，然后利用合适的工具和方法去实践。</p>
<h2 id="打印调试法与日志">打印调试法与日志</h2>
<blockquote>
<p>最有效的 debug 工具就是细致的分析，配合恰当位置的打印语句。
— Brian Kernighan, <em>Unix 新手入门</em>。</p>]]></description>
</item>
<item>
    <title>make 构建工具介绍</title>
    <link>https://austinxt.github.io/2023-05-31-make/</link>
    <pubDate>Wed, 31 May 2023 00:00:00 &#43;0800</pubDate>
    <author>夜航星</author>
    <guid>https://austinxt.github.io/2023-05-31-make/</guid>
    <description><![CDATA[<p>构建工具通常需要定义<em>依赖</em>、<em>目标</em>和<em>规则</em>。</p>
<p><code>make</code> 是最常用的构建系统之一，您会发现它通常被安装到了几乎所有基于 UNIX 的系统中。<code>make</code>并不完美，但是对于中小型项目来说，它已经足够好了。当您执行 <code>make</code> 时，它会去参考当前目录下名为 <code>Makefile</code> 的文件。所有构建目标、相关依赖和规则都需要在该文件中定义，它看上去是这样的：</p>]]></description>
</item>
<item>
    <title>命令行环境使用指南</title>
    <link>https://austinxt.github.io/2023-05-27-cmd-env/</link>
    <pubDate>Sat, 27 May 2023 00:00:00 &#43;0800</pubDate>
    <author>夜航星</author>
    <guid>https://austinxt.github.io/2023-05-27-cmd-env/</guid>
    <description><![CDATA[<blockquote>
<p>无界面情况下的唯一选择</p></blockquote>
<p>命令行环境的学习主要包括</p>
<ul>
<li>任务控制：Shell 操作和进程的关系-&gt;需要了解进程信号</li>
<li>终端多路复用：如何在终端完成多面板、多窗口的任务-&gt;需要会使用相关工具</li>
<li>dotfiles 管理-&gt;需要管理起来dotfiles</li>
<li>ssh 应用：命令行工具和 ssh 工具的使用-&gt;需要掌握一套高效的操作远端设备的流程</li>
</ul>
<h2 id="任务控制">任务控制</h2>
<p>Shell 会使用 UNIX 提供的信号机制执行进程间通信。当一个进程接收到信号时，它会停止执行、处理该信号并基于信号传递的信息来改变其执行。就这一点而言，信号是一种<em>软件中断</em>。</p>]]></description>
</item>
<item>
    <title>Shell 命令行数据处理</title>
    <link>https://austinxt.github.io/2023-01-11-data-analysis/</link>
    <pubDate>Wed, 11 Jan 2023 00:00:00 &#43;0800</pubDate>
    <author>夜航星</author>
    <guid>https://austinxt.github.io/2023-01-11-data-analysis/</guid>
    <description><![CDATA[<p>Shell 命令行数据处理是在 Unix 系统处理大数据绕不过去的技能。</p>
<p>学习需要和场景相结合，在熟悉 awk、paste 等工具的基础上，根据实际需求迭代工具集，并且记录例子。</p>]]></description>
</item>
</channel>
</rss>
